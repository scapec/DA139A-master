
ExUppgift2014_6_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006234  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086234  00086234  00016234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  0008623c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000082ec  200709a8  00086be8  000209a8  2**3
                  ALLOC
  4 .stack        00002004  20078c94  0008eed4  000209a8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000209a4  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000209cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014142  00000000  00000000  00020a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000035b0  00000000  00000000  00034b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008988  00000000  00000000  00038118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f98  00000000  00000000  00040aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ea8  00000000  00000000  00041a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ba9d  00000000  00000000  000428e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013eb8  00000000  00000000  0005e37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006baaa  00000000  00000000  00072235  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002fa4  00000000  00000000  000ddce0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ac98 	.word	0x2007ac98
   80004:	0008083d 	.word	0x0008083d
   80008:	00080839 	.word	0x00080839
   8000c:	00080839 	.word	0x00080839
   80010:	00080839 	.word	0x00080839
   80014:	00080839 	.word	0x00080839
   80018:	00080839 	.word	0x00080839
	...
   8002c:	00081071 	.word	0x00081071
   80030:	00080839 	.word	0x00080839
   80034:	00000000 	.word	0x00000000
   80038:	000810ed 	.word	0x000810ed
   8003c:	00081129 	.word	0x00081129
   80040:	00080839 	.word	0x00080839
   80044:	00080839 	.word	0x00080839
   80048:	00080839 	.word	0x00080839
   8004c:	00080839 	.word	0x00080839
   80050:	00080839 	.word	0x00080839
   80054:	00080839 	.word	0x00080839
   80058:	00080839 	.word	0x00080839
   8005c:	00080839 	.word	0x00080839
   80060:	00080839 	.word	0x00080839
   80064:	00080839 	.word	0x00080839
   80068:	00000000 	.word	0x00000000
   8006c:	0008067d 	.word	0x0008067d
   80070:	00080691 	.word	0x00080691
   80074:	000806a5 	.word	0x000806a5
   80078:	000806b9 	.word	0x000806b9
	...
   80084:	00080839 	.word	0x00080839
   80088:	00080839 	.word	0x00080839
   8008c:	00080839 	.word	0x00080839
   80090:	00080839 	.word	0x00080839
   80094:	00080839 	.word	0x00080839
   80098:	00080839 	.word	0x00080839
   8009c:	00080839 	.word	0x00080839
   800a0:	00080839 	.word	0x00080839
   800a4:	00000000 	.word	0x00000000
   800a8:	00080839 	.word	0x00080839
   800ac:	00080839 	.word	0x00080839
   800b0:	00080839 	.word	0x00080839
   800b4:	00080839 	.word	0x00080839
   800b8:	00080839 	.word	0x00080839
   800bc:	00080839 	.word	0x00080839
   800c0:	00080839 	.word	0x00080839
   800c4:	00080839 	.word	0x00080839
   800c8:	00080839 	.word	0x00080839
   800cc:	00080839 	.word	0x00080839
   800d0:	00080839 	.word	0x00080839
   800d4:	00080839 	.word	0x00080839
   800d8:	00080839 	.word	0x00080839
   800dc:	00080839 	.word	0x00080839
   800e0:	00080839 	.word	0x00080839
   800e4:	00080839 	.word	0x00080839
   800e8:	00080839 	.word	0x00080839
   800ec:	00080839 	.word	0x00080839
   800f0:	00080839 	.word	0x00080839

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	0008623c 	.word	0x0008623c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709ac 	.word	0x200709ac
   80144:	0008623c 	.word	0x0008623c
   80148:	0008623c 	.word	0x0008623c
   8014c:	00000000 	.word	0x00000000

00080150 <adc_setup>:
#include "all_variables.h"
#include "ReglStyr.h"

/* Setup Function for ADC */
void adc_setup()
{
   80150:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80152:	2025      	movs	r0, #37	; 0x25
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <adc_setup+0x40>)
   80156:	4798      	blx	r3
	adc_init(ADC, sysclk_get_main_hz(), 20000000, 0);		// Configure for maximum frequency @ 20 MHz
   80158:	4c0e      	ldr	r4, [pc, #56]	; (80194 <adc_setup+0x44>)
   8015a:	2300      	movs	r3, #0
   8015c:	4a0e      	ldr	r2, [pc, #56]	; (80198 <adc_setup+0x48>)
   8015e:	490f      	ldr	r1, [pc, #60]	; (8019c <adc_setup+0x4c>)
   80160:	4620      	mov	r0, r4
   80162:	4d0f      	ldr	r5, [pc, #60]	; (801a0 <adc_setup+0x50>)
   80164:	47a8      	blx	r5
	adc_configure_timing(ADC, 0, 0, 0);
   80166:	2300      	movs	r3, #0
   80168:	461a      	mov	r2, r3
   8016a:	4619      	mov	r1, r3
   8016c:	4620      	mov	r0, r4
   8016e:	4d0d      	ldr	r5, [pc, #52]	; (801a4 <adc_setup+0x54>)
   80170:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);			// 0-4095
   80172:	2100      	movs	r1, #0
   80174:	4620      	mov	r0, r4
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <adc_setup+0x58>)
   80178:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);				// trig just by software
   8017a:	2200      	movs	r2, #0
   8017c:	4611      	mov	r1, r2
   8017e:	4620      	mov	r0, r4
   80180:	4b0a      	ldr	r3, [pc, #40]	; (801ac <adc_setup+0x5c>)
   80182:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);				// PB17 - AD8 for Arduino Due
   80184:	210a      	movs	r1, #10
   80186:	4620      	mov	r0, r4
   80188:	4b09      	ldr	r3, [pc, #36]	; (801b0 <adc_setup+0x60>)
   8018a:	4798      	blx	r3
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	000807b9 	.word	0x000807b9
   80194:	400c0000 	.word	0x400c0000
   80198:	01312d00 	.word	0x01312d00
   8019c:	0a037a00 	.word	0x0a037a00
   801a0:	00080389 	.word	0x00080389
   801a4:	000803dd 	.word	0x000803dd
   801a8:	000803bd 	.word	0x000803bd
   801ac:	000803cd 	.word	0x000803cd
   801b0:	00080401 	.word	0x00080401

000801b4 <sensor_read_adc>:
}

/* Read ADC value*/
int16_t sensor_read_adc()
{// gör plats i buffer för senaste värdet
   801b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   801b6:	4d1c      	ldr	r5, [pc, #112]	; (80228 <sensor_read_adc+0x74>)
   801b8:	f1a5 0414 	sub.w	r4, r5, #20
   801bc:	462b      	mov	r3, r5
	for(int i = 10; i>0; i--){
		buffer_filter[i] = buffer_filter[i-1];
   801be:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
   801c2:	805a      	strh	r2, [r3, #2]
}

/* Read ADC value*/
int16_t sensor_read_adc()
{// gör plats i buffer för senaste värdet
	for(int i = 10; i>0; i--){
   801c4:	42a3      	cmp	r3, r4
   801c6:	d1fa      	bne.n	801be <sensor_read_adc+0xa>
		buffer_filter[i] = buffer_filter[i-1];
	}
	
	adc_start(ADC);
   801c8:	4818      	ldr	r0, [pc, #96]	; (8022c <sensor_read_adc+0x78>)
   801ca:	4b19      	ldr	r3, [pc, #100]	; (80230 <sensor_read_adc+0x7c>)
   801cc:	4798      	blx	r3
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
   801ce:	4f17      	ldr	r7, [pc, #92]	; (8022c <sensor_read_adc+0x78>)
   801d0:	4e18      	ldr	r6, [pc, #96]	; (80234 <sensor_read_adc+0x80>)
   801d2:	4638      	mov	r0, r7
   801d4:	47b0      	blx	r6
   801d6:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   801da:	d0fa      	beq.n	801d2 <sensor_read_adc+0x1e>
	buffer_filter[0] = adc_get_latest_value(ADC);
   801dc:	4813      	ldr	r0, [pc, #76]	; (8022c <sensor_read_adc+0x78>)
   801de:	4b16      	ldr	r3, [pc, #88]	; (80238 <sensor_read_adc+0x84>)
   801e0:	4798      	blx	r3
   801e2:	b203      	sxth	r3, r0
	if(buffer_filter[0] < 0){
   801e4:	2b00      	cmp	r3, #0
   801e6:	db02      	blt.n	801ee <sensor_read_adc+0x3a>
		buffer_filter[i] = buffer_filter[i-1];
	}
	
	adc_start(ADC);
	while((adc_get_status(ADC) & 0x1<<24)==0);  // Wait until DRDY(Data Ready) is HIGH
	buffer_filter[0] = adc_get_latest_value(ADC);
   801e8:	4a14      	ldr	r2, [pc, #80]	; (8023c <sensor_read_adc+0x88>)
   801ea:	8013      	strh	r3, [r2, #0]
   801ec:	e002      	b.n	801f4 <sensor_read_adc+0x40>
	if(buffer_filter[0] < 0){
		buffer_filter[0] = buffer_filter[0]*-1;
   801ee:	4240      	negs	r0, r0
   801f0:	4b12      	ldr	r3, [pc, #72]	; (8023c <sensor_read_adc+0x88>)
   801f2:	8018      	strh	r0, [r3, #0]
   801f4:	4b12      	ldr	r3, [pc, #72]	; (80240 <sensor_read_adc+0x8c>)
   801f6:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
	for( int i = 0; i<10;i++){buffer_filter_res = buffer_filter_res + buffer_filter[i];
   801fa:	f934 2b02 	ldrsh.w	r2, [r4], #2
   801fe:	4413      	add	r3, r2
   80200:	b21b      	sxth	r3, r3
   80202:	42ac      	cmp	r4, r5
   80204:	d1f9      	bne.n	801fa <sensor_read_adc+0x46>
	
	}
	 buffer_filter_res = buffer_filter_res / 10;  // average
   80206:	4a0f      	ldr	r2, [pc, #60]	; (80244 <sensor_read_adc+0x90>)
   80208:	fb82 1203 	smull	r1, r2, r2, r3
   8020c:	17db      	asrs	r3, r3, #31
   8020e:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
   80212:	b21b      	sxth	r3, r3
	 	if(buffer_filter_res < 0){
   80214:	2b00      	cmp	r3, #0
		 	buffer_filter_res = buffer_filter_res*-1;
   80216:	bfb8      	it	lt
   80218:	425b      	neglt	r3, r3
   8021a:	4a09      	ldr	r2, [pc, #36]	; (80240 <sensor_read_adc+0x8c>)
   8021c:	8013      	strh	r3, [r2, #0]
// 		return 20;
// 	else if(buffer_filter_res > 2147 && buffer_filter_res <= 2620)
// 		return 15;
// 	else if(buffer_filter_res > 2620)
// 		return 10;
}
   8021e:	4b08      	ldr	r3, [pc, #32]	; (80240 <sensor_read_adc+0x8c>)
   80220:	f9b3 0000 	ldrsh.w	r0, [r3]
   80224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80226:	bf00      	nop
   80228:	20070a74 	.word	0x20070a74
   8022c:	400c0000 	.word	0x400c0000
   80230:	000803f9 	.word	0x000803f9
   80234:	00080411 	.word	0x00080411
   80238:	0008040d 	.word	0x0008040d
   8023c:	20070a60 	.word	0x20070a60
   80240:	20070a4a 	.word	0x20070a4a
   80244:	66666667 	.word	0x66666667

00080248 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80248:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8024a:	480e      	ldr	r0, [pc, #56]	; (80284 <sysclk_init+0x3c>)
   8024c:	4b0e      	ldr	r3, [pc, #56]	; (80288 <sysclk_init+0x40>)
   8024e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80250:	213e      	movs	r1, #62	; 0x3e
   80252:	2000      	movs	r0, #0
   80254:	4b0d      	ldr	r3, [pc, #52]	; (8028c <sysclk_init+0x44>)
   80256:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80258:	4c0d      	ldr	r4, [pc, #52]	; (80290 <sysclk_init+0x48>)
   8025a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8025c:	2800      	cmp	r0, #0
   8025e:	d0fc      	beq.n	8025a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80260:	4b0c      	ldr	r3, [pc, #48]	; (80294 <sysclk_init+0x4c>)
   80262:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80264:	4a0c      	ldr	r2, [pc, #48]	; (80298 <sysclk_init+0x50>)
   80266:	4b0d      	ldr	r3, [pc, #52]	; (8029c <sysclk_init+0x54>)
   80268:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8026a:	4c0d      	ldr	r4, [pc, #52]	; (802a0 <sysclk_init+0x58>)
   8026c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8026e:	2800      	cmp	r0, #0
   80270:	d0fc      	beq.n	8026c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80272:	2010      	movs	r0, #16
   80274:	4b0b      	ldr	r3, [pc, #44]	; (802a4 <sysclk_init+0x5c>)
   80276:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80278:	4b0b      	ldr	r3, [pc, #44]	; (802a8 <sysclk_init+0x60>)
   8027a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8027c:	4801      	ldr	r0, [pc, #4]	; (80284 <sysclk_init+0x3c>)
   8027e:	4b02      	ldr	r3, [pc, #8]	; (80288 <sysclk_init+0x40>)
   80280:	4798      	blx	r3
   80282:	bd10      	pop	{r4, pc}
   80284:	0501bd00 	.word	0x0501bd00
   80288:	200700a5 	.word	0x200700a5
   8028c:	00080735 	.word	0x00080735
   80290:	00080789 	.word	0x00080789
   80294:	00080799 	.word	0x00080799
   80298:	200d3f01 	.word	0x200d3f01
   8029c:	400e0600 	.word	0x400e0600
   802a0:	000807a9 	.word	0x000807a9
   802a4:	000806cd 	.word	0x000806cd
   802a8:	000808e9 	.word	0x000808e9

000802ac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
   802ac:	b990      	cbnz	r0, 802d4 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802b2:	460c      	mov	r4, r1
   802b4:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802b6:	2a00      	cmp	r2, #0
   802b8:	dd0f      	ble.n	802da <_read+0x2e>
   802ba:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802bc:	4e08      	ldr	r6, [pc, #32]	; (802e0 <_read+0x34>)
   802be:	4d09      	ldr	r5, [pc, #36]	; (802e4 <_read+0x38>)
   802c0:	6830      	ldr	r0, [r6, #0]
   802c2:	4621      	mov	r1, r4
   802c4:	682b      	ldr	r3, [r5, #0]
   802c6:	4798      	blx	r3
		ptr++;
   802c8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802ca:	42a7      	cmp	r7, r4
   802cc:	d1f8      	bne.n	802c0 <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   802ce:	4640      	mov	r0, r8
   802d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   802d4:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   802d8:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   802da:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
   802dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802e0:	20078c8c 	.word	0x20078c8c
   802e4:	20078c84 	.word	0x20078c84

000802e8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   802e8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   802ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   802ee:	4b1e      	ldr	r3, [pc, #120]	; (80368 <board_init+0x80>)
   802f0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802f2:	200b      	movs	r0, #11
   802f4:	4c1d      	ldr	r4, [pc, #116]	; (8036c <board_init+0x84>)
   802f6:	47a0      	blx	r4
   802f8:	200c      	movs	r0, #12
   802fa:	47a0      	blx	r4
   802fc:	200d      	movs	r0, #13
   802fe:	47a0      	blx	r4
   80300:	200e      	movs	r0, #14
   80302:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80304:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80308:	203b      	movs	r0, #59	; 0x3b
   8030a:	4c19      	ldr	r4, [pc, #100]	; (80370 <board_init+0x88>)
   8030c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8030e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80312:	2055      	movs	r0, #85	; 0x55
   80314:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80316:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8031a:	2056      	movs	r0, #86	; 0x56
   8031c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8031e:	4915      	ldr	r1, [pc, #84]	; (80374 <board_init+0x8c>)
   80320:	2068      	movs	r0, #104	; 0x68
   80322:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80324:	4914      	ldr	r1, [pc, #80]	; (80378 <board_init+0x90>)
   80326:	205c      	movs	r0, #92	; 0x5c
   80328:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8032a:	4a14      	ldr	r2, [pc, #80]	; (8037c <board_init+0x94>)
   8032c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80330:	4813      	ldr	r0, [pc, #76]	; (80380 <board_init+0x98>)
   80332:	4b14      	ldr	r3, [pc, #80]	; (80384 <board_init+0x9c>)
   80334:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
   80336:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8033a:	2039      	movs	r0, #57	; 0x39
   8033c:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
   8033e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80342:	200b      	movs	r0, #11
   80344:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
   80346:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8034a:	202c      	movs	r0, #44	; 0x2c
   8034c:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWM_LED1_GPIO, PIN_PWM_LED1_FLAGS);
#endif

#ifdef CONF_BOARD_PWM_LED2
	/* Configure PWM LED2 pin */
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
   8034e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80352:	2057      	movs	r0, #87	; 0x57
   80354:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80356:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8035a:	202b      	movs	r0, #43	; 0x2b
   8035c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8035e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80362:	202a      	movs	r0, #42	; 0x2a
   80364:	47a0      	blx	r4
   80366:	bd10      	pop	{r4, pc}
   80368:	400e1a50 	.word	0x400e1a50
   8036c:	000807b9 	.word	0x000807b9
   80370:	000804b9 	.word	0x000804b9
   80374:	28000079 	.word	0x28000079
   80378:	28000001 	.word	0x28000001
   8037c:	08000001 	.word	0x08000001
   80380:	400e0e00 	.word	0x400e0e00
   80384:	0008058d 	.word	0x0008058d

00080388 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80388:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   8038a:	2401      	movs	r4, #1
   8038c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   8038e:	2500      	movs	r5, #0
   80390:	6045      	str	r5, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   80392:	f240 2402 	movw	r4, #514	; 0x202
   80396:	f8c0 4120 	str.w	r4, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   8039a:	f8c0 5104 	str.w	r5, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   8039e:	f8c0 5114 	str.w	r5, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   803a2:	6844      	ldr	r4, [r0, #4]
   803a4:	0052      	lsls	r2, r2, #1
   803a6:	fbb1 f1f2 	udiv	r1, r1, r2
   803aa:	1e4a      	subs	r2, r1, #1
   803ac:	0212      	lsls	r2, r2, #8
   803ae:	b292      	uxth	r2, r2
   803b0:	4323      	orrs	r3, r4
   803b2:	431a      	orrs	r2, r3
   803b4:	6042      	str	r2, [r0, #4]
	return 0;
}
   803b6:	4628      	mov	r0, r5
   803b8:	bc30      	pop	{r4, r5}
   803ba:	4770      	bx	lr

000803bc <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   803bc:	6843      	ldr	r3, [r0, #4]
   803be:	f023 0310 	bic.w	r3, r3, #16
   803c2:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   803c4:	6843      	ldr	r3, [r0, #4]
   803c6:	4319      	orrs	r1, r3
   803c8:	6041      	str	r1, [r0, #4]
   803ca:	4770      	bx	lr

000803cc <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   803cc:	6843      	ldr	r3, [r0, #4]
   803ce:	01d2      	lsls	r2, r2, #7
   803d0:	b2d2      	uxtb	r2, r2
   803d2:	4319      	orrs	r1, r3
   803d4:	4311      	orrs	r1, r2
   803d6:	6041      	str	r1, [r0, #4]
   803d8:	4770      	bx	lr
   803da:	bf00      	nop

000803dc <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   803dc:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   803de:	6844      	ldr	r4, [r0, #4]
   803e0:	0609      	lsls	r1, r1, #24
   803e2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
   803e6:	4322      	orrs	r2, r4
   803e8:	430a      	orrs	r2, r1
   803ea:	071b      	lsls	r3, r3, #28
   803ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   803f0:	4313      	orrs	r3, r2
   803f2:	6043      	str	r3, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
}
   803f4:	bc10      	pop	{r4}
   803f6:	4770      	bx	lr

000803f8 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   803f8:	2302      	movs	r3, #2
   803fa:	6003      	str	r3, [r0, #0]
   803fc:	4770      	bx	lr
   803fe:	bf00      	nop

00080400 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80400:	2301      	movs	r3, #1
   80402:	fa03 f101 	lsl.w	r1, r3, r1
   80406:	6101      	str	r1, [r0, #16]
   80408:	4770      	bx	lr
   8040a:	bf00      	nop

0008040c <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
   8040c:	6a00      	ldr	r0, [r0, #32]
}
   8040e:	4770      	bx	lr

00080410 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80410:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80412:	4770      	bx	lr

00080414 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80414:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80416:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8041a:	d016      	beq.n	8044a <pio_set_peripheral+0x36>
   8041c:	d804      	bhi.n	80428 <pio_set_peripheral+0x14>
   8041e:	b1c1      	cbz	r1, 80452 <pio_set_peripheral+0x3e>
   80420:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80424:	d00a      	beq.n	8043c <pio_set_peripheral+0x28>
   80426:	e013      	b.n	80450 <pio_set_peripheral+0x3c>
   80428:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8042c:	d011      	beq.n	80452 <pio_set_peripheral+0x3e>
   8042e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80432:	d00e      	beq.n	80452 <pio_set_peripheral+0x3e>
   80434:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80438:	d10a      	bne.n	80450 <pio_set_peripheral+0x3c>
   8043a:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8043c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8043e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   80440:	400b      	ands	r3, r1
   80442:	ea23 0302 	bic.w	r3, r3, r2
   80446:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80448:	e002      	b.n	80450 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8044a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8044c:	4313      	orrs	r3, r2
   8044e:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80450:	6042      	str	r2, [r0, #4]
   80452:	4770      	bx	lr

00080454 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80454:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80456:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8045a:	bf14      	ite	ne
   8045c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8045e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80460:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80464:	bf14      	ite	ne
   80466:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80468:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8046a:	f012 0f02 	tst.w	r2, #2
   8046e:	d002      	beq.n	80476 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80470:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80474:	e004      	b.n	80480 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80476:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8047a:	bf18      	it	ne
   8047c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80480:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80482:	6001      	str	r1, [r0, #0]
   80484:	4770      	bx	lr
   80486:	bf00      	nop

00080488 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80488:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8048a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8048c:	9c01      	ldr	r4, [sp, #4]
   8048e:	b10c      	cbz	r4, 80494 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80490:	6641      	str	r1, [r0, #100]	; 0x64
   80492:	e000      	b.n	80496 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80494:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80496:	b10b      	cbz	r3, 8049c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80498:	6501      	str	r1, [r0, #80]	; 0x50
   8049a:	e000      	b.n	8049e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8049c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8049e:	b10a      	cbz	r2, 804a4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   804a0:	6301      	str	r1, [r0, #48]	; 0x30
   804a2:	e000      	b.n	804a6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   804a4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   804a6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   804a8:	6001      	str	r1, [r0, #0]
}
   804aa:	bc10      	pop	{r4}
   804ac:	4770      	bx	lr
   804ae:	bf00      	nop

000804b0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   804b0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   804b2:	4770      	bx	lr

000804b4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   804b4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   804b6:	4770      	bx	lr

000804b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   804b8:	b570      	push	{r4, r5, r6, lr}
   804ba:	b082      	sub	sp, #8
   804bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   804be:	0943      	lsrs	r3, r0, #5
   804c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804c8:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   804ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   804ce:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804d2:	d030      	beq.n	80536 <pio_configure_pin+0x7e>
   804d4:	d806      	bhi.n	804e4 <pio_configure_pin+0x2c>
   804d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804da:	d00a      	beq.n	804f2 <pio_configure_pin+0x3a>
   804dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   804e0:	d018      	beq.n	80514 <pio_configure_pin+0x5c>
   804e2:	e049      	b.n	80578 <pio_configure_pin+0xc0>
   804e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   804e8:	d030      	beq.n	8054c <pio_configure_pin+0x94>
   804ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   804ee:	d02d      	beq.n	8054c <pio_configure_pin+0x94>
   804f0:	e042      	b.n	80578 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   804f2:	f000 001f 	and.w	r0, r0, #31
   804f6:	2601      	movs	r6, #1
   804f8:	4086      	lsls	r6, r0
   804fa:	4632      	mov	r2, r6
   804fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80500:	4620      	mov	r0, r4
   80502:	4b1f      	ldr	r3, [pc, #124]	; (80580 <pio_configure_pin+0xc8>)
   80504:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80506:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8050a:	bf14      	ite	ne
   8050c:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8050e:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80510:	2001      	movs	r0, #1
   80512:	e032      	b.n	8057a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80514:	f000 001f 	and.w	r0, r0, #31
   80518:	2601      	movs	r6, #1
   8051a:	4086      	lsls	r6, r0
   8051c:	4632      	mov	r2, r6
   8051e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80522:	4620      	mov	r0, r4
   80524:	4b16      	ldr	r3, [pc, #88]	; (80580 <pio_configure_pin+0xc8>)
   80526:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80528:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8052c:	bf14      	ite	ne
   8052e:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80530:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80532:	2001      	movs	r0, #1
   80534:	e021      	b.n	8057a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80536:	f000 011f 	and.w	r1, r0, #31
   8053a:	2601      	movs	r6, #1
   8053c:	462a      	mov	r2, r5
   8053e:	fa06 f101 	lsl.w	r1, r6, r1
   80542:	4620      	mov	r0, r4
   80544:	4b0f      	ldr	r3, [pc, #60]	; (80584 <pio_configure_pin+0xcc>)
   80546:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80548:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8054a:	e016      	b.n	8057a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8054c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
   80550:	f000 011f 	and.w	r1, r0, #31
   80554:	2601      	movs	r6, #1
   80556:	ea05 0306 	and.w	r3, r5, r6
   8055a:	9300      	str	r3, [sp, #0]
   8055c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80560:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80564:	bf14      	ite	ne
   80566:	2200      	movne	r2, #0
   80568:	2201      	moveq	r2, #1
   8056a:	fa06 f101 	lsl.w	r1, r6, r1
   8056e:	4620      	mov	r0, r4
   80570:	4c05      	ldr	r4, [pc, #20]	; (80588 <pio_configure_pin+0xd0>)
   80572:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80574:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80576:	e000      	b.n	8057a <pio_configure_pin+0xc2>

	default:
		return 0;
   80578:	2000      	movs	r0, #0
	}

	return 1;
}
   8057a:	b002      	add	sp, #8
   8057c:	bd70      	pop	{r4, r5, r6, pc}
   8057e:	bf00      	nop
   80580:	00080415 	.word	0x00080415
   80584:	00080455 	.word	0x00080455
   80588:	00080489 	.word	0x00080489

0008058c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8058c:	b570      	push	{r4, r5, r6, lr}
   8058e:	b082      	sub	sp, #8
   80590:	4605      	mov	r5, r0
   80592:	460e      	mov	r6, r1
   80594:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80596:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8059a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8059e:	d026      	beq.n	805ee <pio_configure_pin_group+0x62>
   805a0:	d806      	bhi.n	805b0 <pio_configure_pin_group+0x24>
   805a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   805a6:	d00a      	beq.n	805be <pio_configure_pin_group+0x32>
   805a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   805ac:	d013      	beq.n	805d6 <pio_configure_pin_group+0x4a>
   805ae:	e034      	b.n	8061a <pio_configure_pin_group+0x8e>
   805b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   805b4:	d01f      	beq.n	805f6 <pio_configure_pin_group+0x6a>
   805b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   805ba:	d01c      	beq.n	805f6 <pio_configure_pin_group+0x6a>
   805bc:	e02d      	b.n	8061a <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   805be:	460a      	mov	r2, r1
   805c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805c4:	4b16      	ldr	r3, [pc, #88]	; (80620 <pio_configure_pin_group+0x94>)
   805c6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805c8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   805cc:	bf14      	ite	ne
   805ce:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805d0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805d2:	2001      	movs	r0, #1
   805d4:	e022      	b.n	8061c <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   805d6:	460a      	mov	r2, r1
   805d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   805dc:	4b10      	ldr	r3, [pc, #64]	; (80620 <pio_configure_pin_group+0x94>)
   805de:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   805e0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   805e4:	bf14      	ite	ne
   805e6:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   805e8:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   805ea:	2001      	movs	r0, #1
   805ec:	e016      	b.n	8061c <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   805ee:	4b0d      	ldr	r3, [pc, #52]	; (80624 <pio_configure_pin_group+0x98>)
   805f0:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   805f2:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   805f4:	e012      	b.n	8061c <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   805f6:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
   805fa:	f004 0301 	and.w	r3, r4, #1
   805fe:	9300      	str	r3, [sp, #0]
   80600:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80604:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80608:	bf14      	ite	ne
   8060a:	2200      	movne	r2, #0
   8060c:	2201      	moveq	r2, #1
   8060e:	4631      	mov	r1, r6
   80610:	4628      	mov	r0, r5
   80612:	4c05      	ldr	r4, [pc, #20]	; (80628 <pio_configure_pin_group+0x9c>)
   80614:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80616:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80618:	e000      	b.n	8061c <pio_configure_pin_group+0x90>

	default:
		return 0;
   8061a:	2000      	movs	r0, #0
	}

	return 1;
}
   8061c:	b002      	add	sp, #8
   8061e:	bd70      	pop	{r4, r5, r6, pc}
   80620:	00080415 	.word	0x00080415
   80624:	00080455 	.word	0x00080455
   80628:	00080489 	.word	0x00080489

0008062c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80630:	4604      	mov	r4, r0
   80632:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80634:	4b0e      	ldr	r3, [pc, #56]	; (80670 <pio_handler_process+0x44>)
   80636:	4798      	blx	r3
   80638:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8063a:	4620      	mov	r0, r4
   8063c:	4b0d      	ldr	r3, [pc, #52]	; (80674 <pio_handler_process+0x48>)
   8063e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80640:	4005      	ands	r5, r0
   80642:	d013      	beq.n	8066c <pio_handler_process+0x40>
   80644:	4c0c      	ldr	r4, [pc, #48]	; (80678 <pio_handler_process+0x4c>)
   80646:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8064a:	6823      	ldr	r3, [r4, #0]
   8064c:	4543      	cmp	r3, r8
   8064e:	d108      	bne.n	80662 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80650:	6861      	ldr	r1, [r4, #4]
   80652:	4229      	tst	r1, r5
   80654:	d005      	beq.n	80662 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80656:	68e3      	ldr	r3, [r4, #12]
   80658:	4640      	mov	r0, r8
   8065a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8065c:	6863      	ldr	r3, [r4, #4]
   8065e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80662:	42b4      	cmp	r4, r6
   80664:	d002      	beq.n	8066c <pio_handler_process+0x40>
   80666:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80668:	2d00      	cmp	r5, #0
   8066a:	d1ee      	bne.n	8064a <pio_handler_process+0x1e>
   8066c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80670:	000804b1 	.word	0x000804b1
   80674:	000804b5 	.word	0x000804b5
   80678:	200709c4 	.word	0x200709c4

0008067c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8067c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8067e:	210b      	movs	r1, #11
   80680:	4801      	ldr	r0, [pc, #4]	; (80688 <PIOA_Handler+0xc>)
   80682:	4b02      	ldr	r3, [pc, #8]	; (8068c <PIOA_Handler+0x10>)
   80684:	4798      	blx	r3
   80686:	bd08      	pop	{r3, pc}
   80688:	400e0e00 	.word	0x400e0e00
   8068c:	0008062d 	.word	0x0008062d

00080690 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80690:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80692:	210c      	movs	r1, #12
   80694:	4801      	ldr	r0, [pc, #4]	; (8069c <PIOB_Handler+0xc>)
   80696:	4b02      	ldr	r3, [pc, #8]	; (806a0 <PIOB_Handler+0x10>)
   80698:	4798      	blx	r3
   8069a:	bd08      	pop	{r3, pc}
   8069c:	400e1000 	.word	0x400e1000
   806a0:	0008062d 	.word	0x0008062d

000806a4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   806a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   806a6:	210d      	movs	r1, #13
   806a8:	4801      	ldr	r0, [pc, #4]	; (806b0 <PIOC_Handler+0xc>)
   806aa:	4b02      	ldr	r3, [pc, #8]	; (806b4 <PIOC_Handler+0x10>)
   806ac:	4798      	blx	r3
   806ae:	bd08      	pop	{r3, pc}
   806b0:	400e1200 	.word	0x400e1200
   806b4:	0008062d 	.word	0x0008062d

000806b8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   806b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   806ba:	210e      	movs	r1, #14
   806bc:	4801      	ldr	r0, [pc, #4]	; (806c4 <PIOD_Handler+0xc>)
   806be:	4b02      	ldr	r3, [pc, #8]	; (806c8 <PIOD_Handler+0x10>)
   806c0:	4798      	blx	r3
   806c2:	bd08      	pop	{r3, pc}
   806c4:	400e1400 	.word	0x400e1400
   806c8:	0008062d 	.word	0x0008062d

000806cc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   806cc:	4a18      	ldr	r2, [pc, #96]	; (80730 <pmc_switch_mck_to_pllack+0x64>)
   806ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   806d4:	4318      	orrs	r0, r3
   806d6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806da:	f013 0f08 	tst.w	r3, #8
   806de:	d003      	beq.n	806e8 <pmc_switch_mck_to_pllack+0x1c>
   806e0:	e009      	b.n	806f6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   806e2:	3b01      	subs	r3, #1
   806e4:	d103      	bne.n	806ee <pmc_switch_mck_to_pllack+0x22>
   806e6:	e01e      	b.n	80726 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806ec:	4910      	ldr	r1, [pc, #64]	; (80730 <pmc_switch_mck_to_pllack+0x64>)
   806ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806f0:	f012 0f08 	tst.w	r2, #8
   806f4:	d0f5      	beq.n	806e2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   806f6:	4a0e      	ldr	r2, [pc, #56]	; (80730 <pmc_switch_mck_to_pllack+0x64>)
   806f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806fa:	f023 0303 	bic.w	r3, r3, #3
   806fe:	f043 0302 	orr.w	r3, r3, #2
   80702:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80704:	6e90      	ldr	r0, [r2, #104]	; 0x68
   80706:	f010 0008 	ands.w	r0, r0, #8
   8070a:	d004      	beq.n	80716 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8070c:	2000      	movs	r0, #0
   8070e:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   80710:	3b01      	subs	r3, #1
   80712:	d103      	bne.n	8071c <pmc_switch_mck_to_pllack+0x50>
   80714:	e009      	b.n	8072a <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80716:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8071a:	4905      	ldr	r1, [pc, #20]	; (80730 <pmc_switch_mck_to_pllack+0x64>)
   8071c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8071e:	f012 0f08 	tst.w	r2, #8
   80722:	d0f5      	beq.n	80710 <pmc_switch_mck_to_pllack+0x44>
   80724:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80726:	2001      	movs	r0, #1
   80728:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8072a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8072c:	4770      	bx	lr
   8072e:	bf00      	nop
   80730:	400e0600 	.word	0x400e0600

00080734 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80734:	b138      	cbz	r0, 80746 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80736:	4911      	ldr	r1, [pc, #68]	; (8077c <pmc_switch_mainck_to_xtal+0x48>)
   80738:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8073a:	4a11      	ldr	r2, [pc, #68]	; (80780 <pmc_switch_mainck_to_xtal+0x4c>)
   8073c:	401a      	ands	r2, r3
   8073e:	4b11      	ldr	r3, [pc, #68]	; (80784 <pmc_switch_mainck_to_xtal+0x50>)
   80740:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80742:	620b      	str	r3, [r1, #32]
   80744:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80746:	480d      	ldr	r0, [pc, #52]	; (8077c <pmc_switch_mainck_to_xtal+0x48>)
   80748:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8074a:	0209      	lsls	r1, r1, #8
   8074c:	b289      	uxth	r1, r1
   8074e:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
   80752:	f023 0303 	bic.w	r3, r3, #3
   80756:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8075a:	f043 0301 	orr.w	r3, r3, #1
   8075e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80760:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80762:	4602      	mov	r2, r0
   80764:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80766:	f013 0f01 	tst.w	r3, #1
   8076a:	d0fb      	beq.n	80764 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8076c:	4a03      	ldr	r2, [pc, #12]	; (8077c <pmc_switch_mainck_to_xtal+0x48>)
   8076e:	6a13      	ldr	r3, [r2, #32]
   80770:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80778:	6213      	str	r3, [r2, #32]
   8077a:	4770      	bx	lr
   8077c:	400e0600 	.word	0x400e0600
   80780:	fec8fffc 	.word	0xfec8fffc
   80784:	01370002 	.word	0x01370002

00080788 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80788:	4b02      	ldr	r3, [pc, #8]	; (80794 <pmc_osc_is_ready_mainck+0xc>)
   8078a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8078c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80790:	4770      	bx	lr
   80792:	bf00      	nop
   80794:	400e0600 	.word	0x400e0600

00080798 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80798:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8079c:	4b01      	ldr	r3, [pc, #4]	; (807a4 <pmc_disable_pllack+0xc>)
   8079e:	629a      	str	r2, [r3, #40]	; 0x28
   807a0:	4770      	bx	lr
   807a2:	bf00      	nop
   807a4:	400e0600 	.word	0x400e0600

000807a8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   807a8:	4b02      	ldr	r3, [pc, #8]	; (807b4 <pmc_is_locked_pllack+0xc>)
   807aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   807ac:	f000 0002 	and.w	r0, r0, #2
   807b0:	4770      	bx	lr
   807b2:	bf00      	nop
   807b4:	400e0600 	.word	0x400e0600

000807b8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   807b8:	282c      	cmp	r0, #44	; 0x2c
   807ba:	d81e      	bhi.n	807fa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   807bc:	281f      	cmp	r0, #31
   807be:	d80c      	bhi.n	807da <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   807c0:	4b11      	ldr	r3, [pc, #68]	; (80808 <pmc_enable_periph_clk+0x50>)
   807c2:	699a      	ldr	r2, [r3, #24]
   807c4:	2301      	movs	r3, #1
   807c6:	4083      	lsls	r3, r0
   807c8:	4393      	bics	r3, r2
   807ca:	d018      	beq.n	807fe <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   807cc:	2301      	movs	r3, #1
   807ce:	fa03 f000 	lsl.w	r0, r3, r0
   807d2:	4b0d      	ldr	r3, [pc, #52]	; (80808 <pmc_enable_periph_clk+0x50>)
   807d4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807d6:	2000      	movs	r0, #0
   807d8:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   807da:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807dc:	4b0a      	ldr	r3, [pc, #40]	; (80808 <pmc_enable_periph_clk+0x50>)
   807de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   807e2:	2301      	movs	r3, #1
   807e4:	4083      	lsls	r3, r0
   807e6:	4393      	bics	r3, r2
   807e8:	d00b      	beq.n	80802 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   807ea:	2301      	movs	r3, #1
   807ec:	fa03 f000 	lsl.w	r0, r3, r0
   807f0:	4b05      	ldr	r3, [pc, #20]	; (80808 <pmc_enable_periph_clk+0x50>)
   807f2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   807f6:	2000      	movs	r0, #0
   807f8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   807fa:	2001      	movs	r0, #1
   807fc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807fe:	2000      	movs	r0, #0
   80800:	4770      	bx	lr
   80802:	2000      	movs	r0, #0
}
   80804:	4770      	bx	lr
   80806:	bf00      	nop
   80808:	400e0600 	.word	0x400e0600

0008080c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8080c:	6943      	ldr	r3, [r0, #20]
   8080e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80812:	bf1d      	ittte	ne
   80814:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80818:	61c1      	strne	r1, [r0, #28]
	return 0;
   8081a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8081c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8081e:	4770      	bx	lr

00080820 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80820:	6943      	ldr	r3, [r0, #20]
   80822:	f013 0f01 	tst.w	r3, #1
   80826:	d005      	beq.n	80834 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80828:	6983      	ldr	r3, [r0, #24]
   8082a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8082e:	600b      	str	r3, [r1, #0]

	return 0;
   80830:	2000      	movs	r0, #0
   80832:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80834:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80836:	4770      	bx	lr

00080838 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80838:	e7fe      	b.n	80838 <Dummy_Handler>
   8083a:	bf00      	nop

0008083c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8083c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8083e:	4b1e      	ldr	r3, [pc, #120]	; (808b8 <Reset_Handler+0x7c>)
   80840:	4a1e      	ldr	r2, [pc, #120]	; (808bc <Reset_Handler+0x80>)
   80842:	429a      	cmp	r2, r3
   80844:	d003      	beq.n	8084e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80846:	4b1e      	ldr	r3, [pc, #120]	; (808c0 <Reset_Handler+0x84>)
   80848:	4a1b      	ldr	r2, [pc, #108]	; (808b8 <Reset_Handler+0x7c>)
   8084a:	429a      	cmp	r2, r3
   8084c:	d304      	bcc.n	80858 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8084e:	4b1d      	ldr	r3, [pc, #116]	; (808c4 <Reset_Handler+0x88>)
   80850:	4a1d      	ldr	r2, [pc, #116]	; (808c8 <Reset_Handler+0x8c>)
   80852:	429a      	cmp	r2, r3
   80854:	d30f      	bcc.n	80876 <Reset_Handler+0x3a>
   80856:	e01a      	b.n	8088e <Reset_Handler+0x52>
   80858:	4917      	ldr	r1, [pc, #92]	; (808b8 <Reset_Handler+0x7c>)
   8085a:	4b1c      	ldr	r3, [pc, #112]	; (808cc <Reset_Handler+0x90>)
   8085c:	1a5b      	subs	r3, r3, r1
   8085e:	f023 0303 	bic.w	r3, r3, #3
   80862:	3304      	adds	r3, #4
   80864:	4a15      	ldr	r2, [pc, #84]	; (808bc <Reset_Handler+0x80>)
   80866:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   80868:	f852 0b04 	ldr.w	r0, [r2], #4
   8086c:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80870:	429a      	cmp	r2, r3
   80872:	d1f9      	bne.n	80868 <Reset_Handler+0x2c>
   80874:	e7eb      	b.n	8084e <Reset_Handler+0x12>
   80876:	4b16      	ldr	r3, [pc, #88]	; (808d0 <Reset_Handler+0x94>)
   80878:	4a16      	ldr	r2, [pc, #88]	; (808d4 <Reset_Handler+0x98>)
   8087a:	1ad2      	subs	r2, r2, r3
   8087c:	f022 0203 	bic.w	r2, r2, #3
   80880:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80882:	3b04      	subs	r3, #4
		*pDest++ = 0;
   80884:	2100      	movs	r1, #0
   80886:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8088a:	4293      	cmp	r3, r2
   8088c:	d1fb      	bne.n	80886 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8088e:	4b12      	ldr	r3, [pc, #72]	; (808d8 <Reset_Handler+0x9c>)
   80890:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80894:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80898:	4910      	ldr	r1, [pc, #64]	; (808dc <Reset_Handler+0xa0>)
   8089a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8089c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   808a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   808a4:	d203      	bcs.n	808ae <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   808a6:	688b      	ldr	r3, [r1, #8]
   808a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   808ac:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   808ae:	4b0c      	ldr	r3, [pc, #48]	; (808e0 <Reset_Handler+0xa4>)
   808b0:	4798      	blx	r3

	/* Branch to main function */
	main();
   808b2:	4b0c      	ldr	r3, [pc, #48]	; (808e4 <Reset_Handler+0xa8>)
   808b4:	4798      	blx	r3
   808b6:	e7fe      	b.n	808b6 <Reset_Handler+0x7a>
   808b8:	20070000 	.word	0x20070000
   808bc:	0008623c 	.word	0x0008623c
   808c0:	200709a4 	.word	0x200709a4
   808c4:	20078c94 	.word	0x20078c94
   808c8:	200709a8 	.word	0x200709a8
   808cc:	200709a3 	.word	0x200709a3
   808d0:	200709ac 	.word	0x200709ac
   808d4:	20078c97 	.word	0x20078c97
   808d8:	00080000 	.word	0x00080000
   808dc:	e000ed00 	.word	0xe000ed00
   808e0:	00083149 	.word	0x00083149
   808e4:	00082889 	.word	0x00082889

000808e8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   808e8:	4b3e      	ldr	r3, [pc, #248]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   808ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808ec:	f003 0303 	and.w	r3, r3, #3
   808f0:	2b03      	cmp	r3, #3
   808f2:	d85f      	bhi.n	809b4 <SystemCoreClockUpdate+0xcc>
   808f4:	e8df f003 	tbb	[pc, r3]
   808f8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   808fc:	4b3a      	ldr	r3, [pc, #232]	; (809e8 <SystemCoreClockUpdate+0x100>)
   808fe:	695b      	ldr	r3, [r3, #20]
   80900:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80904:	bf14      	ite	ne
   80906:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8090a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8090e:	4b37      	ldr	r3, [pc, #220]	; (809ec <SystemCoreClockUpdate+0x104>)
   80910:	601a      	str	r2, [r3, #0]
   80912:	e04f      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80914:	4b33      	ldr	r3, [pc, #204]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   80916:	6a1b      	ldr	r3, [r3, #32]
   80918:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8091c:	d003      	beq.n	80926 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8091e:	4a34      	ldr	r2, [pc, #208]	; (809f0 <SystemCoreClockUpdate+0x108>)
   80920:	4b32      	ldr	r3, [pc, #200]	; (809ec <SystemCoreClockUpdate+0x104>)
   80922:	601a      	str	r2, [r3, #0]
   80924:	e046      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80926:	4a33      	ldr	r2, [pc, #204]	; (809f4 <SystemCoreClockUpdate+0x10c>)
   80928:	4b30      	ldr	r3, [pc, #192]	; (809ec <SystemCoreClockUpdate+0x104>)
   8092a:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8092c:	4b2d      	ldr	r3, [pc, #180]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   8092e:	6a1b      	ldr	r3, [r3, #32]
   80930:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80934:	2b10      	cmp	r3, #16
   80936:	d002      	beq.n	8093e <SystemCoreClockUpdate+0x56>
   80938:	2b20      	cmp	r3, #32
   8093a:	d004      	beq.n	80946 <SystemCoreClockUpdate+0x5e>
   8093c:	e03a      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8093e:	4a2e      	ldr	r2, [pc, #184]	; (809f8 <SystemCoreClockUpdate+0x110>)
   80940:	4b2a      	ldr	r3, [pc, #168]	; (809ec <SystemCoreClockUpdate+0x104>)
   80942:	601a      	str	r2, [r3, #0]
				break;
   80944:	e036      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80946:	4a2a      	ldr	r2, [pc, #168]	; (809f0 <SystemCoreClockUpdate+0x108>)
   80948:	4b28      	ldr	r3, [pc, #160]	; (809ec <SystemCoreClockUpdate+0x104>)
   8094a:	601a      	str	r2, [r3, #0]
				break;
   8094c:	e032      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8094e:	4b25      	ldr	r3, [pc, #148]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   80950:	6a1b      	ldr	r3, [r3, #32]
   80952:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80956:	d003      	beq.n	80960 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80958:	4a25      	ldr	r2, [pc, #148]	; (809f0 <SystemCoreClockUpdate+0x108>)
   8095a:	4b24      	ldr	r3, [pc, #144]	; (809ec <SystemCoreClockUpdate+0x104>)
   8095c:	601a      	str	r2, [r3, #0]
   8095e:	e012      	b.n	80986 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80960:	4a24      	ldr	r2, [pc, #144]	; (809f4 <SystemCoreClockUpdate+0x10c>)
   80962:	4b22      	ldr	r3, [pc, #136]	; (809ec <SystemCoreClockUpdate+0x104>)
   80964:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80966:	4b1f      	ldr	r3, [pc, #124]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   80968:	6a1b      	ldr	r3, [r3, #32]
   8096a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8096e:	2b10      	cmp	r3, #16
   80970:	d002      	beq.n	80978 <SystemCoreClockUpdate+0x90>
   80972:	2b20      	cmp	r3, #32
   80974:	d004      	beq.n	80980 <SystemCoreClockUpdate+0x98>
   80976:	e006      	b.n	80986 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80978:	4a1f      	ldr	r2, [pc, #124]	; (809f8 <SystemCoreClockUpdate+0x110>)
   8097a:	4b1c      	ldr	r3, [pc, #112]	; (809ec <SystemCoreClockUpdate+0x104>)
   8097c:	601a      	str	r2, [r3, #0]
				break;
   8097e:	e002      	b.n	80986 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80980:	4a1b      	ldr	r2, [pc, #108]	; (809f0 <SystemCoreClockUpdate+0x108>)
   80982:	4b1a      	ldr	r3, [pc, #104]	; (809ec <SystemCoreClockUpdate+0x104>)
   80984:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80986:	4b17      	ldr	r3, [pc, #92]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   80988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8098a:	f003 0303 	and.w	r3, r3, #3
   8098e:	2b02      	cmp	r3, #2
   80990:	d10d      	bne.n	809ae <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80992:	4a14      	ldr	r2, [pc, #80]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   80994:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80996:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80998:	4814      	ldr	r0, [pc, #80]	; (809ec <SystemCoreClockUpdate+0x104>)
   8099a:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8099e:	6803      	ldr	r3, [r0, #0]
   809a0:	fb01 3303 	mla	r3, r1, r3, r3
   809a4:	b2d2      	uxtb	r2, r2
   809a6:	fbb3 f3f2 	udiv	r3, r3, r2
   809aa:	6003      	str	r3, [r0, #0]
   809ac:	e002      	b.n	809b4 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   809ae:	4a13      	ldr	r2, [pc, #76]	; (809fc <SystemCoreClockUpdate+0x114>)
   809b0:	4b0e      	ldr	r3, [pc, #56]	; (809ec <SystemCoreClockUpdate+0x104>)
   809b2:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   809b4:	4b0b      	ldr	r3, [pc, #44]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   809b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   809bc:	2b70      	cmp	r3, #112	; 0x70
   809be:	d107      	bne.n	809d0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   809c0:	4a0a      	ldr	r2, [pc, #40]	; (809ec <SystemCoreClockUpdate+0x104>)
   809c2:	6813      	ldr	r3, [r2, #0]
   809c4:	490e      	ldr	r1, [pc, #56]	; (80a00 <SystemCoreClockUpdate+0x118>)
   809c6:	fba1 1303 	umull	r1, r3, r1, r3
   809ca:	085b      	lsrs	r3, r3, #1
   809cc:	6013      	str	r3, [r2, #0]
   809ce:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   809d0:	4b04      	ldr	r3, [pc, #16]	; (809e4 <SystemCoreClockUpdate+0xfc>)
   809d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   809d4:	4905      	ldr	r1, [pc, #20]	; (809ec <SystemCoreClockUpdate+0x104>)
   809d6:	f3c3 1202 	ubfx	r2, r3, #4, #3
   809da:	680b      	ldr	r3, [r1, #0]
   809dc:	40d3      	lsrs	r3, r2
   809de:	600b      	str	r3, [r1, #0]
   809e0:	4770      	bx	lr
   809e2:	bf00      	nop
   809e4:	400e0600 	.word	0x400e0600
   809e8:	400e1a10 	.word	0x400e1a10
   809ec:	2007012c 	.word	0x2007012c
   809f0:	00b71b00 	.word	0x00b71b00
   809f4:	003d0900 	.word	0x003d0900
   809f8:	007a1200 	.word	0x007a1200
   809fc:	0e4e1c00 	.word	0x0e4e1c00
   80a00:	aaaaaaab 	.word	0xaaaaaaab

00080a04 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80a04:	4b09      	ldr	r3, [pc, #36]	; (80a2c <_sbrk+0x28>)
   80a06:	681b      	ldr	r3, [r3, #0]
   80a08:	b913      	cbnz	r3, 80a10 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80a0a:	4a09      	ldr	r2, [pc, #36]	; (80a30 <_sbrk+0x2c>)
   80a0c:	4b07      	ldr	r3, [pc, #28]	; (80a2c <_sbrk+0x28>)
   80a0e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80a10:	4b06      	ldr	r3, [pc, #24]	; (80a2c <_sbrk+0x28>)
   80a12:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80a14:	181a      	adds	r2, r3, r0
   80a16:	4907      	ldr	r1, [pc, #28]	; (80a34 <_sbrk+0x30>)
   80a18:	4291      	cmp	r1, r2
   80a1a:	db04      	blt.n	80a26 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80a1c:	4610      	mov	r0, r2
   80a1e:	4a03      	ldr	r2, [pc, #12]	; (80a2c <_sbrk+0x28>)
   80a20:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80a22:	4618      	mov	r0, r3
   80a24:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80a26:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80a2a:	4770      	bx	lr
   80a2c:	20070a34 	.word	0x20070a34
   80a30:	2007ac98 	.word	0x2007ac98
   80a34:	20087ffc 	.word	0x20087ffc

00080a38 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80a38:	f04f 30ff 	mov.w	r0, #4294967295
   80a3c:	4770      	bx	lr
   80a3e:	bf00      	nop

00080a40 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80a44:	604b      	str	r3, [r1, #4]

	return 0;
}
   80a46:	2000      	movs	r0, #0
   80a48:	4770      	bx	lr
   80a4a:	bf00      	nop

00080a4c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80a4c:	2001      	movs	r0, #1
   80a4e:	4770      	bx	lr

00080a50 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80a50:	2000      	movs	r0, #0
   80a52:	4770      	bx	lr

00080a54 <setup_pwm>:
		duty_cycle_pwm(value_out);
	}
}

void setup_pwm()
{
   80a54:	b530      	push	{r4, r5, lr}
   80a56:	b085      	sub	sp, #20
	pmc_enable_periph_clk(ID_PWM);
   80a58:	2024      	movs	r0, #36	; 0x24
   80a5a:	4b12      	ldr	r3, [pc, #72]	; (80aa4 <setup_pwm+0x50>)
   80a5c:	4798      	blx	r3
	pwm_channel_disable(PWM, PWM_CHANNEL_6); // change channel
   80a5e:	4c12      	ldr	r4, [pc, #72]	; (80aa8 <setup_pwm+0x54>)
   80a60:	2106      	movs	r1, #6
   80a62:	4620      	mov	r0, r4
   80a64:	4b11      	ldr	r3, [pc, #68]	; (80aac <setup_pwm+0x58>)
   80a66:	4798      	blx	r3
	pwm_clock_t pwm_clock ={
   80a68:	4b11      	ldr	r3, [pc, #68]	; (80ab0 <setup_pwm+0x5c>)
   80a6a:	9301      	str	r3, [sp, #4]
   80a6c:	2500      	movs	r5, #0
   80a6e:	9502      	str	r5, [sp, #8]
   80a70:	4b10      	ldr	r3, [pc, #64]	; (80ab4 <setup_pwm+0x60>)
   80a72:	9303      	str	r3, [sp, #12]
		.ul_clka = 100000*100,
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &pwm_clock);
   80a74:	a901      	add	r1, sp, #4
   80a76:	4620      	mov	r0, r4
   80a78:	4b0f      	ldr	r3, [pc, #60]	; (80ab8 <setup_pwm+0x64>)
   80a7a:	4798      	blx	r3

	pwm_channel.alignment = PWM_ALIGN_LEFT;
   80a7c:	490f      	ldr	r1, [pc, #60]	; (80abc <setup_pwm+0x68>)
   80a7e:	810d      	strh	r5, [r1, #8]
	pwm_channel.polarity = PWM_LOW;
   80a80:	728d      	strb	r5, [r1, #10]
	pwm_channel.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80a82:	230b      	movs	r3, #11
   80a84:	604b      	str	r3, [r1, #4]
	pwm_channel.ul_duty = 0;
   80a86:	60cd      	str	r5, [r1, #12]
	pwm_channel.ul_period = 999;
   80a88:	f240 33e7 	movw	r3, #999	; 0x3e7
   80a8c:	610b      	str	r3, [r1, #16]
	pwm_channel.channel = PWM_CHANNEL_6;
   80a8e:	2506      	movs	r5, #6
   80a90:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM, &pwm_channel);
   80a92:	4620      	mov	r0, r4
   80a94:	4b0a      	ldr	r3, [pc, #40]	; (80ac0 <setup_pwm+0x6c>)
   80a96:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_6);
   80a98:	4629      	mov	r1, r5
   80a9a:	4620      	mov	r0, r4
   80a9c:	4b09      	ldr	r3, [pc, #36]	; (80ac4 <setup_pwm+0x70>)
   80a9e:	4798      	blx	r3
}
   80aa0:	b005      	add	sp, #20
   80aa2:	bd30      	pop	{r4, r5, pc}
   80aa4:	000807b9 	.word	0x000807b9
   80aa8:	40094000 	.word	0x40094000
   80aac:	00082819 	.word	0x00082819
   80ab0:	00989680 	.word	0x00989680
   80ab4:	0501bd00 	.word	0x0501bd00
   80ab8:	0008269d 	.word	0x0008269d
   80abc:	20078c5c 	.word	0x20078c5c
   80ac0:	000826e9 	.word	0x000826e9
   80ac4:	0008280d 	.word	0x0008280d

00080ac8 <duty_cycle_pwm>:

void duty_cycle_pwm(int value){
   80ac8:	b508      	push	{r3, lr}
	pwm_channel_update_duty(PWM, &pwm_channel, value);
   80aca:	4602      	mov	r2, r0
   80acc:	4902      	ldr	r1, [pc, #8]	; (80ad8 <duty_cycle_pwm+0x10>)
   80ace:	4803      	ldr	r0, [pc, #12]	; (80adc <duty_cycle_pwm+0x14>)
   80ad0:	4b03      	ldr	r3, [pc, #12]	; (80ae0 <duty_cycle_pwm+0x18>)
   80ad2:	4798      	blx	r3
   80ad4:	bd08      	pop	{r3, pc}
   80ad6:	bf00      	nop
   80ad8:	20078c5c 	.word	0x20078c5c
   80adc:	40094000 	.word	0x40094000
   80ae0:	000827f1 	.word	0x000827f1

00080ae4 <task_pid>:
#include "inttypes.h"
#include "my_adc.h"
#include "UARTSet.h"

void task_pid (void *pvParameters)
{
   80ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ae8:	b082      	sub	sp, #8
	duty_cycle_pwm(0);	
   80aea:	2000      	movs	r0, #0
   80aec:	4b24      	ldr	r3, [pc, #144]	; (80b80 <task_pid+0x9c>)
   80aee:	4798      	blx	r3
	portTickType xLastWakeTime = xTaskGetTickCount();
   80af0:	4b24      	ldr	r3, [pc, #144]	; (80b84 <task_pid+0xa0>)
   80af2:	4798      	blx	r3
   80af4:	f8ad 0006 	strh.w	r0, [sp, #6]
	const portTickType xFrequency =  d_time_ms; // 50ms
	vTaskDelay(3000); // Wait for MATLAB
   80af8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80afc:	4b22      	ldr	r3, [pc, #136]	; (80b88 <task_pid+0xa4>)
   80afe:	4798      	blx	r3
	printf("%i\n\r", 9);
   80b00:	2109      	movs	r1, #9
   80b02:	4822      	ldr	r0, [pc, #136]	; (80b8c <task_pid+0xa8>)
   80b04:	4b22      	ldr	r3, [pc, #136]	; (80b90 <task_pid+0xac>)
   80b06:	4798      	blx	r3

//infinite loop
	for(;;){
		// Pausa 50ms
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	//
   80b08:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80bb8 <task_pid+0xd4>
				D_Output = (double)d_value*(error - last_error)/(d_time_ms/1000);
				last_error = error;

				 
		//to apprehend pwm
		value_out = value_out+value_pwm;
   80b0c:	4d21      	ldr	r5, [pc, #132]	; (80b94 <task_pid+0xb0>)
	printf("%i\n\r", 9);

//infinite loop
	for(;;){
		// Pausa 50ms
		vTaskDelayUntil(&xLastWakeTime,xFrequency);	//
   80b0e:	2132      	movs	r1, #50	; 0x32
   80b10:	f10d 0006 	add.w	r0, sp, #6
   80b14:	47d0      	blx	sl
// 		error=2;
// 		value_out=3;
 		//bor_varde=30;
		
		
 		distance_sensor = sensor_read_adc();
   80b16:	4b20      	ldr	r3, [pc, #128]	; (80b98 <task_pid+0xb4>)
   80b18:	4798      	blx	r3
   80b1a:	4b20      	ldr	r3, [pc, #128]	; (80b9c <task_pid+0xb8>)
   80b1c:	8018      	strh	r0, [r3, #0]
		// Kp
		error = -1*(bor_varde - distance_sensor);
   80b1e:	4b20      	ldr	r3, [pc, #128]	; (80ba0 <task_pid+0xbc>)
   80b20:	881c      	ldrh	r4, [r3, #0]
   80b22:	1b00      	subs	r0, r0, r4
   80b24:	b204      	sxth	r4, r0
   80b26:	4b1f      	ldr	r3, [pc, #124]	; (80ba4 <task_pid+0xc0>)
   80b28:	801c      	strh	r4, [r3, #0]
// 								D_Output = (float)(error-last_error);
// 								last_error = error;
								
		
		// Ki
		sum_of_error = (double)sum_of_error + error*(d_time_ms/1000); // till sekunder
   80b2a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80bbc <task_pid+0xd8>
   80b2e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80bc0 <task_pid+0xdc>
   80b32:	f9b9 0000 	ldrsh.w	r0, [r9]
   80b36:	47c0      	blx	r8
   80b38:	4f1b      	ldr	r7, [pc, #108]	; (80ba8 <task_pid+0xc4>)
   80b3a:	2200      	movs	r2, #0
   80b3c:	2300      	movs	r3, #0
   80b3e:	47b8      	blx	r7
   80b40:	4e1a      	ldr	r6, [pc, #104]	; (80bac <task_pid+0xc8>)
   80b42:	47b0      	blx	r6
   80b44:	f8a9 0000 	strh.w	r0, [r9]
				double I_Output;
			I_Output = (double)i_value*sum_of_error;
				// Kd
				double D_Output;
				D_Output = (double)d_value*(error - last_error)/(d_time_ms/1000);
				last_error = error;
   80b48:	4b19      	ldr	r3, [pc, #100]	; (80bb0 <task_pid+0xcc>)
   80b4a:	801c      	strh	r4, [r3, #0]

				 
		//to apprehend pwm
		value_out = value_out+value_pwm;
   80b4c:	f9b5 0000 	ldrsh.w	r0, [r5]
   80b50:	47c0      	blx	r8
   80b52:	4b18      	ldr	r3, [pc, #96]	; (80bb4 <task_pid+0xd0>)
   80b54:	e9d3 2300 	ldrd	r2, r3, [r3]
   80b58:	47b8      	blx	r7
   80b5a:	47b0      	blx	r6
   80b5c:	b200      	sxth	r0, r0
		if (value_out < min_pid_pwm)
   80b5e:	2800      	cmp	r0, #0
   80b60:	da02      	bge.n	80b68 <task_pid+0x84>
			value_out = min_pid_pwm;
   80b62:	2300      	movs	r3, #0
   80b64:	802b      	strh	r3, [r5, #0]
   80b66:	e006      	b.n	80b76 <task_pid+0x92>
		else if (value_out > max_pid_pwm)
   80b68:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
				D_Output = (double)d_value*(error - last_error)/(d_time_ms/1000);
				last_error = error;

				 
		//to apprehend pwm
		value_out = value_out+value_pwm;
   80b6c:	bfb2      	itee	lt
   80b6e:	8028      	strhlt	r0, [r5, #0]
		if (value_out < min_pid_pwm)
			value_out = min_pid_pwm;
		else if (value_out > max_pid_pwm)
			value_out = max_pid_pwm;
   80b70:	f240 33e7 	movwge	r3, #999	; 0x3e7
   80b74:	802b      	strhge	r3, [r5, #0]
		// pid to pwm
		duty_cycle_pwm(value_out);
   80b76:	f9b5 0000 	ldrsh.w	r0, [r5]
   80b7a:	4b01      	ldr	r3, [pc, #4]	; (80b80 <task_pid+0x9c>)
   80b7c:	4798      	blx	r3
	}
   80b7e:	e7c6      	b.n	80b0e <task_pid+0x2a>
   80b80:	00080ac9 	.word	0x00080ac9
   80b84:	00081b2d 	.word	0x00081b2d
   80b88:	00081e15 	.word	0x00081e15
   80b8c:	000860e0 	.word	0x000860e0
   80b90:	00083199 	.word	0x00083199
   80b94:	20070a78 	.word	0x20070a78
   80b98:	000801b5 	.word	0x000801b5
   80b9c:	20070a6a 	.word	0x20070a6a
   80ba0:	20070a48 	.word	0x20070a48
   80ba4:	20070a58 	.word	0x20070a58
   80ba8:	00082971 	.word	0x00082971
   80bac:	000830f9 	.word	0x000830f9
   80bb0:	20070a5c 	.word	0x20070a5c
   80bb4:	20070a70 	.word	0x20070a70
   80bb8:	00081d7d 	.word	0x00081d7d
   80bbc:	20070a5a 	.word	0x20070a5a
   80bc0:	00082c09 	.word	0x00082c09

00080bc4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   80bc6:	b083      	sub	sp, #12
   80bc8:	4604      	mov	r4, r0
   80bca:	460d      	mov	r5, r1
	uint32_t val = 0;
   80bcc:	2300      	movs	r3, #0
   80bce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80bd0:	4b1f      	ldr	r3, [pc, #124]	; (80c50 <usart_serial_getchar+0x8c>)
   80bd2:	4298      	cmp	r0, r3
   80bd4:	d107      	bne.n	80be6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80bd6:	461f      	mov	r7, r3
   80bd8:	4e1e      	ldr	r6, [pc, #120]	; (80c54 <usart_serial_getchar+0x90>)
   80bda:	4629      	mov	r1, r5
   80bdc:	4638      	mov	r0, r7
   80bde:	47b0      	blx	r6
   80be0:	2800      	cmp	r0, #0
   80be2:	d1fa      	bne.n	80bda <usart_serial_getchar+0x16>
   80be4:	e019      	b.n	80c1a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80be6:	4b1c      	ldr	r3, [pc, #112]	; (80c58 <usart_serial_getchar+0x94>)
   80be8:	4298      	cmp	r0, r3
   80bea:	d109      	bne.n	80c00 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80bec:	461f      	mov	r7, r3
   80bee:	4e1b      	ldr	r6, [pc, #108]	; (80c5c <usart_serial_getchar+0x98>)
   80bf0:	a901      	add	r1, sp, #4
   80bf2:	4638      	mov	r0, r7
   80bf4:	47b0      	blx	r6
   80bf6:	2800      	cmp	r0, #0
   80bf8:	d1fa      	bne.n	80bf0 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80bfa:	9b01      	ldr	r3, [sp, #4]
   80bfc:	702b      	strb	r3, [r5, #0]
   80bfe:	e019      	b.n	80c34 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c00:	4b17      	ldr	r3, [pc, #92]	; (80c60 <usart_serial_getchar+0x9c>)
   80c02:	4298      	cmp	r0, r3
   80c04:	d109      	bne.n	80c1a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80c06:	461e      	mov	r6, r3
   80c08:	4c14      	ldr	r4, [pc, #80]	; (80c5c <usart_serial_getchar+0x98>)
   80c0a:	a901      	add	r1, sp, #4
   80c0c:	4630      	mov	r0, r6
   80c0e:	47a0      	blx	r4
   80c10:	2800      	cmp	r0, #0
   80c12:	d1fa      	bne.n	80c0a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80c14:	9b01      	ldr	r3, [sp, #4]
   80c16:	702b      	strb	r3, [r5, #0]
   80c18:	e018      	b.n	80c4c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c1a:	4b12      	ldr	r3, [pc, #72]	; (80c64 <usart_serial_getchar+0xa0>)
   80c1c:	429c      	cmp	r4, r3
   80c1e:	d109      	bne.n	80c34 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80c20:	461e      	mov	r6, r3
   80c22:	4c0e      	ldr	r4, [pc, #56]	; (80c5c <usart_serial_getchar+0x98>)
   80c24:	a901      	add	r1, sp, #4
   80c26:	4630      	mov	r0, r6
   80c28:	47a0      	blx	r4
   80c2a:	2800      	cmp	r0, #0
   80c2c:	d1fa      	bne.n	80c24 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80c2e:	9b01      	ldr	r3, [sp, #4]
   80c30:	702b      	strb	r3, [r5, #0]
   80c32:	e00b      	b.n	80c4c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c34:	4b0c      	ldr	r3, [pc, #48]	; (80c68 <usart_serial_getchar+0xa4>)
   80c36:	429c      	cmp	r4, r3
   80c38:	d108      	bne.n	80c4c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80c3a:	461e      	mov	r6, r3
   80c3c:	4c07      	ldr	r4, [pc, #28]	; (80c5c <usart_serial_getchar+0x98>)
   80c3e:	a901      	add	r1, sp, #4
   80c40:	4630      	mov	r0, r6
   80c42:	47a0      	blx	r4
   80c44:	2800      	cmp	r0, #0
   80c46:	d1fa      	bne.n	80c3e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80c48:	9b01      	ldr	r3, [sp, #4]
   80c4a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80c4c:	b003      	add	sp, #12
   80c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c50:	400e0800 	.word	0x400e0800
   80c54:	00082875 	.word	0x00082875
   80c58:	40098000 	.word	0x40098000
   80c5c:	00080821 	.word	0x00080821
   80c60:	4009c000 	.word	0x4009c000
   80c64:	400a0000 	.word	0x400a0000
   80c68:	400a4000 	.word	0x400a4000

00080c6c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80c6c:	b570      	push	{r4, r5, r6, lr}
   80c6e:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c70:	4b1e      	ldr	r3, [pc, #120]	; (80cec <usart_serial_putchar+0x80>)
   80c72:	4298      	cmp	r0, r3
   80c74:	d108      	bne.n	80c88 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
   80c76:	461e      	mov	r6, r3
   80c78:	4d1d      	ldr	r5, [pc, #116]	; (80cf0 <usart_serial_putchar+0x84>)
   80c7a:	4621      	mov	r1, r4
   80c7c:	4630      	mov	r0, r6
   80c7e:	47a8      	blx	r5
   80c80:	2800      	cmp	r0, #0
   80c82:	d1fa      	bne.n	80c7a <usart_serial_putchar+0xe>
		return 1;
   80c84:	2001      	movs	r0, #1
   80c86:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c88:	4b1a      	ldr	r3, [pc, #104]	; (80cf4 <usart_serial_putchar+0x88>)
   80c8a:	4298      	cmp	r0, r3
   80c8c:	d108      	bne.n	80ca0 <usart_serial_putchar+0x34>
		while (usart_write(p_usart, c)!=0);
   80c8e:	461e      	mov	r6, r3
   80c90:	4d19      	ldr	r5, [pc, #100]	; (80cf8 <usart_serial_putchar+0x8c>)
   80c92:	4621      	mov	r1, r4
   80c94:	4630      	mov	r0, r6
   80c96:	47a8      	blx	r5
   80c98:	2800      	cmp	r0, #0
   80c9a:	d1fa      	bne.n	80c92 <usart_serial_putchar+0x26>
		return 1;
   80c9c:	2001      	movs	r0, #1
   80c9e:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80ca0:	4b16      	ldr	r3, [pc, #88]	; (80cfc <usart_serial_putchar+0x90>)
   80ca2:	4298      	cmp	r0, r3
   80ca4:	d108      	bne.n	80cb8 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
   80ca6:	461e      	mov	r6, r3
   80ca8:	4d13      	ldr	r5, [pc, #76]	; (80cf8 <usart_serial_putchar+0x8c>)
   80caa:	4621      	mov	r1, r4
   80cac:	4630      	mov	r0, r6
   80cae:	47a8      	blx	r5
   80cb0:	2800      	cmp	r0, #0
   80cb2:	d1fa      	bne.n	80caa <usart_serial_putchar+0x3e>
		return 1;
   80cb4:	2001      	movs	r0, #1
   80cb6:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80cb8:	4b11      	ldr	r3, [pc, #68]	; (80d00 <usart_serial_putchar+0x94>)
   80cba:	4298      	cmp	r0, r3
   80cbc:	d108      	bne.n	80cd0 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
   80cbe:	461e      	mov	r6, r3
   80cc0:	4d0d      	ldr	r5, [pc, #52]	; (80cf8 <usart_serial_putchar+0x8c>)
   80cc2:	4621      	mov	r1, r4
   80cc4:	4630      	mov	r0, r6
   80cc6:	47a8      	blx	r5
   80cc8:	2800      	cmp	r0, #0
   80cca:	d1fa      	bne.n	80cc2 <usart_serial_putchar+0x56>
		return 1;
   80ccc:	2001      	movs	r0, #1
   80cce:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80cd0:	4b0c      	ldr	r3, [pc, #48]	; (80d04 <usart_serial_putchar+0x98>)
   80cd2:	4298      	cmp	r0, r3
   80cd4:	d108      	bne.n	80ce8 <usart_serial_putchar+0x7c>
		while (usart_write(p_usart, c)!=0);
   80cd6:	461e      	mov	r6, r3
   80cd8:	4d07      	ldr	r5, [pc, #28]	; (80cf8 <usart_serial_putchar+0x8c>)
   80cda:	4621      	mov	r1, r4
   80cdc:	4630      	mov	r0, r6
   80cde:	47a8      	blx	r5
   80ce0:	2800      	cmp	r0, #0
   80ce2:	d1fa      	bne.n	80cda <usart_serial_putchar+0x6e>
		return 1;
   80ce4:	2001      	movs	r0, #1
   80ce6:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80ce8:	2000      	movs	r0, #0
}
   80cea:	bd70      	pop	{r4, r5, r6, pc}
   80cec:	400e0800 	.word	0x400e0800
   80cf0:	00082865 	.word	0x00082865
   80cf4:	40098000 	.word	0x40098000
   80cf8:	0008080d 	.word	0x0008080d
   80cfc:	4009c000 	.word	0x4009c000
   80d00:	400a0000 	.word	0x400a0000
   80d04:	400a4000 	.word	0x400a4000

00080d08 <configure_console>:
			printf("%i\n\r", bor_varde);
	}
}


void configure_console(void){
   80d08:	b530      	push	{r4, r5, lr}
   80d0a:	b085      	sub	sp, #20
   80d0c:	2008      	movs	r0, #8
   80d0e:	4d18      	ldr	r5, [pc, #96]	; (80d70 <configure_console+0x68>)
   80d10:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80d12:	4c18      	ldr	r4, [pc, #96]	; (80d74 <configure_console+0x6c>)
   80d14:	4b18      	ldr	r3, [pc, #96]	; (80d78 <configure_console+0x70>)
   80d16:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80d18:	4a18      	ldr	r2, [pc, #96]	; (80d7c <configure_console+0x74>)
   80d1a:	4b19      	ldr	r3, [pc, #100]	; (80d80 <configure_console+0x78>)
   80d1c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80d1e:	4a19      	ldr	r2, [pc, #100]	; (80d84 <configure_console+0x7c>)
   80d20:	4b19      	ldr	r3, [pc, #100]	; (80d88 <configure_console+0x80>)
   80d22:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80d24:	4b19      	ldr	r3, [pc, #100]	; (80d8c <configure_console+0x84>)
   80d26:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80d28:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80d2c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d32:	9303      	str	r3, [sp, #12]
   80d34:	2008      	movs	r0, #8
   80d36:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80d38:	a901      	add	r1, sp, #4
   80d3a:	4620      	mov	r0, r4
   80d3c:	4b14      	ldr	r3, [pc, #80]	; (80d90 <configure_console+0x88>)
   80d3e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80d40:	4d14      	ldr	r5, [pc, #80]	; (80d94 <configure_console+0x8c>)
   80d42:	682b      	ldr	r3, [r5, #0]
   80d44:	2100      	movs	r1, #0
   80d46:	6898      	ldr	r0, [r3, #8]
   80d48:	4c13      	ldr	r4, [pc, #76]	; (80d98 <configure_console+0x90>)
   80d4a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80d4c:	682b      	ldr	r3, [r5, #0]
   80d4e:	2100      	movs	r1, #0
   80d50:	6858      	ldr	r0, [r3, #4]
   80d52:	47a0      	blx	r4
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
   80d54:	4b11      	ldr	r3, [pc, #68]	; (80d9c <configure_console+0x94>)
   80d56:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d5a:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80d5c:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80d5e:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80d64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80d66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   80d6a:	671a      	str	r2, [r3, #112]	; 0x70
	// Configure console UART.
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	// configure RX0 pin as pull-up otherwise it won't receive anything (only receive 0)
	ioport_set_pin_mode(PIO_PA8_IDX, IOPORT_MODE_PULLUP);
}
   80d6c:	b005      	add	sp, #20
   80d6e:	bd30      	pop	{r4, r5, pc}
   80d70:	000807b9 	.word	0x000807b9
   80d74:	400e0800 	.word	0x400e0800
   80d78:	20078c8c 	.word	0x20078c8c
   80d7c:	00080c6d 	.word	0x00080c6d
   80d80:	20078c88 	.word	0x20078c88
   80d84:	00080bc5 	.word	0x00080bc5
   80d88:	20078c84 	.word	0x20078c84
   80d8c:	0501bd00 	.word	0x0501bd00
   80d90:	00082825 	.word	0x00082825
   80d94:	20070568 	.word	0x20070568
   80d98:	00083349 	.word	0x00083349
   80d9c:	400e0e00 	.word	0x400e0e00

00080da0 <getPIDValues>:

/* Function that receives values from Matlab */
void getPIDValues()
{
   80da0:	b570      	push	{r4, r5, r6, lr}
   80da2:	b082      	sub	sp, #8
	// divier which is used to decode encoded doubles sent from Matlab
	const uint8_t divider = 10;

	uint16_t kP_Gain_temp = 0;
   80da4:	2300      	movs	r3, #0
   80da6:	f8ad 3006 	strh.w	r3, [sp, #6]
	/*uint16_t kP_Gain_temp2 = 0;*/
	uint16_t kI_Gain_temp = 0;
   80daa:	f8ad 3004 	strh.w	r3, [sp, #4]
	uint16_t kD_Gain_temp = 0;
   80dae:	f8ad 3002 	strh.w	r3, [sp, #2]
	
	while (!uart_is_rx_ready (CONF_UART)){
   80db2:	4d46      	ldr	r5, [pc, #280]	; (80ecc <getPIDValues+0x12c>)
   80db4:	4c46      	ldr	r4, [pc, #280]	; (80ed0 <getPIDValues+0x130>)
		vTaskDelay(1);
   80db6:	4e47      	ldr	r6, [pc, #284]	; (80ed4 <getPIDValues+0x134>)
	uint16_t kP_Gain_temp = 0;
	/*uint16_t kP_Gain_temp2 = 0;*/
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	
	while (!uart_is_rx_ready (CONF_UART)){
   80db8:	e001      	b.n	80dbe <getPIDValues+0x1e>
		vTaskDelay(1);
   80dba:	2001      	movs	r0, #1
   80dbc:	47b0      	blx	r6
	uint16_t kP_Gain_temp = 0;
	/*uint16_t kP_Gain_temp2 = 0;*/
	uint16_t kI_Gain_temp = 0;
	uint16_t kD_Gain_temp = 0;
	
	while (!uart_is_rx_ready (CONF_UART)){
   80dbe:	4628      	mov	r0, r5
   80dc0:	47a0      	blx	r4
   80dc2:	2800      	cmp	r0, #0
   80dc4:	d0f9      	beq.n	80dba <getPIDValues+0x1a>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kP_Gain_temp);
   80dc6:	f10d 0106 	add.w	r1, sp, #6
   80dca:	4840      	ldr	r0, [pc, #256]	; (80ecc <getPIDValues+0x12c>)
   80dcc:	4b42      	ldr	r3, [pc, #264]	; (80ed8 <getPIDValues+0x138>)
   80dce:	4798      	blx	r3
	printf("%i\n\r", kP_Gain_temp);
   80dd0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80dd4:	4841      	ldr	r0, [pc, #260]	; (80edc <getPIDValues+0x13c>)
   80dd6:	4b42      	ldr	r3, [pc, #264]	; (80ee0 <getPIDValues+0x140>)
   80dd8:	4798      	blx	r3
	
	while (!uart_is_rx_ready (CONF_UART)){
   80dda:	4d3c      	ldr	r5, [pc, #240]	; (80ecc <getPIDValues+0x12c>)
   80ddc:	4c3c      	ldr	r4, [pc, #240]	; (80ed0 <getPIDValues+0x130>)
		vTaskDelay(1);
   80dde:	4e3d      	ldr	r6, [pc, #244]	; (80ed4 <getPIDValues+0x134>)
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kP_Gain_temp);
	printf("%i\n\r", kP_Gain_temp);
	
	while (!uart_is_rx_ready (CONF_UART)){
   80de0:	e001      	b.n	80de6 <getPIDValues+0x46>
		vTaskDelay(1);
   80de2:	2001      	movs	r0, #1
   80de4:	47b0      	blx	r6
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kP_Gain_temp);
	printf("%i\n\r", kP_Gain_temp);
	
	while (!uart_is_rx_ready (CONF_UART)){
   80de6:	4628      	mov	r0, r5
   80de8:	47a0      	blx	r4
   80dea:	2800      	cmp	r0, #0
   80dec:	d0f9      	beq.n	80de2 <getPIDValues+0x42>
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kI_Gain_temp);
   80dee:	a901      	add	r1, sp, #4
   80df0:	4836      	ldr	r0, [pc, #216]	; (80ecc <getPIDValues+0x12c>)
   80df2:	4b39      	ldr	r3, [pc, #228]	; (80ed8 <getPIDValues+0x138>)
   80df4:	4798      	blx	r3
	printf("%i\n\r", kI_Gain_temp);
   80df6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   80dfa:	4838      	ldr	r0, [pc, #224]	; (80edc <getPIDValues+0x13c>)
   80dfc:	4b38      	ldr	r3, [pc, #224]	; (80ee0 <getPIDValues+0x140>)
   80dfe:	4798      	blx	r3
	
	while (!uart_is_rx_ready (CONF_UART)){
   80e00:	4d32      	ldr	r5, [pc, #200]	; (80ecc <getPIDValues+0x12c>)
   80e02:	4c33      	ldr	r4, [pc, #204]	; (80ed0 <getPIDValues+0x130>)
		vTaskDelay(1);
   80e04:	4e33      	ldr	r6, [pc, #204]	; (80ed4 <getPIDValues+0x134>)
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kI_Gain_temp);
	printf("%i\n\r", kI_Gain_temp);
	
	while (!uart_is_rx_ready (CONF_UART)){
   80e06:	e001      	b.n	80e0c <getPIDValues+0x6c>
		vTaskDelay(1);
   80e08:	2001      	movs	r0, #1
   80e0a:	47b0      	blx	r6
		vTaskDelay(1);
	}
	uart_read(CONF_UART, &kI_Gain_temp);
	printf("%i\n\r", kI_Gain_temp);
	
	while (!uart_is_rx_ready (CONF_UART)){
   80e0c:	4628      	mov	r0, r5
   80e0e:	47a0      	blx	r4
   80e10:	2800      	cmp	r0, #0
   80e12:	d0f9      	beq.n	80e08 <getPIDValues+0x68>
		vTaskDelay(1);
	};
	uart_read(CONF_UART, &kD_Gain_temp);
   80e14:	f10d 0102 	add.w	r1, sp, #2
   80e18:	482c      	ldr	r0, [pc, #176]	; (80ecc <getPIDValues+0x12c>)
   80e1a:	4b2f      	ldr	r3, [pc, #188]	; (80ed8 <getPIDValues+0x138>)
   80e1c:	4798      	blx	r3
	printf("%i\n\r", kD_Gain_temp);
   80e1e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   80e22:	482e      	ldr	r0, [pc, #184]	; (80edc <getPIDValues+0x13c>)
   80e24:	4b2e      	ldr	r3, [pc, #184]	; (80ee0 <getPIDValues+0x140>)
   80e26:	4798      	blx	r3

	while (!uart_is_rx_ready (CONF_UART)){
   80e28:	4d28      	ldr	r5, [pc, #160]	; (80ecc <getPIDValues+0x12c>)
   80e2a:	4c29      	ldr	r4, [pc, #164]	; (80ed0 <getPIDValues+0x130>)
		vTaskDelay(1);
   80e2c:	4e29      	ldr	r6, [pc, #164]	; (80ed4 <getPIDValues+0x134>)
		vTaskDelay(1);
	};
	uart_read(CONF_UART, &kD_Gain_temp);
	printf("%i\n\r", kD_Gain_temp);

	while (!uart_is_rx_ready (CONF_UART)){
   80e2e:	e001      	b.n	80e34 <getPIDValues+0x94>
		vTaskDelay(1);
   80e30:	2001      	movs	r0, #1
   80e32:	47b0      	blx	r6
		vTaskDelay(1);
	};
	uart_read(CONF_UART, &kD_Gain_temp);
	printf("%i\n\r", kD_Gain_temp);

	while (!uart_is_rx_ready (CONF_UART)){
   80e34:	4628      	mov	r0, r5
   80e36:	47a0      	blx	r4
   80e38:	2800      	cmp	r0, #0
   80e3a:	d0f9      	beq.n	80e30 <getPIDValues+0x90>
		vTaskDelay(1);
	};
	uart_read(CONF_UART, &bor_varde);
   80e3c:	4c29      	ldr	r4, [pc, #164]	; (80ee4 <getPIDValues+0x144>)
   80e3e:	4621      	mov	r1, r4
   80e40:	4822      	ldr	r0, [pc, #136]	; (80ecc <getPIDValues+0x12c>)
   80e42:	4b25      	ldr	r3, [pc, #148]	; (80ed8 <getPIDValues+0x138>)
   80e44:	4798      	blx	r3
	printf("%i\n\r", bor_varde);
   80e46:	f9b4 1000 	ldrsh.w	r1, [r4]
   80e4a:	4824      	ldr	r0, [pc, #144]	; (80edc <getPIDValues+0x13c>)
   80e4c:	4b24      	ldr	r3, [pc, #144]	; (80ee0 <getPIDValues+0x140>)
   80e4e:	4798      	blx	r3

	//Convert to correct data types
	p_value = (double) ((double) kP_Gain_temp / divider);
   80e50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   80e54:	4b24      	ldr	r3, [pc, #144]	; (80ee8 <getPIDValues+0x148>)
   80e56:	4798      	blx	r3
   80e58:	2200      	movs	r2, #0
   80e5a:	4b24      	ldr	r3, [pc, #144]	; (80eec <getPIDValues+0x14c>)
   80e5c:	4c24      	ldr	r4, [pc, #144]	; (80ef0 <getPIDValues+0x150>)
   80e5e:	47a0      	blx	r4
   80e60:	4b24      	ldr	r3, [pc, #144]	; (80ef4 <getPIDValues+0x154>)
   80e62:	e9c3 0100 	strd	r0, r1, [r3]
	i_value = (double) (kI_Gain_temp / divider);
   80e66:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   80e6a:	4d23      	ldr	r5, [pc, #140]	; (80ef8 <getPIDValues+0x158>)
   80e6c:	fb85 3000 	smull	r3, r0, r5, r0
   80e70:	4c22      	ldr	r4, [pc, #136]	; (80efc <getPIDValues+0x15c>)
   80e72:	1080      	asrs	r0, r0, #2
   80e74:	47a0      	blx	r4
   80e76:	4b22      	ldr	r3, [pc, #136]	; (80f00 <getPIDValues+0x160>)
   80e78:	e9c3 0100 	strd	r0, r1, [r3]
	d_value = (double) (kD_Gain_temp / divider);
   80e7c:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   80e80:	fb85 3000 	smull	r3, r0, r5, r0
   80e84:	1080      	asrs	r0, r0, #2
   80e86:	47a0      	blx	r4
   80e88:	4b1e      	ldr	r3, [pc, #120]	; (80f04 <getPIDValues+0x164>)
   80e8a:	e9c3 0100 	strd	r0, r1, [r3]

	// Wait here until start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80e8e:	4d0f      	ldr	r5, [pc, #60]	; (80ecc <getPIDValues+0x12c>)
   80e90:	4c0f      	ldr	r4, [pc, #60]	; (80ed0 <getPIDValues+0x130>)
		vTaskDelay(1);
   80e92:	4e10      	ldr	r6, [pc, #64]	; (80ed4 <getPIDValues+0x134>)
	p_value = (double) ((double) kP_Gain_temp / divider);
	i_value = (double) (kI_Gain_temp / divider);
	d_value = (double) (kD_Gain_temp / divider);

	// Wait here until start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80e94:	e001      	b.n	80e9a <getPIDValues+0xfa>
		vTaskDelay(1);
   80e96:	2001      	movs	r0, #1
   80e98:	47b0      	blx	r6
	p_value = (double) ((double) kP_Gain_temp / divider);
	i_value = (double) (kI_Gain_temp / divider);
	d_value = (double) (kD_Gain_temp / divider);

	// Wait here until start signal is sent from matlab
	while (!uart_is_rx_ready (CONF_UART)){
   80e9a:	4628      	mov	r0, r5
   80e9c:	47a0      	blx	r4
   80e9e:	2800      	cmp	r0, #0
   80ea0:	d0f9      	beq.n	80e96 <getPIDValues+0xf6>
		vTaskDelay(1);
	};
	printf("%i\n\r", 1);
   80ea2:	2101      	movs	r1, #1
   80ea4:	480d      	ldr	r0, [pc, #52]	; (80edc <getPIDValues+0x13c>)
   80ea6:	4b0e      	ldr	r3, [pc, #56]	; (80ee0 <getPIDValues+0x140>)
   80ea8:	4798      	blx	r3
	
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80eaa:	4c08      	ldr	r4, [pc, #32]	; (80ecc <getPIDValues+0x12c>)
   80eac:	4d08      	ldr	r5, [pc, #32]	; (80ed0 <getPIDValues+0x130>)
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
   80eae:	4e0a      	ldr	r6, [pc, #40]	; (80ed8 <getPIDValues+0x138>)
		vTaskDelay(1);
	};
	printf("%i\n\r", 1);
	
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80eb0:	e005      	b.n	80ebe <getPIDValues+0x11e>
		uint8_t clearBuffer = 0;
   80eb2:	a902      	add	r1, sp, #8
   80eb4:	2300      	movs	r3, #0
   80eb6:	f801 3d07 	strb.w	r3, [r1, #-7]!
		uart_read(CONF_UART, &clearBuffer);
   80eba:	4620      	mov	r0, r4
   80ebc:	47b0      	blx	r6
		vTaskDelay(1);
	};
	printf("%i\n\r", 1);
	
	// Clear RX buffer
	while (uart_is_rx_ready (CONF_UART)){
   80ebe:	4620      	mov	r0, r4
   80ec0:	47a8      	blx	r5
   80ec2:	2800      	cmp	r0, #0
   80ec4:	d1f5      	bne.n	80eb2 <getPIDValues+0x112>
		uint8_t clearBuffer = 0;
		uart_read(CONF_UART, &clearBuffer);
	};

   80ec6:	b002      	add	sp, #8
   80ec8:	bd70      	pop	{r4, r5, r6, pc}
   80eca:	bf00      	nop
   80ecc:	400e0800 	.word	0x400e0800
   80ed0:	0008285d 	.word	0x0008285d
   80ed4:	00081e15 	.word	0x00081e15
   80ed8:	00082875 	.word	0x00082875
   80edc:	000860e0 	.word	0x000860e0
   80ee0:	00083199 	.word	0x00083199
   80ee4:	20070a48 	.word	0x20070a48
   80ee8:	00082be9 	.word	0x00082be9
   80eec:	40240000 	.word	0x40240000
   80ef0:	00082f29 	.word	0x00082f29
   80ef4:	20070a50 	.word	0x20070a50
   80ef8:	66666667 	.word	0x66666667
   80efc:	00082c09 	.word	0x00082c09
   80f00:	20070a40 	.word	0x20070a40
   80f04:	20070a38 	.word	0x20070a38

00080f08 <ComTask>:
#include "all_variables.h"
#include "my_adc.h"


void ComTask (void *pvParameters)
{
   80f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80f0c:	b083      	sub	sp, #12
	getPIDValues(); // Get Matlab Values
   80f0e:	4b18      	ldr	r3, [pc, #96]	; (80f70 <ComTask+0x68>)
   80f10:	4798      	blx	r3

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80f12:	4c18      	ldr	r4, [pc, #96]	; (80f74 <ComTask+0x6c>)
   80f14:	4d18      	ldr	r5, [pc, #96]	; (80f78 <ComTask+0x70>)
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
   80f16:	4e19      	ldr	r6, [pc, #100]	; (80f7c <ComTask+0x74>)
		};

			printf("%i\n\r", error);
   80f18:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80f94 <ComTask+0x8c>
   80f1c:	e002      	b.n	80f24 <ComTask+0x1c>

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
   80f1e:	2001      	movs	r0, #1
   80f20:	4b17      	ldr	r3, [pc, #92]	; (80f80 <ComTask+0x78>)
   80f22:	4798      	blx	r3
	getPIDValues(); // Get Matlab Values

	for(;;){

		// Wait here for Matlab to send signal its ready to receive values
		while (!uart_is_rx_ready (CONF_UART)){
   80f24:	4620      	mov	r0, r4
   80f26:	47a8      	blx	r5
   80f28:	2800      	cmp	r0, #0
   80f2a:	d0f8      	beq.n	80f1e <ComTask+0x16>
   80f2c:	e005      	b.n	80f3a <ComTask+0x32>
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
			uint8_t clearBuffer = 0;
   80f2e:	a902      	add	r1, sp, #8
   80f30:	2300      	movs	r3, #0
   80f32:	f801 3d01 	strb.w	r3, [r1, #-1]!
			uart_read(CONF_UART, &clearBuffer);
   80f36:	4620      	mov	r0, r4
   80f38:	47b0      	blx	r6
		while (!uart_is_rx_ready (CONF_UART)){
			vTaskDelay(1);
		};

		// Clear RX buffer
		while (uart_is_rx_ready (CONF_UART)){
   80f3a:	4620      	mov	r0, r4
   80f3c:	47a8      	blx	r5
   80f3e:	2800      	cmp	r0, #0
   80f40:	d1f5      	bne.n	80f2e <ComTask+0x26>
			uint8_t clearBuffer = 0;
			uart_read(CONF_UART, &clearBuffer);
		};

			printf("%i\n\r", error);
   80f42:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80f98 <ComTask+0x90>
   80f46:	f9b9 1000 	ldrsh.w	r1, [r9]
   80f4a:	4640      	mov	r0, r8
   80f4c:	4f0d      	ldr	r7, [pc, #52]	; (80f84 <ComTask+0x7c>)
   80f4e:	47b8      	blx	r7
			printf("%i\n\r", value_out);
   80f50:	4b0d      	ldr	r3, [pc, #52]	; (80f88 <ComTask+0x80>)
   80f52:	f9b3 1000 	ldrsh.w	r1, [r3]
   80f56:	4640      	mov	r0, r8
   80f58:	47b8      	blx	r7
			printf("%i\n\r", distance_sensor);
   80f5a:	4b0c      	ldr	r3, [pc, #48]	; (80f8c <ComTask+0x84>)
   80f5c:	f9b3 1000 	ldrsh.w	r1, [r3]
   80f60:	4640      	mov	r0, r8
   80f62:	47b8      	blx	r7
			printf("%i\n\r", bor_varde);
   80f64:	4b0a      	ldr	r3, [pc, #40]	; (80f90 <ComTask+0x88>)
   80f66:	f9b3 1000 	ldrsh.w	r1, [r3]
   80f6a:	4640      	mov	r0, r8
   80f6c:	47b8      	blx	r7
	}
   80f6e:	e7d9      	b.n	80f24 <ComTask+0x1c>
   80f70:	00080da1 	.word	0x00080da1
   80f74:	400e0800 	.word	0x400e0800
   80f78:	0008285d 	.word	0x0008285d
   80f7c:	00082875 	.word	0x00082875
   80f80:	00081e15 	.word	0x00081e15
   80f84:	00083199 	.word	0x00083199
   80f88:	20070a78 	.word	0x20070a78
   80f8c:	20070a6a 	.word	0x20070a6a
   80f90:	20070a48 	.word	0x20070a48
   80f94:	20070a58 	.word	0x20070a58
   80f98:	000860e0 	.word	0x000860e0

00080f9c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80f9c:	f100 0308 	add.w	r3, r0, #8
   80fa0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   80fa6:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80fa8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80faa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80fac:	2300      	movs	r3, #0
   80fae:	6003      	str	r3, [r0, #0]
   80fb0:	4770      	bx	lr
   80fb2:	bf00      	nop

00080fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80fb4:	2300      	movs	r3, #0
   80fb6:	6103      	str	r3, [r0, #16]
   80fb8:	4770      	bx	lr
   80fba:	bf00      	nop

00080fbc <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80fbc:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80fbe:	685a      	ldr	r2, [r3, #4]
   80fc0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80fc2:	6842      	ldr	r2, [r0, #4]
   80fc4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80fc6:	685a      	ldr	r2, [r3, #4]
   80fc8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80fca:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80fcc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80fce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80fd0:	6803      	ldr	r3, [r0, #0]
   80fd2:	3301      	adds	r3, #1
   80fd4:	6003      	str	r3, [r0, #0]
   80fd6:	4770      	bx	lr

00080fd8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80fd8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80fda:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80fe0:	429c      	cmp	r4, r3
   80fe2:	d101      	bne.n	80fe8 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80fe4:	6902      	ldr	r2, [r0, #16]
   80fe6:	e00c      	b.n	81002 <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80fe8:	f100 0208 	add.w	r2, r0, #8
   80fec:	68c3      	ldr	r3, [r0, #12]
   80fee:	881b      	ldrh	r3, [r3, #0]
   80ff0:	b29b      	uxth	r3, r3
   80ff2:	429c      	cmp	r4, r3
   80ff4:	d305      	bcc.n	81002 <vListInsert+0x2a>
   80ff6:	6852      	ldr	r2, [r2, #4]
   80ff8:	6853      	ldr	r3, [r2, #4]
   80ffa:	881b      	ldrh	r3, [r3, #0]
   80ffc:	b29b      	uxth	r3, r3
   80ffe:	429c      	cmp	r4, r3
   81000:	d2f9      	bcs.n	80ff6 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81002:	6853      	ldr	r3, [r2, #4]
   81004:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81006:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81008:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8100a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8100c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8100e:	6803      	ldr	r3, [r0, #0]
   81010:	3301      	adds	r3, #1
   81012:	6003      	str	r3, [r0, #0]
}
   81014:	bc10      	pop	{r4}
   81016:	4770      	bx	lr

00081018 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81018:	6843      	ldr	r3, [r0, #4]
   8101a:	6882      	ldr	r2, [r0, #8]
   8101c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8101e:	6883      	ldr	r3, [r0, #8]
   81020:	6842      	ldr	r2, [r0, #4]
   81022:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81024:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81026:	685a      	ldr	r2, [r3, #4]
   81028:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8102a:	bf04      	itt	eq
   8102c:	6882      	ldreq	r2, [r0, #8]
   8102e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81030:	2200      	movs	r2, #0
   81032:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81034:	681a      	ldr	r2, [r3, #0]
   81036:	3a01      	subs	r2, #1
   81038:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8103a:	6818      	ldr	r0, [r3, #0]
}
   8103c:	4770      	bx	lr
   8103e:	bf00      	nop

00081040 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81040:	4803      	ldr	r0, [pc, #12]	; (81050 <prvPortStartFirstTask+0x10>)
   81042:	6800      	ldr	r0, [r0, #0]
   81044:	6800      	ldr	r0, [r0, #0]
   81046:	f380 8808 	msr	MSP, r0
   8104a:	b662      	cpsie	i
   8104c:	df00      	svc	0
   8104e:	bf00      	nop
   81050:	e000ed08 	.word	0xe000ed08

00081054 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   81058:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   8105c:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   81060:	2300      	movs	r3, #0
   81062:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   81066:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   8106a:	3840      	subs	r0, #64	; 0x40
   8106c:	4770      	bx	lr
   8106e:	bf00      	nop

00081070 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   81070:	4b06      	ldr	r3, [pc, #24]	; (8108c <pxCurrentTCBConst2>)
   81072:	6819      	ldr	r1, [r3, #0]
   81074:	6808      	ldr	r0, [r1, #0]
   81076:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8107a:	f380 8809 	msr	PSP, r0
   8107e:	f04f 0000 	mov.w	r0, #0
   81082:	f380 8811 	msr	BASEPRI, r0
   81086:	f04e 0e0d 	orr.w	lr, lr, #13
   8108a:	4770      	bx	lr

0008108c <pxCurrentTCBConst2>:
   8108c:	20078ba8 	.word	0x20078ba8

00081090 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81094:	4b01      	ldr	r3, [pc, #4]	; (8109c <vPortYieldFromISR+0xc>)
   81096:	601a      	str	r2, [r3, #0]
   81098:	4770      	bx	lr
   8109a:	bf00      	nop
   8109c:	e000ed04 	.word	0xe000ed04

000810a0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   810a0:	f3ef 8011 	mrs	r0, BASEPRI
   810a4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   810a8:	f381 8811 	msr	BASEPRI, r1
   810ac:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   810ae:	2000      	movs	r0, #0

000810b0 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   810b0:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   810b2:	4b03      	ldr	r3, [pc, #12]	; (810c0 <vPortEnterCritical+0x10>)
   810b4:	4798      	blx	r3
	uxCriticalNesting++;
   810b6:	4a03      	ldr	r2, [pc, #12]	; (810c4 <vPortEnterCritical+0x14>)
   810b8:	6813      	ldr	r3, [r2, #0]
   810ba:	3301      	adds	r3, #1
   810bc:	6013      	str	r3, [r2, #0]
   810be:	bd08      	pop	{r3, pc}
   810c0:	000810a1 	.word	0x000810a1
   810c4:	20070130 	.word	0x20070130

000810c8 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   810c8:	f380 8811 	msr	BASEPRI, r0
   810cc:	4770      	bx	lr
   810ce:	bf00      	nop

000810d0 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   810d0:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   810d2:	4a04      	ldr	r2, [pc, #16]	; (810e4 <vPortExitCritical+0x14>)
   810d4:	6813      	ldr	r3, [r2, #0]
   810d6:	3b01      	subs	r3, #1
   810d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   810da:	b913      	cbnz	r3, 810e2 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   810dc:	2000      	movs	r0, #0
   810de:	4b02      	ldr	r3, [pc, #8]	; (810e8 <vPortExitCritical+0x18>)
   810e0:	4798      	blx	r3
   810e2:	bd08      	pop	{r3, pc}
   810e4:	20070130 	.word	0x20070130
   810e8:	000810c9 	.word	0x000810c9

000810ec <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   810ec:	f3ef 8009 	mrs	r0, PSP
   810f0:	4b0c      	ldr	r3, [pc, #48]	; (81124 <pxCurrentTCBConst>)
   810f2:	681a      	ldr	r2, [r3, #0]
   810f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   810f8:	6010      	str	r0, [r2, #0]
   810fa:	e92d 4008 	stmdb	sp!, {r3, lr}
   810fe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81102:	f380 8811 	msr	BASEPRI, r0
   81106:	f000 feed 	bl	81ee4 <vTaskSwitchContext>
   8110a:	f04f 0000 	mov.w	r0, #0
   8110e:	f380 8811 	msr	BASEPRI, r0
   81112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81116:	6819      	ldr	r1, [r3, #0]
   81118:	6808      	ldr	r0, [r1, #0]
   8111a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8111e:	f380 8809 	msr	PSP, r0
   81122:	4770      	bx	lr

00081124 <pxCurrentTCBConst>:
   81124:	20078ba8 	.word	0x20078ba8

00081128 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81128:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8112a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8112e:	4b05      	ldr	r3, [pc, #20]	; (81144 <SysTick_Handler+0x1c>)
   81130:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81132:	4b05      	ldr	r3, [pc, #20]	; (81148 <SysTick_Handler+0x20>)
   81134:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81136:	4b05      	ldr	r3, [pc, #20]	; (8114c <SysTick_Handler+0x24>)
   81138:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8113a:	2000      	movs	r0, #0
   8113c:	4b04      	ldr	r3, [pc, #16]	; (81150 <SysTick_Handler+0x28>)
   8113e:	4798      	blx	r3
   81140:	bd08      	pop	{r3, pc}
   81142:	bf00      	nop
   81144:	e000ed04 	.word	0xe000ed04
   81148:	000810a1 	.word	0x000810a1
   8114c:	00081b4d 	.word	0x00081b4d
   81150:	000810c9 	.word	0x000810c9

00081154 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   81154:	4a03      	ldr	r2, [pc, #12]	; (81164 <vPortSetupTimerInterrupt+0x10>)
   81156:	4b04      	ldr	r3, [pc, #16]	; (81168 <vPortSetupTimerInterrupt+0x14>)
   81158:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8115a:	2207      	movs	r2, #7
   8115c:	3b04      	subs	r3, #4
   8115e:	601a      	str	r2, [r3, #0]
   81160:	4770      	bx	lr
   81162:	bf00      	nop
   81164:	0001481f 	.word	0x0001481f
   81168:	e000e014 	.word	0xe000e014

0008116c <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   8116c:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8116e:	4b09      	ldr	r3, [pc, #36]	; (81194 <xPortStartScheduler+0x28>)
   81170:	681a      	ldr	r2, [r3, #0]
   81172:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81176:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81178:	681a      	ldr	r2, [r3, #0]
   8117a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8117e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81180:	4b05      	ldr	r3, [pc, #20]	; (81198 <xPortStartScheduler+0x2c>)
   81182:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81184:	2400      	movs	r4, #0
   81186:	4b05      	ldr	r3, [pc, #20]	; (8119c <xPortStartScheduler+0x30>)
   81188:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8118a:	4b05      	ldr	r3, [pc, #20]	; (811a0 <xPortStartScheduler+0x34>)
   8118c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   8118e:	4620      	mov	r0, r4
   81190:	bd10      	pop	{r4, pc}
   81192:	bf00      	nop
   81194:	e000ed20 	.word	0xe000ed20
   81198:	00081155 	.word	0x00081155
   8119c:	20070130 	.word	0x20070130
   811a0:	00081041 	.word	0x00081041

000811a4 <prvInsertBlockIntoFreeList>:
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   811a4:	4a12      	ldr	r2, [pc, #72]	; (811f0 <prvInsertBlockIntoFreeList+0x4c>)
   811a6:	e000      	b.n	811aa <prvInsertBlockIntoFreeList+0x6>
   811a8:	461a      	mov	r2, r3
   811aa:	6813      	ldr	r3, [r2, #0]
   811ac:	4283      	cmp	r3, r0
   811ae:	d3fb      	bcc.n	811a8 <prvInsertBlockIntoFreeList+0x4>
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   811b0:	b410      	push	{r4}
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   811b2:	6851      	ldr	r1, [r2, #4]
   811b4:	1854      	adds	r4, r2, r1
   811b6:	42a0      	cmp	r0, r4
   811b8:	d103      	bne.n	811c2 <prvInsertBlockIntoFreeList+0x1e>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   811ba:	6840      	ldr	r0, [r0, #4]
   811bc:	4401      	add	r1, r0
   811be:	6051      	str	r1, [r2, #4]
   811c0:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   811c2:	6841      	ldr	r1, [r0, #4]
   811c4:	1844      	adds	r4, r0, r1
   811c6:	42a3      	cmp	r3, r4
   811c8:	d10c      	bne.n	811e4 <prvInsertBlockIntoFreeList+0x40>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   811ca:	4b0a      	ldr	r3, [pc, #40]	; (811f4 <prvInsertBlockIntoFreeList+0x50>)
   811cc:	681b      	ldr	r3, [r3, #0]
   811ce:	429c      	cmp	r4, r3
   811d0:	d006      	beq.n	811e0 <prvInsertBlockIntoFreeList+0x3c>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   811d2:	6863      	ldr	r3, [r4, #4]
   811d4:	4419      	add	r1, r3
   811d6:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   811d8:	6813      	ldr	r3, [r2, #0]
   811da:	681b      	ldr	r3, [r3, #0]
   811dc:	6003      	str	r3, [r0, #0]
   811de:	e002      	b.n	811e6 <prvInsertBlockIntoFreeList+0x42>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   811e0:	6004      	str	r4, [r0, #0]
   811e2:	e000      	b.n	811e6 <prvInsertBlockIntoFreeList+0x42>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   811e4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   811e6:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   811e8:	bf18      	it	ne
   811ea:	6010      	strne	r0, [r2, #0]
	}
}
   811ec:	bc10      	pop	{r4}
   811ee:	4770      	bx	lr
   811f0:	20078a84 	.word	0x20078a84
   811f4:	20078a80 	.word	0x20078a80

000811f8 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
   811f8:	b538      	push	{r3, r4, r5, lr}
   811fa:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   811fc:	4b29      	ldr	r3, [pc, #164]	; (812a4 <pvPortMalloc+0xac>)
   811fe:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81200:	4b29      	ldr	r3, [pc, #164]	; (812a8 <pvPortMalloc+0xb0>)
   81202:	681b      	ldr	r3, [r3, #0]
   81204:	b99b      	cbnz	r3, 8122e <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   81206:	4a29      	ldr	r2, [pc, #164]	; (812ac <pvPortMalloc+0xb4>)
   81208:	4b29      	ldr	r3, [pc, #164]	; (812b0 <pvPortMalloc+0xb8>)
   8120a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8120c:	2100      	movs	r1, #0
   8120e:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81210:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   81214:	1898      	adds	r0, r3, r2
   81216:	4d24      	ldr	r5, [pc, #144]	; (812a8 <pvPortMalloc+0xb0>)
   81218:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8121a:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   8121e:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81220:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81224:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   81226:	4a23      	ldr	r2, [pc, #140]	; (812b4 <pvPortMalloc+0xbc>)
   81228:	6813      	ldr	r3, [r2, #0]
   8122a:	3b10      	subs	r3, #16
   8122c:	6013      	str	r3, [r2, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   8122e:	2c00      	cmp	r4, #0
   81230:	d02e      	beq.n	81290 <pvPortMalloc+0x98>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81232:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   81236:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8123a:	bf1c      	itt	ne
   8123c:	f022 0207 	bicne.w	r2, r2, #7
   81240:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81242:	1e51      	subs	r1, r2, #1
   81244:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   81248:	4299      	cmp	r1, r3
   8124a:	d823      	bhi.n	81294 <pvPortMalloc+0x9c>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   8124c:	4917      	ldr	r1, [pc, #92]	; (812ac <pvPortMalloc+0xb4>)
   8124e:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81250:	e001      	b.n	81256 <pvPortMalloc+0x5e>
   81252:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   81254:	461c      	mov	r4, r3
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81256:	6863      	ldr	r3, [r4, #4]
   81258:	429a      	cmp	r2, r3
   8125a:	d902      	bls.n	81262 <pvPortMalloc+0x6a>
   8125c:	6823      	ldr	r3, [r4, #0]
   8125e:	2b00      	cmp	r3, #0
   81260:	d1f7      	bne.n	81252 <pvPortMalloc+0x5a>
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   81262:	4b11      	ldr	r3, [pc, #68]	; (812a8 <pvPortMalloc+0xb0>)
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	429c      	cmp	r4, r3
   81268:	d016      	beq.n	81298 <pvPortMalloc+0xa0>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8126a:	680d      	ldr	r5, [r1, #0]
   8126c:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8126e:	6823      	ldr	r3, [r4, #0]
   81270:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81272:	6863      	ldr	r3, [r4, #4]
   81274:	1a9b      	subs	r3, r3, r2
   81276:	2b20      	cmp	r3, #32
   81278:	d904      	bls.n	81284 <pvPortMalloc+0x8c>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8127a:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8127c:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   8127e:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81280:	4b0d      	ldr	r3, [pc, #52]	; (812b8 <pvPortMalloc+0xc0>)
   81282:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   81284:	4a0b      	ldr	r2, [pc, #44]	; (812b4 <pvPortMalloc+0xbc>)
   81286:	6813      	ldr	r3, [r2, #0]
   81288:	6861      	ldr	r1, [r4, #4]
   8128a:	1a5b      	subs	r3, r3, r1
   8128c:	6013      	str	r3, [r2, #0]
   8128e:	e004      	b.n	8129a <pvPortMalloc+0xa2>
/*-----------------------------------------------------------*/
extern void vApplicationMallocFailedHook( void );
void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81290:	2500      	movs	r5, #0
   81292:	e002      	b.n	8129a <pvPortMalloc+0xa2>
   81294:	2500      	movs	r5, #0
   81296:	e000      	b.n	8129a <pvPortMalloc+0xa2>
   81298:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   8129a:	4b08      	ldr	r3, [pc, #32]	; (812bc <pvPortMalloc+0xc4>)
   8129c:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   8129e:	4628      	mov	r0, r5
   812a0:	bd38      	pop	{r3, r4, r5, pc}
   812a2:	bf00      	nop
   812a4:	00081b1d 	.word	0x00081b1d
   812a8:	20078a80 	.word	0x20078a80
   812ac:	20078a84 	.word	0x20078a84
   812b0:	20070a80 	.word	0x20070a80
   812b4:	20070134 	.word	0x20070134
   812b8:	000811a5 	.word	0x000811a5
   812bc:	00081c79 	.word	0x00081c79

000812c0 <vPortFree>:
void vPortFree( void *pv )
{
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   812c0:	b180      	cbz	r0, 812e4 <vPortFree+0x24>
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   812c2:	b510      	push	{r4, lr}
   812c4:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   812c6:	4b08      	ldr	r3, [pc, #32]	; (812e8 <vPortFree+0x28>)
   812c8:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   812ca:	4a08      	ldr	r2, [pc, #32]	; (812ec <vPortFree+0x2c>)
   812cc:	f854 1c0c 	ldr.w	r1, [r4, #-12]
   812d0:	6813      	ldr	r3, [r2, #0]
   812d2:	440b      	add	r3, r1
   812d4:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   812d6:	f1a4 0010 	sub.w	r0, r4, #16
   812da:	4b05      	ldr	r3, [pc, #20]	; (812f0 <vPortFree+0x30>)
   812dc:	4798      	blx	r3
		}
		xTaskResumeAll();
   812de:	4b05      	ldr	r3, [pc, #20]	; (812f4 <vPortFree+0x34>)
   812e0:	4798      	blx	r3
   812e2:	bd10      	pop	{r4, pc}
   812e4:	4770      	bx	lr
   812e6:	bf00      	nop
   812e8:	00081b1d 	.word	0x00081b1d
   812ec:	20070134 	.word	0x20070134
   812f0:	000811a5 	.word	0x000811a5
   812f4:	00081c79 	.word	0x00081c79

000812f8 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   812f8:	b510      	push	{r4, lr}
   812fa:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   812fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   812fe:	b93b      	cbnz	r3, 81310 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81300:	6803      	ldr	r3, [r0, #0]
   81302:	bb1b      	cbnz	r3, 8134c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81304:	6840      	ldr	r0, [r0, #4]
   81306:	4b13      	ldr	r3, [pc, #76]	; (81354 <prvCopyDataToQueue+0x5c>)
   81308:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8130a:	2300      	movs	r3, #0
   8130c:	6063      	str	r3, [r4, #4]
   8130e:	e01d      	b.n	8134c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81310:	b96a      	cbnz	r2, 8132e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81312:	461a      	mov	r2, r3
   81314:	6880      	ldr	r0, [r0, #8]
   81316:	4b10      	ldr	r3, [pc, #64]	; (81358 <prvCopyDataToQueue+0x60>)
   81318:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8131a:	68a2      	ldr	r2, [r4, #8]
   8131c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   8131e:	4413      	add	r3, r2
   81320:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81322:	6862      	ldr	r2, [r4, #4]
   81324:	4293      	cmp	r3, r2
   81326:	d311      	bcc.n	8134c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81328:	6823      	ldr	r3, [r4, #0]
   8132a:	60a3      	str	r3, [r4, #8]
   8132c:	e00e      	b.n	8134c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8132e:	461a      	mov	r2, r3
   81330:	68c0      	ldr	r0, [r0, #12]
   81332:	4b09      	ldr	r3, [pc, #36]	; (81358 <prvCopyDataToQueue+0x60>)
   81334:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81336:	6c23      	ldr	r3, [r4, #64]	; 0x40
   81338:	425b      	negs	r3, r3
   8133a:	68e2      	ldr	r2, [r4, #12]
   8133c:	441a      	add	r2, r3
   8133e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81340:	6821      	ldr	r1, [r4, #0]
   81342:	428a      	cmp	r2, r1
   81344:	d202      	bcs.n	8134c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81346:	6862      	ldr	r2, [r4, #4]
   81348:	4413      	add	r3, r2
   8134a:	60e3      	str	r3, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8134c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8134e:	3301      	adds	r3, #1
   81350:	63a3      	str	r3, [r4, #56]	; 0x38
   81352:	bd10      	pop	{r4, pc}
   81354:	00082225 	.word	0x00082225
   81358:	000831c1 	.word	0x000831c1

0008135c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   8135c:	b538      	push	{r3, r4, r5, lr}
   8135e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81360:	6800      	ldr	r0, [r0, #0]
   81362:	b158      	cbz	r0, 8137c <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   81366:	68dc      	ldr	r4, [r3, #12]
   81368:	4414      	add	r4, r2
   8136a:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   8136c:	685d      	ldr	r5, [r3, #4]
   8136e:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81370:	bf28      	it	cs
   81372:	60d8      	strcs	r0, [r3, #12]
   81374:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81376:	68d9      	ldr	r1, [r3, #12]
   81378:	4b01      	ldr	r3, [pc, #4]	; (81380 <prvCopyDataFromQueue+0x24>)
   8137a:	4798      	blx	r3
   8137c:	bd38      	pop	{r3, r4, r5, pc}
   8137e:	bf00      	nop
   81380:	000831c1 	.word	0x000831c1

00081384 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81386:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81388:	4b1e      	ldr	r3, [pc, #120]	; (81404 <prvUnlockQueue+0x80>)
   8138a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8138c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8138e:	2b00      	cmp	r3, #0
   81390:	dd13      	ble.n	813ba <prvUnlockQueue+0x36>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81392:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81394:	b91b      	cbnz	r3, 8139e <prvUnlockQueue+0x1a>
   81396:	e010      	b.n	813ba <prvUnlockQueue+0x36>
   81398:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8139a:	b923      	cbnz	r3, 813a6 <prvUnlockQueue+0x22>
   8139c:	e00d      	b.n	813ba <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8139e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   813a2:	4d19      	ldr	r5, [pc, #100]	; (81408 <prvUnlockQueue+0x84>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   813a4:	4f19      	ldr	r7, [pc, #100]	; (8140c <prvUnlockQueue+0x88>)
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   813a6:	4630      	mov	r0, r6
   813a8:	47a8      	blx	r5
   813aa:	b100      	cbz	r0, 813ae <prvUnlockQueue+0x2a>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   813ac:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   813ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813b0:	3b01      	subs	r3, #1
   813b2:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   813b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   813b6:	2b00      	cmp	r3, #0
   813b8:	dcee      	bgt.n	81398 <prvUnlockQueue+0x14>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   813ba:	f04f 33ff 	mov.w	r3, #4294967295
   813be:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   813c0:	4b13      	ldr	r3, [pc, #76]	; (81410 <prvUnlockQueue+0x8c>)
   813c2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   813c4:	4b0f      	ldr	r3, [pc, #60]	; (81404 <prvUnlockQueue+0x80>)
   813c6:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   813c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813ca:	2b00      	cmp	r3, #0
   813cc:	dd13      	ble.n	813f6 <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   813ce:	6923      	ldr	r3, [r4, #16]
   813d0:	b91b      	cbnz	r3, 813da <prvUnlockQueue+0x56>
   813d2:	e010      	b.n	813f6 <prvUnlockQueue+0x72>
   813d4:	6923      	ldr	r3, [r4, #16]
   813d6:	b923      	cbnz	r3, 813e2 <prvUnlockQueue+0x5e>
   813d8:	e00d      	b.n	813f6 <prvUnlockQueue+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   813da:	f104 0610 	add.w	r6, r4, #16
   813de:	4d0a      	ldr	r5, [pc, #40]	; (81408 <prvUnlockQueue+0x84>)
				{
					vTaskMissedYield();
   813e0:	4f0a      	ldr	r7, [pc, #40]	; (8140c <prvUnlockQueue+0x88>)
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   813e2:	4630      	mov	r0, r6
   813e4:	47a8      	blx	r5
   813e6:	b100      	cbz	r0, 813ea <prvUnlockQueue+0x66>
				{
					vTaskMissedYield();
   813e8:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   813ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813ec:	3b01      	subs	r3, #1
   813ee:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   813f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   813f2:	2b00      	cmp	r3, #0
   813f4:	dcee      	bgt.n	813d4 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   813f6:	f04f 33ff 	mov.w	r3, #4294967295
   813fa:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   813fc:	4b04      	ldr	r3, [pc, #16]	; (81410 <prvUnlockQueue+0x8c>)
   813fe:	4798      	blx	r3
   81400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81402:	bf00      	nop
   81404:	000810b1 	.word	0x000810b1
   81408:	00082035 	.word	0x00082035
   8140c:	0008216d 	.word	0x0008216d
   81410:	000810d1 	.word	0x000810d1

00081414 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81414:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   81416:	b918      	cbnz	r0, 81420 <xQueueGenericReset+0xc>
   81418:	4b17      	ldr	r3, [pc, #92]	; (81478 <xQueueGenericReset+0x64>)
   8141a:	4798      	blx	r3
   8141c:	bf00      	nop
   8141e:	e7fd      	b.n	8141c <xQueueGenericReset+0x8>
   81420:	460d      	mov	r5, r1
   81422:	4604      	mov	r4, r0

	taskENTER_CRITICAL();
   81424:	4b15      	ldr	r3, [pc, #84]	; (8147c <xQueueGenericReset+0x68>)
   81426:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81428:	6822      	ldr	r2, [r4, #0]
   8142a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   8142c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8142e:	fb03 f301 	mul.w	r3, r3, r1
   81432:	18d0      	adds	r0, r2, r3
   81434:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81436:	2000      	movs	r0, #0
   81438:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8143a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   8143c:	1a5b      	subs	r3, r3, r1
   8143e:	4413      	add	r3, r2
   81440:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81442:	f04f 33ff 	mov.w	r3, #4294967295
   81446:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81448:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8144a:	b955      	cbnz	r5, 81462 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8144c:	6923      	ldr	r3, [r4, #16]
   8144e:	b17b      	cbz	r3, 81470 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81450:	f104 0010 	add.w	r0, r4, #16
   81454:	4b0a      	ldr	r3, [pc, #40]	; (81480 <xQueueGenericReset+0x6c>)
   81456:	4798      	blx	r3
   81458:	2801      	cmp	r0, #1
   8145a:	d109      	bne.n	81470 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   8145c:	4b09      	ldr	r3, [pc, #36]	; (81484 <xQueueGenericReset+0x70>)
   8145e:	4798      	blx	r3
   81460:	e006      	b.n	81470 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81462:	f104 0010 	add.w	r0, r4, #16
   81466:	4d08      	ldr	r5, [pc, #32]	; (81488 <xQueueGenericReset+0x74>)
   81468:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8146a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8146e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81470:	4b06      	ldr	r3, [pc, #24]	; (8148c <xQueueGenericReset+0x78>)
   81472:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81474:	2001      	movs	r0, #1
   81476:	bd38      	pop	{r3, r4, r5, pc}
   81478:	000810a1 	.word	0x000810a1
   8147c:	000810b1 	.word	0x000810b1
   81480:	00082035 	.word	0x00082035
   81484:	00081091 	.word	0x00081091
   81488:	00080f9d 	.word	0x00080f9d
   8148c:	000810d1 	.word	0x000810d1

00081490 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81492:	b1a0      	cbz	r0, 814be <xQueueGenericCreate+0x2e>
   81494:	460d      	mov	r5, r1
   81496:	4617      	mov	r7, r2
   81498:	4606      	mov	r6, r0
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8149a:	2050      	movs	r0, #80	; 0x50
   8149c:	4b0e      	ldr	r3, [pc, #56]	; (814d8 <xQueueGenericCreate+0x48>)
   8149e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   814a0:	4604      	mov	r4, r0
   814a2:	b160      	cbz	r0, 814be <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   814a4:	fb05 f006 	mul.w	r0, r5, r6
   814a8:	3001      	adds	r0, #1
   814aa:	4b0b      	ldr	r3, [pc, #44]	; (814d8 <xQueueGenericCreate+0x48>)
   814ac:	4798      	blx	r3
   814ae:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   814b0:	b940      	cbnz	r0, 814c4 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   814b2:	4620      	mov	r0, r4
   814b4:	4b09      	ldr	r3, [pc, #36]	; (814dc <xQueueGenericCreate+0x4c>)
   814b6:	4798      	blx	r3
   814b8:	e001      	b.n	814be <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   814ba:	bf00      	nop
   814bc:	e7fd      	b.n	814ba <xQueueGenericCreate+0x2a>
   814be:	4b08      	ldr	r3, [pc, #32]	; (814e0 <xQueueGenericCreate+0x50>)
   814c0:	4798      	blx	r3
   814c2:	e7fa      	b.n	814ba <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   814c4:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   814c6:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   814c8:	2101      	movs	r1, #1
   814ca:	4620      	mov	r0, r4
   814cc:	4b05      	ldr	r3, [pc, #20]	; (814e4 <xQueueGenericCreate+0x54>)
   814ce:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   814d0:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   814d4:	4620      	mov	r0, r4
   814d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   814d8:	000811f9 	.word	0x000811f9
   814dc:	000812c1 	.word	0x000812c1
   814e0:	000810a1 	.word	0x000810a1
   814e4:	00081415 	.word	0x00081415

000814e8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   814e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814ec:	b085      	sub	sp, #20
   814ee:	9300      	str	r3, [sp, #0]
   814f0:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   814f4:	b918      	cbnz	r0, 814fe <xQueueGenericSend+0x16>
   814f6:	4b3a      	ldr	r3, [pc, #232]	; (815e0 <xQueueGenericSend+0xf8>)
   814f8:	4798      	blx	r3
   814fa:	bf00      	nop
   814fc:	e7fd      	b.n	814fa <xQueueGenericSend+0x12>
   814fe:	468a      	mov	sl, r1
   81500:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81502:	b929      	cbnz	r1, 81510 <xQueueGenericSend+0x28>
   81504:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81506:	b12b      	cbz	r3, 81514 <xQueueGenericSend+0x2c>
   81508:	4b35      	ldr	r3, [pc, #212]	; (815e0 <xQueueGenericSend+0xf8>)
   8150a:	4798      	blx	r3
   8150c:	bf00      	nop
   8150e:	e7fd      	b.n	8150c <xQueueGenericSend+0x24>
   81510:	2700      	movs	r7, #0
   81512:	e000      	b.n	81516 <xQueueGenericSend+0x2e>
   81514:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81516:	4e33      	ldr	r6, [pc, #204]	; (815e4 <xQueueGenericSend+0xfc>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81518:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8160c <xQueueGenericSend+0x124>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8151c:	4d32      	ldr	r5, [pc, #200]	; (815e8 <xQueueGenericSend+0x100>)
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8151e:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81520:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81522:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81524:	429a      	cmp	r2, r3
   81526:	d212      	bcs.n	8154e <xQueueGenericSend+0x66>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81528:	9a00      	ldr	r2, [sp, #0]
   8152a:	4651      	mov	r1, sl
   8152c:	4620      	mov	r0, r4
   8152e:	4b2f      	ldr	r3, [pc, #188]	; (815ec <xQueueGenericSend+0x104>)
   81530:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81532:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81534:	b13b      	cbz	r3, 81546 <xQueueGenericSend+0x5e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81536:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8153a:	4b2d      	ldr	r3, [pc, #180]	; (815f0 <xQueueGenericSend+0x108>)
   8153c:	4798      	blx	r3
   8153e:	2801      	cmp	r0, #1
   81540:	d101      	bne.n	81546 <xQueueGenericSend+0x5e>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81542:	4b2c      	ldr	r3, [pc, #176]	; (815f4 <xQueueGenericSend+0x10c>)
   81544:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   81546:	4b28      	ldr	r3, [pc, #160]	; (815e8 <xQueueGenericSend+0x100>)
   81548:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   8154a:	2001      	movs	r0, #1
   8154c:	e045      	b.n	815da <xQueueGenericSend+0xf2>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8154e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81552:	b91b      	cbnz	r3, 8155c <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81554:	4b24      	ldr	r3, [pc, #144]	; (815e8 <xQueueGenericSend+0x100>)
   81556:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81558:	2000      	movs	r0, #0
   8155a:	e03e      	b.n	815da <xQueueGenericSend+0xf2>
				}
				else if( xEntryTimeSet == pdFALSE )
   8155c:	b917      	cbnz	r7, 81564 <xQueueGenericSend+0x7c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8155e:	a802      	add	r0, sp, #8
   81560:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81562:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81564:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81566:	4b24      	ldr	r3, [pc, #144]	; (815f8 <xQueueGenericSend+0x110>)
   81568:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8156a:	47b0      	blx	r6
   8156c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8156e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81572:	bf04      	itt	eq
   81574:	2300      	moveq	r3, #0
   81576:	6463      	streq	r3, [r4, #68]	; 0x44
   81578:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8157a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8157e:	bf04      	itt	eq
   81580:	2300      	moveq	r3, #0
   81582:	64a3      	streq	r3, [r4, #72]	; 0x48
   81584:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81586:	f10d 0106 	add.w	r1, sp, #6
   8158a:	a802      	add	r0, sp, #8
   8158c:	4b1b      	ldr	r3, [pc, #108]	; (815fc <xQueueGenericSend+0x114>)
   8158e:	4798      	blx	r3
   81590:	b9e8      	cbnz	r0, 815ce <xQueueGenericSend+0xe6>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81592:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81594:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81598:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   8159c:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8159e:	45c1      	cmp	r9, r8
   815a0:	d10f      	bne.n	815c2 <xQueueGenericSend+0xda>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   815a2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   815a6:	f104 0010 	add.w	r0, r4, #16
   815aa:	4b15      	ldr	r3, [pc, #84]	; (81600 <xQueueGenericSend+0x118>)
   815ac:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   815ae:	4620      	mov	r0, r4
   815b0:	4b14      	ldr	r3, [pc, #80]	; (81604 <xQueueGenericSend+0x11c>)
   815b2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   815b4:	4b14      	ldr	r3, [pc, #80]	; (81608 <xQueueGenericSend+0x120>)
   815b6:	4798      	blx	r3
   815b8:	2800      	cmp	r0, #0
   815ba:	d1b0      	bne.n	8151e <xQueueGenericSend+0x36>
				{
					portYIELD_WITHIN_API();
   815bc:	4b0d      	ldr	r3, [pc, #52]	; (815f4 <xQueueGenericSend+0x10c>)
   815be:	4798      	blx	r3
   815c0:	e7ad      	b.n	8151e <xQueueGenericSend+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   815c2:	4620      	mov	r0, r4
   815c4:	4b0f      	ldr	r3, [pc, #60]	; (81604 <xQueueGenericSend+0x11c>)
   815c6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   815c8:	4b0f      	ldr	r3, [pc, #60]	; (81608 <xQueueGenericSend+0x120>)
   815ca:	4798      	blx	r3
   815cc:	e7a7      	b.n	8151e <xQueueGenericSend+0x36>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   815ce:	4620      	mov	r0, r4
   815d0:	4b0c      	ldr	r3, [pc, #48]	; (81604 <xQueueGenericSend+0x11c>)
   815d2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   815d4:	4b0c      	ldr	r3, [pc, #48]	; (81608 <xQueueGenericSend+0x120>)
   815d6:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   815d8:	2000      	movs	r0, #0
		}
	}
}
   815da:	b005      	add	sp, #20
   815dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815e0:	000810a1 	.word	0x000810a1
   815e4:	000810b1 	.word	0x000810b1
   815e8:	000810d1 	.word	0x000810d1
   815ec:	000812f9 	.word	0x000812f9
   815f0:	00082035 	.word	0x00082035
   815f4:	00081091 	.word	0x00081091
   815f8:	00081b1d 	.word	0x00081b1d
   815fc:	000820e1 	.word	0x000820e1
   81600:	00081f89 	.word	0x00081f89
   81604:	00081385 	.word	0x00081385
   81608:	00081c79 	.word	0x00081c79
   8160c:	000820b9 	.word	0x000820b9

00081610 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81614:	b918      	cbnz	r0, 8161e <xQueueGenericSendFromISR+0xe>
   81616:	4b1e      	ldr	r3, [pc, #120]	; (81690 <xQueueGenericSendFromISR+0x80>)
   81618:	4798      	blx	r3
   8161a:	bf00      	nop
   8161c:	e7fd      	b.n	8161a <xQueueGenericSendFromISR+0xa>
   8161e:	460e      	mov	r6, r1
   81620:	4615      	mov	r5, r2
   81622:	4698      	mov	r8, r3
   81624:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81626:	b929      	cbnz	r1, 81634 <xQueueGenericSendFromISR+0x24>
   81628:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8162a:	b11b      	cbz	r3, 81634 <xQueueGenericSendFromISR+0x24>
   8162c:	4b18      	ldr	r3, [pc, #96]	; (81690 <xQueueGenericSendFromISR+0x80>)
   8162e:	4798      	blx	r3
   81630:	bf00      	nop
   81632:	e7fd      	b.n	81630 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81634:	4b16      	ldr	r3, [pc, #88]	; (81690 <xQueueGenericSendFromISR+0x80>)
   81636:	4798      	blx	r3
   81638:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8163a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8163c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8163e:	429a      	cmp	r2, r3
   81640:	d218      	bcs.n	81674 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81642:	4642      	mov	r2, r8
   81644:	4631      	mov	r1, r6
   81646:	4620      	mov	r0, r4
   81648:	4b12      	ldr	r3, [pc, #72]	; (81694 <xQueueGenericSendFromISR+0x84>)
   8164a:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   8164c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8164e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81652:	d10a      	bne.n	8166a <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81654:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81656:	b17b      	cbz	r3, 81678 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81658:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8165c:	4b0e      	ldr	r3, [pc, #56]	; (81698 <xQueueGenericSendFromISR+0x88>)
   8165e:	4798      	blx	r3
   81660:	b160      	cbz	r0, 8167c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81662:	b16d      	cbz	r5, 81680 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81664:	2401      	movs	r4, #1
   81666:	602c      	str	r4, [r5, #0]
   81668:	e00b      	b.n	81682 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8166a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8166c:	3301      	adds	r3, #1
   8166e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81670:	2401      	movs	r4, #1
   81672:	e006      	b.n	81682 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81674:	2400      	movs	r4, #0
   81676:	e004      	b.n	81682 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81678:	2401      	movs	r4, #1
   8167a:	e002      	b.n	81682 <xQueueGenericSendFromISR+0x72>
   8167c:	2401      	movs	r4, #1
   8167e:	e000      	b.n	81682 <xQueueGenericSendFromISR+0x72>
   81680:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81682:	4638      	mov	r0, r7
   81684:	4b05      	ldr	r3, [pc, #20]	; (8169c <xQueueGenericSendFromISR+0x8c>)
   81686:	4798      	blx	r3

	return xReturn;
}
   81688:	4620      	mov	r0, r4
   8168a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8168e:	bf00      	nop
   81690:	000810a1 	.word	0x000810a1
   81694:	000812f9 	.word	0x000812f9
   81698:	00082035 	.word	0x00082035
   8169c:	000810c9 	.word	0x000810c9

000816a0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   816a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816a4:	b085      	sub	sp, #20
   816a6:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   816aa:	b918      	cbnz	r0, 816b4 <xQueueGenericReceive+0x14>
   816ac:	4b47      	ldr	r3, [pc, #284]	; (817cc <xQueueGenericReceive+0x12c>)
   816ae:	4798      	blx	r3
   816b0:	bf00      	nop
   816b2:	e7fd      	b.n	816b0 <xQueueGenericReceive+0x10>
   816b4:	4689      	mov	r9, r1
   816b6:	469a      	mov	sl, r3
   816b8:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   816ba:	b929      	cbnz	r1, 816c8 <xQueueGenericReceive+0x28>
   816bc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   816be:	b12b      	cbz	r3, 816cc <xQueueGenericReceive+0x2c>
   816c0:	4b42      	ldr	r3, [pc, #264]	; (817cc <xQueueGenericReceive+0x12c>)
   816c2:	4798      	blx	r3
   816c4:	bf00      	nop
   816c6:	e7fd      	b.n	816c4 <xQueueGenericReceive+0x24>
   816c8:	2700      	movs	r7, #0
   816ca:	e000      	b.n	816ce <xQueueGenericReceive+0x2e>
   816cc:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   816ce:	4e40      	ldr	r6, [pc, #256]	; (817d0 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   816d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 81800 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   816d4:	4d3f      	ldr	r5, [pc, #252]	; (817d4 <xQueueGenericReceive+0x134>)
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   816d6:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   816d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   816da:	b343      	cbz	r3, 8172e <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   816dc:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   816de:	4649      	mov	r1, r9
   816e0:	4620      	mov	r0, r4
   816e2:	4b3d      	ldr	r3, [pc, #244]	; (817d8 <xQueueGenericReceive+0x138>)
   816e4:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   816e6:	f1ba 0f00 	cmp.w	sl, #0
   816ea:	d112      	bne.n	81712 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   816ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   816ee:	3b01      	subs	r3, #1
   816f0:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   816f2:	6823      	ldr	r3, [r4, #0]
   816f4:	b913      	cbnz	r3, 816fc <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   816f6:	4b39      	ldr	r3, [pc, #228]	; (817dc <xQueueGenericReceive+0x13c>)
   816f8:	4798      	blx	r3
   816fa:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   816fc:	6923      	ldr	r3, [r4, #16]
   816fe:	b193      	cbz	r3, 81726 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81700:	f104 0010 	add.w	r0, r4, #16
   81704:	4b36      	ldr	r3, [pc, #216]	; (817e0 <xQueueGenericReceive+0x140>)
   81706:	4798      	blx	r3
   81708:	2801      	cmp	r0, #1
   8170a:	d10c      	bne.n	81726 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   8170c:	4b35      	ldr	r3, [pc, #212]	; (817e4 <xQueueGenericReceive+0x144>)
   8170e:	4798      	blx	r3
   81710:	e009      	b.n	81726 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81712:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81714:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81716:	b133      	cbz	r3, 81726 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81718:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8171c:	4b30      	ldr	r3, [pc, #192]	; (817e0 <xQueueGenericReceive+0x140>)
   8171e:	4798      	blx	r3
   81720:	b108      	cbz	r0, 81726 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81722:	4b30      	ldr	r3, [pc, #192]	; (817e4 <xQueueGenericReceive+0x144>)
   81724:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81726:	4b2b      	ldr	r3, [pc, #172]	; (817d4 <xQueueGenericReceive+0x134>)
   81728:	4798      	blx	r3
				return pdPASS;
   8172a:	2001      	movs	r0, #1
   8172c:	e04b      	b.n	817c6 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   8172e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   81732:	b91b      	cbnz	r3, 8173c <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81734:	4b27      	ldr	r3, [pc, #156]	; (817d4 <xQueueGenericReceive+0x134>)
   81736:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81738:	2000      	movs	r0, #0
   8173a:	e044      	b.n	817c6 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   8173c:	b917      	cbnz	r7, 81744 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8173e:	a802      	add	r0, sp, #8
   81740:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81742:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81744:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81746:	4b28      	ldr	r3, [pc, #160]	; (817e8 <xQueueGenericReceive+0x148>)
   81748:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8174a:	47b0      	blx	r6
   8174c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8174e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81752:	bf04      	itt	eq
   81754:	2300      	moveq	r3, #0
   81756:	6463      	streq	r3, [r4, #68]	; 0x44
   81758:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8175a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8175e:	bf04      	itt	eq
   81760:	2300      	moveq	r3, #0
   81762:	64a3      	streq	r3, [r4, #72]	; 0x48
   81764:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81766:	f10d 0106 	add.w	r1, sp, #6
   8176a:	a802      	add	r0, sp, #8
   8176c:	4b1f      	ldr	r3, [pc, #124]	; (817ec <xQueueGenericReceive+0x14c>)
   8176e:	4798      	blx	r3
   81770:	bb18      	cbnz	r0, 817ba <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81772:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81774:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81778:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8177a:	f1b8 0f00 	cmp.w	r8, #0
   8177e:	d116      	bne.n	817ae <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81780:	6823      	ldr	r3, [r4, #0]
   81782:	b923      	cbnz	r3, 8178e <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81784:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81786:	6860      	ldr	r0, [r4, #4]
   81788:	4b19      	ldr	r3, [pc, #100]	; (817f0 <xQueueGenericReceive+0x150>)
   8178a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   8178c:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8178e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81792:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81796:	4b17      	ldr	r3, [pc, #92]	; (817f4 <xQueueGenericReceive+0x154>)
   81798:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8179a:	4620      	mov	r0, r4
   8179c:	4b16      	ldr	r3, [pc, #88]	; (817f8 <xQueueGenericReceive+0x158>)
   8179e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   817a0:	4b16      	ldr	r3, [pc, #88]	; (817fc <xQueueGenericReceive+0x15c>)
   817a2:	4798      	blx	r3
   817a4:	2800      	cmp	r0, #0
   817a6:	d196      	bne.n	816d6 <xQueueGenericReceive+0x36>
				{
					portYIELD_WITHIN_API();
   817a8:	4b0e      	ldr	r3, [pc, #56]	; (817e4 <xQueueGenericReceive+0x144>)
   817aa:	4798      	blx	r3
   817ac:	e793      	b.n	816d6 <xQueueGenericReceive+0x36>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   817ae:	4620      	mov	r0, r4
   817b0:	4b11      	ldr	r3, [pc, #68]	; (817f8 <xQueueGenericReceive+0x158>)
   817b2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   817b4:	4b11      	ldr	r3, [pc, #68]	; (817fc <xQueueGenericReceive+0x15c>)
   817b6:	4798      	blx	r3
   817b8:	e78d      	b.n	816d6 <xQueueGenericReceive+0x36>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   817ba:	4620      	mov	r0, r4
   817bc:	4b0e      	ldr	r3, [pc, #56]	; (817f8 <xQueueGenericReceive+0x158>)
   817be:	4798      	blx	r3
			( void ) xTaskResumeAll();
   817c0:	4b0e      	ldr	r3, [pc, #56]	; (817fc <xQueueGenericReceive+0x15c>)
   817c2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   817c4:	2000      	movs	r0, #0
		}
	}
}
   817c6:	b005      	add	sp, #20
   817c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817cc:	000810a1 	.word	0x000810a1
   817d0:	000810b1 	.word	0x000810b1
   817d4:	000810d1 	.word	0x000810d1
   817d8:	0008135d 	.word	0x0008135d
   817dc:	00082179 	.word	0x00082179
   817e0:	00082035 	.word	0x00082035
   817e4:	00081091 	.word	0x00081091
   817e8:	00081b1d 	.word	0x00081b1d
   817ec:	000820e1 	.word	0x000820e1
   817f0:	000821a5 	.word	0x000821a5
   817f4:	00081f89 	.word	0x00081f89
   817f8:	00081385 	.word	0x00081385
   817fc:	00081c79 	.word	0x00081c79
   81800:	000820b9 	.word	0x000820b9

00081804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81804:	b538      	push	{r3, r4, r5, lr}
   81806:	4604      	mov	r4, r0
   81808:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8180a:	4b0d      	ldr	r3, [pc, #52]	; (81840 <vQueueWaitForMessageRestricted+0x3c>)
   8180c:	4798      	blx	r3
   8180e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81810:	f1b3 3fff 	cmp.w	r3, #4294967295
   81814:	bf04      	itt	eq
   81816:	2300      	moveq	r3, #0
   81818:	6463      	streq	r3, [r4, #68]	; 0x44
   8181a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8181c:	f1b3 3fff 	cmp.w	r3, #4294967295
   81820:	bf04      	itt	eq
   81822:	2300      	moveq	r3, #0
   81824:	64a3      	streq	r3, [r4, #72]	; 0x48
   81826:	4b07      	ldr	r3, [pc, #28]	; (81844 <vQueueWaitForMessageRestricted+0x40>)
   81828:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   8182a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8182c:	b923      	cbnz	r3, 81838 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8182e:	4629      	mov	r1, r5
   81830:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81834:	4b04      	ldr	r3, [pc, #16]	; (81848 <vQueueWaitForMessageRestricted+0x44>)
   81836:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81838:	4620      	mov	r0, r4
   8183a:	4b04      	ldr	r3, [pc, #16]	; (8184c <vQueueWaitForMessageRestricted+0x48>)
   8183c:	4798      	blx	r3
   8183e:	bd38      	pop	{r3, r4, r5, pc}
   81840:	000810b1 	.word	0x000810b1
   81844:	000810d1 	.word	0x000810d1
   81848:	00081fed 	.word	0x00081fed
   8184c:	00081385 	.word	0x00081385

00081850 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81850:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81852:	4b10      	ldr	r3, [pc, #64]	; (81894 <prvAddCurrentTaskToDelayedList+0x44>)
   81854:	681b      	ldr	r3, [r3, #0]
   81856:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81858:	4b0f      	ldr	r3, [pc, #60]	; (81898 <prvAddCurrentTaskToDelayedList+0x48>)
   8185a:	881b      	ldrh	r3, [r3, #0]
   8185c:	b29b      	uxth	r3, r3
   8185e:	4298      	cmp	r0, r3
   81860:	d207      	bcs.n	81872 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81862:	4b0e      	ldr	r3, [pc, #56]	; (8189c <prvAddCurrentTaskToDelayedList+0x4c>)
   81864:	6818      	ldr	r0, [r3, #0]
   81866:	4b0b      	ldr	r3, [pc, #44]	; (81894 <prvAddCurrentTaskToDelayedList+0x44>)
   81868:	6819      	ldr	r1, [r3, #0]
   8186a:	3104      	adds	r1, #4
   8186c:	4b0c      	ldr	r3, [pc, #48]	; (818a0 <prvAddCurrentTaskToDelayedList+0x50>)
   8186e:	4798      	blx	r3
   81870:	bd10      	pop	{r4, pc}
   81872:	4604      	mov	r4, r0
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81874:	4b0b      	ldr	r3, [pc, #44]	; (818a4 <prvAddCurrentTaskToDelayedList+0x54>)
   81876:	6818      	ldr	r0, [r3, #0]
   81878:	4b06      	ldr	r3, [pc, #24]	; (81894 <prvAddCurrentTaskToDelayedList+0x44>)
   8187a:	6819      	ldr	r1, [r3, #0]
   8187c:	3104      	adds	r1, #4
   8187e:	4b08      	ldr	r3, [pc, #32]	; (818a0 <prvAddCurrentTaskToDelayedList+0x50>)
   81880:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81882:	4b09      	ldr	r3, [pc, #36]	; (818a8 <prvAddCurrentTaskToDelayedList+0x58>)
   81884:	881b      	ldrh	r3, [r3, #0]
   81886:	b29b      	uxth	r3, r3
   81888:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   8188a:	bf3c      	itt	cc
   8188c:	4b06      	ldrcc	r3, [pc, #24]	; (818a8 <prvAddCurrentTaskToDelayedList+0x58>)
   8188e:	801c      	strhcc	r4, [r3, #0]
   81890:	bd10      	pop	{r4, pc}
   81892:	bf00      	nop
   81894:	20078ba8 	.word	0x20078ba8
   81898:	20078bc4 	.word	0x20078bc4
   8189c:	20078bc8 	.word	0x20078bc8
   818a0:	00080fd9 	.word	0x00080fd9
   818a4:	20078aa0 	.word	0x20078aa0
   818a8:	20070138 	.word	0x20070138

000818ac <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   818ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   818b0:	b083      	sub	sp, #12
   818b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   818b4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   818b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   818ba:	9001      	str	r0, [sp, #4]
   818bc:	b918      	cbnz	r0, 818c6 <xTaskGenericCreate+0x1a>
   818be:	4b62      	ldr	r3, [pc, #392]	; (81a48 <xTaskGenericCreate+0x19c>)
   818c0:	4798      	blx	r3
   818c2:	bf00      	nop
   818c4:	e7fd      	b.n	818c2 <xTaskGenericCreate+0x16>
   818c6:	4689      	mov	r9, r1
   818c8:	4615      	mov	r5, r2
   818ca:	469b      	mov	fp, r3
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   818cc:	2f09      	cmp	r7, #9
   818ce:	d903      	bls.n	818d8 <xTaskGenericCreate+0x2c>
   818d0:	4b5d      	ldr	r3, [pc, #372]	; (81a48 <xTaskGenericCreate+0x19c>)
   818d2:	4798      	blx	r3
   818d4:	bf00      	nop
   818d6:	e7fd      	b.n	818d4 <xTaskGenericCreate+0x28>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   818d8:	2050      	movs	r0, #80	; 0x50
   818da:	4b5c      	ldr	r3, [pc, #368]	; (81a4c <xTaskGenericCreate+0x1a0>)
   818dc:	4798      	blx	r3

	if( pxNewTCB != NULL )
   818de:	4604      	mov	r4, r0
   818e0:	2800      	cmp	r0, #0
   818e2:	f000 80ab 	beq.w	81a3c <xTaskGenericCreate+0x190>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   818e6:	2e00      	cmp	r6, #0
   818e8:	f040 80a5 	bne.w	81a36 <xTaskGenericCreate+0x18a>
   818ec:	00a8      	lsls	r0, r5, #2
   818ee:	4b57      	ldr	r3, [pc, #348]	; (81a4c <xTaskGenericCreate+0x1a0>)
   818f0:	4798      	blx	r3
   818f2:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   818f4:	b918      	cbnz	r0, 818fe <xTaskGenericCreate+0x52>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   818f6:	4620      	mov	r0, r4
   818f8:	4b55      	ldr	r3, [pc, #340]	; (81a50 <xTaskGenericCreate+0x1a4>)
   818fa:	4798      	blx	r3
   818fc:	e09e      	b.n	81a3c <xTaskGenericCreate+0x190>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   818fe:	00aa      	lsls	r2, r5, #2
   81900:	21a5      	movs	r1, #165	; 0xa5
   81902:	4b54      	ldr	r3, [pc, #336]	; (81a54 <xTaskGenericCreate+0x1a8>)
   81904:	4798      	blx	r3
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81906:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   8190a:	3d01      	subs	r5, #1
   8190c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8190e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   81912:	f023 0507 	bic.w	r5, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81916:	2210      	movs	r2, #16
   81918:	4649      	mov	r1, r9
   8191a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8191e:	4b4e      	ldr	r3, [pc, #312]	; (81a58 <xTaskGenericCreate+0x1ac>)
   81920:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81922:	2300      	movs	r3, #0
   81924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   81928:	463e      	mov	r6, r7
   8192a:	2f09      	cmp	r7, #9
   8192c:	bf28      	it	cs
   8192e:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   81930:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   81932:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   81934:	f104 0904 	add.w	r9, r4, #4
   81938:	4648      	mov	r0, r9
   8193a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 81aa8 <xTaskGenericCreate+0x1fc>
   8193e:	47d0      	blx	sl
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81940:	f104 0018 	add.w	r0, r4, #24
   81944:	47d0      	blx	sl

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   81946:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   81948:	f1c6 060a 	rsb	r6, r6, #10
   8194c:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8194e:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81950:	465a      	mov	r2, fp
   81952:	9901      	ldr	r1, [sp, #4]
   81954:	4628      	mov	r0, r5
   81956:	4b41      	ldr	r3, [pc, #260]	; (81a5c <xTaskGenericCreate+0x1b0>)
   81958:	4798      	blx	r3
   8195a:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8195c:	f010 0f07 	tst.w	r0, #7
   81960:	d003      	beq.n	8196a <xTaskGenericCreate+0xbe>
   81962:	4b39      	ldr	r3, [pc, #228]	; (81a48 <xTaskGenericCreate+0x19c>)
   81964:	4798      	blx	r3
   81966:	bf00      	nop
   81968:	e7fd      	b.n	81966 <xTaskGenericCreate+0xba>

		if( ( void * ) pxCreatedTask != NULL )
   8196a:	f1b8 0f00 	cmp.w	r8, #0
   8196e:	d001      	beq.n	81974 <xTaskGenericCreate+0xc8>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81970:	f8c8 4000 	str.w	r4, [r8]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81974:	4b3a      	ldr	r3, [pc, #232]	; (81a60 <xTaskGenericCreate+0x1b4>)
   81976:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81978:	4a3a      	ldr	r2, [pc, #232]	; (81a64 <xTaskGenericCreate+0x1b8>)
   8197a:	6813      	ldr	r3, [r2, #0]
   8197c:	3301      	adds	r3, #1
   8197e:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   81980:	4b39      	ldr	r3, [pc, #228]	; (81a68 <xTaskGenericCreate+0x1bc>)
   81982:	681b      	ldr	r3, [r3, #0]
   81984:	bb0b      	cbnz	r3, 819ca <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81986:	4b38      	ldr	r3, [pc, #224]	; (81a68 <xTaskGenericCreate+0x1bc>)
   81988:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8198a:	6813      	ldr	r3, [r2, #0]
   8198c:	2b01      	cmp	r3, #1
   8198e:	d126      	bne.n	819de <xTaskGenericCreate+0x132>
   81990:	4d36      	ldr	r5, [pc, #216]	; (81a6c <xTaskGenericCreate+0x1c0>)
   81992:	f105 08c8 	add.w	r8, r5, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81996:	4e36      	ldr	r6, [pc, #216]	; (81a70 <xTaskGenericCreate+0x1c4>)
   81998:	4628      	mov	r0, r5
   8199a:	47b0      	blx	r6
   8199c:	3514      	adds	r5, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8199e:	4545      	cmp	r5, r8
   819a0:	d1fa      	bne.n	81998 <xTaskGenericCreate+0xec>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   819a2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 81aac <xTaskGenericCreate+0x200>
   819a6:	4640      	mov	r0, r8
   819a8:	4d31      	ldr	r5, [pc, #196]	; (81a70 <xTaskGenericCreate+0x1c4>)
   819aa:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   819ac:	4e31      	ldr	r6, [pc, #196]	; (81a74 <xTaskGenericCreate+0x1c8>)
   819ae:	4630      	mov	r0, r6
   819b0:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   819b2:	4831      	ldr	r0, [pc, #196]	; (81a78 <xTaskGenericCreate+0x1cc>)
   819b4:	47a8      	blx	r5

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   819b6:	4831      	ldr	r0, [pc, #196]	; (81a7c <xTaskGenericCreate+0x1d0>)
   819b8:	47a8      	blx	r5
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   819ba:	4831      	ldr	r0, [pc, #196]	; (81a80 <xTaskGenericCreate+0x1d4>)
   819bc:	47a8      	blx	r5
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   819be:	4b31      	ldr	r3, [pc, #196]	; (81a84 <xTaskGenericCreate+0x1d8>)
   819c0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   819c4:	4b30      	ldr	r3, [pc, #192]	; (81a88 <xTaskGenericCreate+0x1dc>)
   819c6:	601e      	str	r6, [r3, #0]
   819c8:	e009      	b.n	819de <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   819ca:	4b30      	ldr	r3, [pc, #192]	; (81a8c <xTaskGenericCreate+0x1e0>)
   819cc:	681b      	ldr	r3, [r3, #0]
   819ce:	b933      	cbnz	r3, 819de <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   819d0:	4b25      	ldr	r3, [pc, #148]	; (81a68 <xTaskGenericCreate+0x1bc>)
   819d2:	681b      	ldr	r3, [r3, #0]
   819d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   819d6:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
   819d8:	bf24      	itt	cs
   819da:	4b23      	ldrcs	r3, [pc, #140]	; (81a68 <xTaskGenericCreate+0x1bc>)
   819dc:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   819de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   819e0:	4b2b      	ldr	r3, [pc, #172]	; (81a90 <xTaskGenericCreate+0x1e4>)
   819e2:	681b      	ldr	r3, [r3, #0]
   819e4:	4298      	cmp	r0, r3
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   819e6:	bf84      	itt	hi
   819e8:	4b29      	ldrhi	r3, [pc, #164]	; (81a90 <xTaskGenericCreate+0x1e4>)
   819ea:	6018      	strhi	r0, [r3, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   819ec:	4a29      	ldr	r2, [pc, #164]	; (81a94 <xTaskGenericCreate+0x1e8>)
   819ee:	6813      	ldr	r3, [r2, #0]
   819f0:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   819f2:	3301      	adds	r3, #1
   819f4:	6013      	str	r3, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   819f6:	4b28      	ldr	r3, [pc, #160]	; (81a98 <xTaskGenericCreate+0x1ec>)
   819f8:	681b      	ldr	r3, [r3, #0]
   819fa:	4298      	cmp	r0, r3
   819fc:	bf84      	itt	hi
   819fe:	4b26      	ldrhi	r3, [pc, #152]	; (81a98 <xTaskGenericCreate+0x1ec>)
   81a00:	6018      	strhi	r0, [r3, #0]
   81a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81a06:	4649      	mov	r1, r9
   81a08:	4b18      	ldr	r3, [pc, #96]	; (81a6c <xTaskGenericCreate+0x1c0>)
   81a0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81a0e:	4b23      	ldr	r3, [pc, #140]	; (81a9c <xTaskGenericCreate+0x1f0>)
   81a10:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81a12:	4b23      	ldr	r3, [pc, #140]	; (81aa0 <xTaskGenericCreate+0x1f4>)
   81a14:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81a16:	4b1d      	ldr	r3, [pc, #116]	; (81a8c <xTaskGenericCreate+0x1e0>)
   81a18:	681b      	ldr	r3, [r3, #0]
   81a1a:	b143      	cbz	r3, 81a2e <xTaskGenericCreate+0x182>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   81a1c:	4b12      	ldr	r3, [pc, #72]	; (81a68 <xTaskGenericCreate+0x1bc>)
   81a1e:	681b      	ldr	r3, [r3, #0]
   81a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81a22:	429f      	cmp	r7, r3
   81a24:	d905      	bls.n	81a32 <xTaskGenericCreate+0x186>
			{
				portYIELD_WITHIN_API();
   81a26:	4b1f      	ldr	r3, [pc, #124]	; (81aa4 <xTaskGenericCreate+0x1f8>)
   81a28:	4798      	blx	r3
   81a2a:	2001      	movs	r0, #1
   81a2c:	e008      	b.n	81a40 <xTaskGenericCreate+0x194>
   81a2e:	2001      	movs	r0, #1
   81a30:	e006      	b.n	81a40 <xTaskGenericCreate+0x194>
   81a32:	2001      	movs	r0, #1
   81a34:	e004      	b.n	81a40 <xTaskGenericCreate+0x194>
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81a36:	6306      	str	r6, [r0, #48]	; 0x30
   81a38:	4630      	mov	r0, r6
   81a3a:	e760      	b.n	818fe <xTaskGenericCreate+0x52>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81a3c:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81a40:	b003      	add	sp, #12
   81a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a46:	bf00      	nop
   81a48:	000810a1 	.word	0x000810a1
   81a4c:	000811f9 	.word	0x000811f9
   81a50:	000812c1 	.word	0x000812c1
   81a54:	000832ad 	.word	0x000832ad
   81a58:	00083505 	.word	0x00083505
   81a5c:	00081055 	.word	0x00081055
   81a60:	000810b1 	.word	0x000810b1
   81a64:	20078be8 	.word	0x20078be8
   81a68:	20078ba8 	.word	0x20078ba8
   81a6c:	20078adc 	.word	0x20078adc
   81a70:	00080f9d 	.word	0x00080f9d
   81a74:	20078ac4 	.word	0x20078ac4
   81a78:	20078bac 	.word	0x20078bac
   81a7c:	20078ab0 	.word	0x20078ab0
   81a80:	20078a8c 	.word	0x20078a8c
   81a84:	20078aa0 	.word	0x20078aa0
   81a88:	20078bc8 	.word	0x20078bc8
   81a8c:	20078aa8 	.word	0x20078aa8
   81a90:	20078bec 	.word	0x20078bec
   81a94:	20078bcc 	.word	0x20078bcc
   81a98:	20078ad8 	.word	0x20078ad8
   81a9c:	00080fbd 	.word	0x00080fbd
   81aa0:	000810d1 	.word	0x000810d1
   81aa4:	00081091 	.word	0x00081091
   81aa8:	00080fb5 	.word	0x00080fb5
   81aac:	20078bd0 	.word	0x20078bd0

00081ab0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81ab0:	b510      	push	{r4, lr}
   81ab2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81ab4:	2300      	movs	r3, #0
   81ab6:	9303      	str	r3, [sp, #12]
   81ab8:	9302      	str	r3, [sp, #8]
   81aba:	9301      	str	r3, [sp, #4]
   81abc:	9300      	str	r3, [sp, #0]
   81abe:	f44f 7280 	mov.w	r2, #256	; 0x100
   81ac2:	490e      	ldr	r1, [pc, #56]	; (81afc <vTaskStartScheduler+0x4c>)
   81ac4:	480e      	ldr	r0, [pc, #56]	; (81b00 <vTaskStartScheduler+0x50>)
   81ac6:	4c0f      	ldr	r4, [pc, #60]	; (81b04 <vTaskStartScheduler+0x54>)
   81ac8:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81aca:	2801      	cmp	r0, #1
   81acc:	d10e      	bne.n	81aec <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81ace:	4b0e      	ldr	r3, [pc, #56]	; (81b08 <vTaskStartScheduler+0x58>)
   81ad0:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81ad2:	2801      	cmp	r0, #1
   81ad4:	d10a      	bne.n	81aec <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81ad6:	4b0d      	ldr	r3, [pc, #52]	; (81b0c <vTaskStartScheduler+0x5c>)
   81ad8:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81ada:	2201      	movs	r2, #1
   81adc:	4b0c      	ldr	r3, [pc, #48]	; (81b10 <vTaskStartScheduler+0x60>)
   81ade:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81ae0:	2200      	movs	r2, #0
   81ae2:	4b0c      	ldr	r3, [pc, #48]	; (81b14 <vTaskStartScheduler+0x64>)
   81ae4:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   81ae6:	4b0c      	ldr	r3, [pc, #48]	; (81b18 <vTaskStartScheduler+0x68>)
   81ae8:	4798      	blx	r3
   81aea:	e004      	b.n	81af6 <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81aec:	b918      	cbnz	r0, 81af6 <vTaskStartScheduler+0x46>
   81aee:	4b07      	ldr	r3, [pc, #28]	; (81b0c <vTaskStartScheduler+0x5c>)
   81af0:	4798      	blx	r3
   81af2:	bf00      	nop
   81af4:	e7fd      	b.n	81af2 <vTaskStartScheduler+0x42>
}
   81af6:	b004      	add	sp, #16
   81af8:	bd10      	pop	{r4, pc}
   81afa:	bf00      	nop
   81afc:	000860fc 	.word	0x000860fc
   81b00:	00081e61 	.word	0x00081e61
   81b04:	000818ad 	.word	0x000818ad
   81b08:	0008231d 	.word	0x0008231d
   81b0c:	000810a1 	.word	0x000810a1
   81b10:	20078aa8 	.word	0x20078aa8
   81b14:	20078bc4 	.word	0x20078bc4
   81b18:	0008116d 	.word	0x0008116d

00081b1c <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   81b1c:	4a02      	ldr	r2, [pc, #8]	; (81b28 <vTaskSuspendAll+0xc>)
   81b1e:	6813      	ldr	r3, [r2, #0]
   81b20:	3301      	adds	r3, #1
   81b22:	6013      	str	r3, [r2, #0]
   81b24:	4770      	bx	lr
   81b26:	bf00      	nop
   81b28:	20078ba4 	.word	0x20078ba4

00081b2c <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   81b2c:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   81b2e:	4b04      	ldr	r3, [pc, #16]	; (81b40 <xTaskGetTickCount+0x14>)
   81b30:	4798      	blx	r3
	{
		xTicks = xTickCount;
   81b32:	4b04      	ldr	r3, [pc, #16]	; (81b44 <xTaskGetTickCount+0x18>)
   81b34:	881c      	ldrh	r4, [r3, #0]
   81b36:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   81b38:	4b03      	ldr	r3, [pc, #12]	; (81b48 <xTaskGetTickCount+0x1c>)
   81b3a:	4798      	blx	r3

	return xTicks;
}
   81b3c:	4620      	mov	r0, r4
   81b3e:	bd10      	pop	{r4, pc}
   81b40:	000810b1 	.word	0x000810b1
   81b44:	20078bc4 	.word	0x20078bc4
   81b48:	000810d1 	.word	0x000810d1

00081b4c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81b50:	4b3d      	ldr	r3, [pc, #244]	; (81c48 <vTaskIncrementTick+0xfc>)
   81b52:	681b      	ldr	r3, [r3, #0]
   81b54:	2b00      	cmp	r3, #0
   81b56:	d171      	bne.n	81c3c <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   81b58:	4a3c      	ldr	r2, [pc, #240]	; (81c4c <vTaskIncrementTick+0x100>)
   81b5a:	8813      	ldrh	r3, [r2, #0]
   81b5c:	3301      	adds	r3, #1
   81b5e:	b29b      	uxth	r3, r3
   81b60:	8013      	strh	r3, [r2, #0]
		if( xTickCount == ( portTickType ) 0U )
   81b62:	8813      	ldrh	r3, [r2, #0]
   81b64:	b29b      	uxth	r3, r3
   81b66:	bb03      	cbnz	r3, 81baa <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81b68:	4b39      	ldr	r3, [pc, #228]	; (81c50 <vTaskIncrementTick+0x104>)
   81b6a:	681b      	ldr	r3, [r3, #0]
   81b6c:	681b      	ldr	r3, [r3, #0]
   81b6e:	b11b      	cbz	r3, 81b78 <vTaskIncrementTick+0x2c>
   81b70:	4b38      	ldr	r3, [pc, #224]	; (81c54 <vTaskIncrementTick+0x108>)
   81b72:	4798      	blx	r3
   81b74:	bf00      	nop
   81b76:	e7fd      	b.n	81b74 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   81b78:	4b35      	ldr	r3, [pc, #212]	; (81c50 <vTaskIncrementTick+0x104>)
   81b7a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81b7c:	4a36      	ldr	r2, [pc, #216]	; (81c58 <vTaskIncrementTick+0x10c>)
   81b7e:	6810      	ldr	r0, [r2, #0]
   81b80:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81b82:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81b84:	4935      	ldr	r1, [pc, #212]	; (81c5c <vTaskIncrementTick+0x110>)
   81b86:	680a      	ldr	r2, [r1, #0]
   81b88:	3201      	adds	r2, #1
   81b8a:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81b8c:	681b      	ldr	r3, [r3, #0]
   81b8e:	681b      	ldr	r3, [r3, #0]
   81b90:	b923      	cbnz	r3, 81b9c <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81b96:	4b32      	ldr	r3, [pc, #200]	; (81c60 <vTaskIncrementTick+0x114>)
   81b98:	801a      	strh	r2, [r3, #0]
   81b9a:	e006      	b.n	81baa <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81b9c:	4b2c      	ldr	r3, [pc, #176]	; (81c50 <vTaskIncrementTick+0x104>)
   81b9e:	681b      	ldr	r3, [r3, #0]
   81ba0:	68db      	ldr	r3, [r3, #12]
   81ba2:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81ba4:	889a      	ldrh	r2, [r3, #4]
   81ba6:	4b2e      	ldr	r3, [pc, #184]	; (81c60 <vTaskIncrementTick+0x114>)
   81ba8:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   81baa:	4b28      	ldr	r3, [pc, #160]	; (81c4c <vTaskIncrementTick+0x100>)
   81bac:	881a      	ldrh	r2, [r3, #0]
   81bae:	b292      	uxth	r2, r2
   81bb0:	4b2b      	ldr	r3, [pc, #172]	; (81c60 <vTaskIncrementTick+0x114>)
   81bb2:	881b      	ldrh	r3, [r3, #0]
   81bb4:	b29b      	uxth	r3, r3
   81bb6:	429a      	cmp	r2, r3
   81bb8:	d344      	bcc.n	81c44 <vTaskIncrementTick+0xf8>
   81bba:	4b25      	ldr	r3, [pc, #148]	; (81c50 <vTaskIncrementTick+0x104>)
   81bbc:	681b      	ldr	r3, [r3, #0]
   81bbe:	681b      	ldr	r3, [r3, #0]
   81bc0:	b16b      	cbz	r3, 81bde <vTaskIncrementTick+0x92>
   81bc2:	4b23      	ldr	r3, [pc, #140]	; (81c50 <vTaskIncrementTick+0x104>)
   81bc4:	681b      	ldr	r3, [r3, #0]
   81bc6:	68db      	ldr	r3, [r3, #12]
   81bc8:	68dc      	ldr	r4, [r3, #12]
   81bca:	88a2      	ldrh	r2, [r4, #4]
   81bcc:	4b1f      	ldr	r3, [pc, #124]	; (81c4c <vTaskIncrementTick+0x100>)
   81bce:	881b      	ldrh	r3, [r3, #0]
   81bd0:	b29b      	uxth	r3, r3
   81bd2:	429a      	cmp	r2, r3
   81bd4:	d813      	bhi.n	81bfe <vTaskIncrementTick+0xb2>
   81bd6:	4d23      	ldr	r5, [pc, #140]	; (81c64 <vTaskIncrementTick+0x118>)
   81bd8:	4e23      	ldr	r6, [pc, #140]	; (81c68 <vTaskIncrementTick+0x11c>)
   81bda:	4f24      	ldr	r7, [pc, #144]	; (81c6c <vTaskIncrementTick+0x120>)
   81bdc:	e013      	b.n	81c06 <vTaskIncrementTick+0xba>
   81bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81be2:	4b1f      	ldr	r3, [pc, #124]	; (81c60 <vTaskIncrementTick+0x114>)
   81be4:	801a      	strh	r2, [r3, #0]
   81be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81bea:	4b19      	ldr	r3, [pc, #100]	; (81c50 <vTaskIncrementTick+0x104>)
   81bec:	681b      	ldr	r3, [r3, #0]
   81bee:	68db      	ldr	r3, [r3, #12]
   81bf0:	68dc      	ldr	r4, [r3, #12]
   81bf2:	88a2      	ldrh	r2, [r4, #4]
   81bf4:	4b15      	ldr	r3, [pc, #84]	; (81c4c <vTaskIncrementTick+0x100>)
   81bf6:	881b      	ldrh	r3, [r3, #0]
   81bf8:	b29b      	uxth	r3, r3
   81bfa:	429a      	cmp	r2, r3
   81bfc:	d903      	bls.n	81c06 <vTaskIncrementTick+0xba>
   81bfe:	4b18      	ldr	r3, [pc, #96]	; (81c60 <vTaskIncrementTick+0x114>)
   81c00:	801a      	strh	r2, [r3, #0]
   81c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c06:	f104 0804 	add.w	r8, r4, #4
   81c0a:	4640      	mov	r0, r8
   81c0c:	47a8      	blx	r5
   81c0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81c10:	b113      	cbz	r3, 81c18 <vTaskIncrementTick+0xcc>
   81c12:	f104 0018 	add.w	r0, r4, #24
   81c16:	47a8      	blx	r5
   81c18:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81c1a:	6833      	ldr	r3, [r6, #0]
   81c1c:	4298      	cmp	r0, r3
   81c1e:	bf88      	it	hi
   81c20:	6030      	strhi	r0, [r6, #0]
   81c22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81c26:	4641      	mov	r1, r8
   81c28:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   81c2c:	4b10      	ldr	r3, [pc, #64]	; (81c70 <vTaskIncrementTick+0x124>)
   81c2e:	4798      	blx	r3
   81c30:	4b07      	ldr	r3, [pc, #28]	; (81c50 <vTaskIncrementTick+0x104>)
   81c32:	681b      	ldr	r3, [r3, #0]
   81c34:	681b      	ldr	r3, [r3, #0]
   81c36:	2b00      	cmp	r3, #0
   81c38:	d1d7      	bne.n	81bea <vTaskIncrementTick+0x9e>
   81c3a:	e7d0      	b.n	81bde <vTaskIncrementTick+0x92>
	}
	else
	{
		++uxMissedTicks;
   81c3c:	4a0d      	ldr	r2, [pc, #52]	; (81c74 <vTaskIncrementTick+0x128>)
   81c3e:	6813      	ldr	r3, [r2, #0]
   81c40:	3301      	adds	r3, #1
   81c42:	6013      	str	r3, [r2, #0]
   81c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c48:	20078ba4 	.word	0x20078ba4
   81c4c:	20078bc4 	.word	0x20078bc4
   81c50:	20078aa0 	.word	0x20078aa0
   81c54:	000810a1 	.word	0x000810a1
   81c58:	20078bc8 	.word	0x20078bc8
   81c5c:	20078bc0 	.word	0x20078bc0
   81c60:	20070138 	.word	0x20070138
   81c64:	00081019 	.word	0x00081019
   81c68:	20078ad8 	.word	0x20078ad8
   81c6c:	20078adc 	.word	0x20078adc
   81c70:	00080fbd 	.word	0x00080fbd
   81c74:	20078aa4 	.word	0x20078aa4

00081c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81c7c:	4b30      	ldr	r3, [pc, #192]	; (81d40 <xTaskResumeAll+0xc8>)
   81c7e:	681b      	ldr	r3, [r3, #0]
   81c80:	b91b      	cbnz	r3, 81c8a <xTaskResumeAll+0x12>
   81c82:	4b30      	ldr	r3, [pc, #192]	; (81d44 <xTaskResumeAll+0xcc>)
   81c84:	4798      	blx	r3
   81c86:	bf00      	nop
   81c88:	e7fd      	b.n	81c86 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81c8a:	4b2f      	ldr	r3, [pc, #188]	; (81d48 <xTaskResumeAll+0xd0>)
   81c8c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81c8e:	4b2c      	ldr	r3, [pc, #176]	; (81d40 <xTaskResumeAll+0xc8>)
   81c90:	681a      	ldr	r2, [r3, #0]
   81c92:	3a01      	subs	r2, #1
   81c94:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81c96:	681b      	ldr	r3, [r3, #0]
   81c98:	2b00      	cmp	r3, #0
   81c9a:	d149      	bne.n	81d30 <xTaskResumeAll+0xb8>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81c9c:	4b2b      	ldr	r3, [pc, #172]	; (81d4c <xTaskResumeAll+0xd4>)
   81c9e:	681b      	ldr	r3, [r3, #0]
   81ca0:	bb03      	cbnz	r3, 81ce4 <xTaskResumeAll+0x6c>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81ca2:	2400      	movs	r4, #0
   81ca4:	e047      	b.n	81d36 <xTaskResumeAll+0xbe>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81ca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81caa:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81cac:	f104 0018 	add.w	r0, r4, #24
   81cb0:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81cb2:	f104 0904 	add.w	r9, r4, #4
   81cb6:	4648      	mov	r0, r9
   81cb8:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81cba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81cbc:	6833      	ldr	r3, [r6, #0]
   81cbe:	4298      	cmp	r0, r3
   81cc0:	bf88      	it	hi
   81cc2:	6030      	strhi	r0, [r6, #0]
   81cc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81cc8:	4649      	mov	r1, r9
   81cca:	4b21      	ldr	r3, [pc, #132]	; (81d50 <xTaskResumeAll+0xd8>)
   81ccc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81cd0:	4b20      	ldr	r3, [pc, #128]	; (81d54 <xTaskResumeAll+0xdc>)
   81cd2:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81cd4:	4b20      	ldr	r3, [pc, #128]	; (81d58 <xTaskResumeAll+0xe0>)
   81cd6:	681b      	ldr	r3, [r3, #0]
   81cd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81cdc:	429a      	cmp	r2, r3
   81cde:	bf28      	it	cs
   81ce0:	2501      	movcs	r5, #1
   81ce2:	e004      	b.n	81cee <xTaskResumeAll+0x76>
   81ce4:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81ce6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 81d78 <xTaskResumeAll+0x100>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81cea:	4f1c      	ldr	r7, [pc, #112]	; (81d5c <xTaskResumeAll+0xe4>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81cec:	4e1c      	ldr	r6, [pc, #112]	; (81d60 <xTaskResumeAll+0xe8>)
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81cee:	f8d8 3000 	ldr.w	r3, [r8]
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d1d7      	bne.n	81ca6 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81cf6:	4b1b      	ldr	r3, [pc, #108]	; (81d64 <xTaskResumeAll+0xec>)
   81cf8:	681b      	ldr	r3, [r3, #0]
   81cfa:	b163      	cbz	r3, 81d16 <xTaskResumeAll+0x9e>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81cfc:	4b19      	ldr	r3, [pc, #100]	; (81d64 <xTaskResumeAll+0xec>)
   81cfe:	681b      	ldr	r3, [r3, #0]
   81d00:	b17b      	cbz	r3, 81d22 <xTaskResumeAll+0xaa>
					{
						vTaskIncrementTick();
   81d02:	4d19      	ldr	r5, [pc, #100]	; (81d68 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81d04:	4c17      	ldr	r4, [pc, #92]	; (81d64 <xTaskResumeAll+0xec>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81d06:	47a8      	blx	r5
						--uxMissedTicks;
   81d08:	6823      	ldr	r3, [r4, #0]
   81d0a:	3b01      	subs	r3, #1
   81d0c:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81d0e:	6823      	ldr	r3, [r4, #0]
   81d10:	2b00      	cmp	r3, #0
   81d12:	d1f8      	bne.n	81d06 <xTaskResumeAll+0x8e>
   81d14:	e005      	b.n	81d22 <xTaskResumeAll+0xaa>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81d16:	2d01      	cmp	r5, #1
   81d18:	d003      	beq.n	81d22 <xTaskResumeAll+0xaa>
   81d1a:	4b14      	ldr	r3, [pc, #80]	; (81d6c <xTaskResumeAll+0xf4>)
   81d1c:	681b      	ldr	r3, [r3, #0]
   81d1e:	2b01      	cmp	r3, #1
   81d20:	d108      	bne.n	81d34 <xTaskResumeAll+0xbc>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   81d22:	2200      	movs	r2, #0
   81d24:	4b11      	ldr	r3, [pc, #68]	; (81d6c <xTaskResumeAll+0xf4>)
   81d26:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81d28:	4b11      	ldr	r3, [pc, #68]	; (81d70 <xTaskResumeAll+0xf8>)
   81d2a:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   81d2c:	2401      	movs	r4, #1
   81d2e:	e002      	b.n	81d36 <xTaskResumeAll+0xbe>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81d30:	2400      	movs	r4, #0
   81d32:	e000      	b.n	81d36 <xTaskResumeAll+0xbe>
   81d34:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   81d36:	4b0f      	ldr	r3, [pc, #60]	; (81d74 <xTaskResumeAll+0xfc>)
   81d38:	4798      	blx	r3

	return xAlreadyYielded;
}
   81d3a:	4620      	mov	r0, r4
   81d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81d40:	20078ba4 	.word	0x20078ba4
   81d44:	000810a1 	.word	0x000810a1
   81d48:	000810b1 	.word	0x000810b1
   81d4c:	20078be8 	.word	0x20078be8
   81d50:	20078adc 	.word	0x20078adc
   81d54:	00080fbd 	.word	0x00080fbd
   81d58:	20078ba8 	.word	0x20078ba8
   81d5c:	00081019 	.word	0x00081019
   81d60:	20078ad8 	.word	0x20078ad8
   81d64:	20078aa4 	.word	0x20078aa4
   81d68:	00081b4d 	.word	0x00081b4d
   81d6c:	20078be4 	.word	0x20078be4
   81d70:	00081091 	.word	0x00081091
   81d74:	000810d1 	.word	0x000810d1
   81d78:	20078bac 	.word	0x20078bac

00081d7c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81d7c:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81d7e:	b918      	cbnz	r0, 81d88 <vTaskDelayUntil+0xc>
   81d80:	4b1c      	ldr	r3, [pc, #112]	; (81df4 <vTaskDelayUntil+0x78>)
   81d82:	4798      	blx	r3
   81d84:	bf00      	nop
   81d86:	e7fd      	b.n	81d84 <vTaskDelayUntil+0x8>
   81d88:	460c      	mov	r4, r1
   81d8a:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81d8c:	b919      	cbnz	r1, 81d96 <vTaskDelayUntil+0x1a>
   81d8e:	4b19      	ldr	r3, [pc, #100]	; (81df4 <vTaskDelayUntil+0x78>)
   81d90:	4798      	blx	r3
   81d92:	bf00      	nop
   81d94:	e7fd      	b.n	81d92 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81d96:	4b18      	ldr	r3, [pc, #96]	; (81df8 <vTaskDelayUntil+0x7c>)
   81d98:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81d9a:	882b      	ldrh	r3, [r5, #0]
   81d9c:	441c      	add	r4, r3
   81d9e:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81da0:	4a16      	ldr	r2, [pc, #88]	; (81dfc <vTaskDelayUntil+0x80>)
   81da2:	8812      	ldrh	r2, [r2, #0]
   81da4:	b292      	uxth	r2, r2
   81da6:	4293      	cmp	r3, r2
   81da8:	d908      	bls.n	81dbc <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81daa:	42a3      	cmp	r3, r4
   81dac:	d91e      	bls.n	81dec <vTaskDelayUntil+0x70>
   81dae:	4b13      	ldr	r3, [pc, #76]	; (81dfc <vTaskDelayUntil+0x80>)
   81db0:	881b      	ldrh	r3, [r3, #0]
   81db2:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81db4:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81db6:	429c      	cmp	r4, r3
   81db8:	d910      	bls.n	81ddc <vTaskDelayUntil+0x60>
   81dba:	e007      	b.n	81dcc <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81dbc:	42a3      	cmp	r3, r4
   81dbe:	d813      	bhi.n	81de8 <vTaskDelayUntil+0x6c>
   81dc0:	4b0e      	ldr	r3, [pc, #56]	; (81dfc <vTaskDelayUntil+0x80>)
   81dc2:	881b      	ldrh	r3, [r3, #0]
   81dc4:	b29b      	uxth	r3, r3
   81dc6:	429c      	cmp	r4, r3
   81dc8:	d80e      	bhi.n	81de8 <vTaskDelayUntil+0x6c>
   81dca:	e00f      	b.n	81dec <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81dcc:	4b0c      	ldr	r3, [pc, #48]	; (81e00 <vTaskDelayUntil+0x84>)
   81dce:	6818      	ldr	r0, [r3, #0]
   81dd0:	3004      	adds	r0, #4
   81dd2:	4b0c      	ldr	r3, [pc, #48]	; (81e04 <vTaskDelayUntil+0x88>)
   81dd4:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81dd6:	4620      	mov	r0, r4
   81dd8:	4b0b      	ldr	r3, [pc, #44]	; (81e08 <vTaskDelayUntil+0x8c>)
   81dda:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81ddc:	4b0b      	ldr	r3, [pc, #44]	; (81e0c <vTaskDelayUntil+0x90>)
   81dde:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81de0:	b930      	cbnz	r0, 81df0 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   81de2:	4b0b      	ldr	r3, [pc, #44]	; (81e10 <vTaskDelayUntil+0x94>)
   81de4:	4798      	blx	r3
		}
	}
   81de6:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81de8:	802c      	strh	r4, [r5, #0]
   81dea:	e7ef      	b.n	81dcc <vTaskDelayUntil+0x50>
   81dec:	802c      	strh	r4, [r5, #0]
   81dee:	e7f5      	b.n	81ddc <vTaskDelayUntil+0x60>
   81df0:	bd38      	pop	{r3, r4, r5, pc}
   81df2:	bf00      	nop
   81df4:	000810a1 	.word	0x000810a1
   81df8:	00081b1d 	.word	0x00081b1d
   81dfc:	20078bc4 	.word	0x20078bc4
   81e00:	20078ba8 	.word	0x20078ba8
   81e04:	00081019 	.word	0x00081019
   81e08:	00081851 	.word	0x00081851
   81e0c:	00081c79 	.word	0x00081c79
   81e10:	00081091 	.word	0x00081091

00081e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   81e14:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   81e16:	b188      	cbz	r0, 81e3c <vTaskDelay+0x28>
   81e18:	4604      	mov	r4, r0
		{
			vTaskSuspendAll();
   81e1a:	4b0a      	ldr	r3, [pc, #40]	; (81e44 <vTaskDelay+0x30>)
   81e1c:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   81e1e:	4b0a      	ldr	r3, [pc, #40]	; (81e48 <vTaskDelay+0x34>)
   81e20:	881b      	ldrh	r3, [r3, #0]
   81e22:	441c      	add	r4, r3
   81e24:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81e26:	4b09      	ldr	r3, [pc, #36]	; (81e4c <vTaskDelay+0x38>)
   81e28:	6818      	ldr	r0, [r3, #0]
   81e2a:	3004      	adds	r0, #4
   81e2c:	4b08      	ldr	r3, [pc, #32]	; (81e50 <vTaskDelay+0x3c>)
   81e2e:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81e30:	4620      	mov	r0, r4
   81e32:	4b08      	ldr	r3, [pc, #32]	; (81e54 <vTaskDelay+0x40>)
   81e34:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   81e36:	4b08      	ldr	r3, [pc, #32]	; (81e58 <vTaskDelay+0x44>)
   81e38:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81e3a:	b908      	cbnz	r0, 81e40 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   81e3c:	4b07      	ldr	r3, [pc, #28]	; (81e5c <vTaskDelay+0x48>)
   81e3e:	4798      	blx	r3
   81e40:	bd10      	pop	{r4, pc}
   81e42:	bf00      	nop
   81e44:	00081b1d 	.word	0x00081b1d
   81e48:	20078bc4 	.word	0x20078bc4
   81e4c:	20078ba8 	.word	0x20078ba8
   81e50:	00081019 	.word	0x00081019
   81e54:	00081851 	.word	0x00081851
   81e58:	00081c79 	.word	0x00081c79
   81e5c:	00081091 	.word	0x00081091

00081e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81e60:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81e62:	4d15      	ldr	r5, [pc, #84]	; (81eb8 <prvIdleTask+0x58>)
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81e64:	4f15      	ldr	r7, [pc, #84]	; (81ebc <prvIdleTask+0x5c>)

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81e66:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81edc <prvIdleTask+0x7c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
			xTaskResumeAll();
   81e6a:	4e15      	ldr	r6, [pc, #84]	; (81ec0 <prvIdleTask+0x60>)
   81e6c:	e019      	b.n	81ea2 <prvIdleTask+0x42>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81e6e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81e70:	683c      	ldr	r4, [r7, #0]
			xTaskResumeAll();
   81e72:	47b0      	blx	r6

			if( xListIsEmpty == pdFALSE )
   81e74:	b1ac      	cbz	r4, 81ea2 <prvIdleTask+0x42>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81e76:	4b13      	ldr	r3, [pc, #76]	; (81ec4 <prvIdleTask+0x64>)
   81e78:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81e7a:	68fb      	ldr	r3, [r7, #12]
   81e7c:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81e7e:	1d20      	adds	r0, r4, #4
   81e80:	4b11      	ldr	r3, [pc, #68]	; (81ec8 <prvIdleTask+0x68>)
   81e82:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81e84:	4a11      	ldr	r2, [pc, #68]	; (81ecc <prvIdleTask+0x6c>)
   81e86:	6813      	ldr	r3, [r2, #0]
   81e88:	3b01      	subs	r3, #1
   81e8a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81e8c:	682b      	ldr	r3, [r5, #0]
   81e8e:	3b01      	subs	r3, #1
   81e90:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81e92:	4b0f      	ldr	r3, [pc, #60]	; (81ed0 <prvIdleTask+0x70>)
   81e94:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81e96:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81e98:	f8df 9044 	ldr.w	r9, [pc, #68]	; 81ee0 <prvIdleTask+0x80>
   81e9c:	47c8      	blx	r9
		vPortFree( pxTCB );
   81e9e:	4620      	mov	r0, r4
   81ea0:	47c8      	blx	r9
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81ea2:	682b      	ldr	r3, [r5, #0]
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d1e2      	bne.n	81e6e <prvIdleTask+0xe>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81ea8:	4b0a      	ldr	r3, [pc, #40]	; (81ed4 <prvIdleTask+0x74>)
   81eaa:	681b      	ldr	r3, [r3, #0]
   81eac:	2b01      	cmp	r3, #1
   81eae:	d9dc      	bls.n	81e6a <prvIdleTask+0xa>
			{
				taskYIELD();
   81eb0:	4b09      	ldr	r3, [pc, #36]	; (81ed8 <prvIdleTask+0x78>)
   81eb2:	4798      	blx	r3
   81eb4:	e7d7      	b.n	81e66 <prvIdleTask+0x6>
   81eb6:	bf00      	nop
   81eb8:	20078aac 	.word	0x20078aac
   81ebc:	20078ab0 	.word	0x20078ab0
   81ec0:	00081c79 	.word	0x00081c79
   81ec4:	000810b1 	.word	0x000810b1
   81ec8:	00081019 	.word	0x00081019
   81ecc:	20078be8 	.word	0x20078be8
   81ed0:	000810d1 	.word	0x000810d1
   81ed4:	20078adc 	.word	0x20078adc
   81ed8:	00081091 	.word	0x00081091
   81edc:	00081b1d 	.word	0x00081b1d
   81ee0:	000812c1 	.word	0x000812c1

00081ee4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81ee4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81ee6:	4b22      	ldr	r3, [pc, #136]	; (81f70 <vTaskSwitchContext+0x8c>)
   81ee8:	681b      	ldr	r3, [r3, #0]
   81eea:	b96b      	cbnz	r3, 81f08 <vTaskSwitchContext+0x24>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81eec:	4b21      	ldr	r3, [pc, #132]	; (81f74 <vTaskSwitchContext+0x90>)
   81eee:	681b      	ldr	r3, [r3, #0]
   81ef0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ef4:	009b      	lsls	r3, r3, #2
   81ef6:	4a20      	ldr	r2, [pc, #128]	; (81f78 <vTaskSwitchContext+0x94>)
   81ef8:	58d3      	ldr	r3, [r2, r3]
   81efa:	b9cb      	cbnz	r3, 81f30 <vTaskSwitchContext+0x4c>
   81efc:	4b1d      	ldr	r3, [pc, #116]	; (81f74 <vTaskSwitchContext+0x90>)
   81efe:	681b      	ldr	r3, [r3, #0]
   81f00:	b143      	cbz	r3, 81f14 <vTaskSwitchContext+0x30>
   81f02:	4a1c      	ldr	r2, [pc, #112]	; (81f74 <vTaskSwitchContext+0x90>)
   81f04:	491c      	ldr	r1, [pc, #112]	; (81f78 <vTaskSwitchContext+0x94>)
   81f06:	e009      	b.n	81f1c <vTaskSwitchContext+0x38>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81f08:	2201      	movs	r2, #1
   81f0a:	4b1c      	ldr	r3, [pc, #112]	; (81f7c <vTaskSwitchContext+0x98>)
   81f0c:	601a      	str	r2, [r3, #0]
   81f0e:	bd10      	pop	{r4, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81f10:	6813      	ldr	r3, [r2, #0]
   81f12:	b91b      	cbnz	r3, 81f1c <vTaskSwitchContext+0x38>
   81f14:	4b1a      	ldr	r3, [pc, #104]	; (81f80 <vTaskSwitchContext+0x9c>)
   81f16:	4798      	blx	r3
   81f18:	bf00      	nop
   81f1a:	e7fd      	b.n	81f18 <vTaskSwitchContext+0x34>
   81f1c:	6813      	ldr	r3, [r2, #0]
   81f1e:	3b01      	subs	r3, #1
   81f20:	6013      	str	r3, [r2, #0]
   81f22:	6813      	ldr	r3, [r2, #0]
   81f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81f2c:	2b00      	cmp	r3, #0
   81f2e:	d0ef      	beq.n	81f10 <vTaskSwitchContext+0x2c>
   81f30:	4b10      	ldr	r3, [pc, #64]	; (81f74 <vTaskSwitchContext+0x90>)
   81f32:	681b      	ldr	r3, [r3, #0]
   81f34:	4a10      	ldr	r2, [pc, #64]	; (81f78 <vTaskSwitchContext+0x94>)
   81f36:	0099      	lsls	r1, r3, #2
   81f38:	18c8      	adds	r0, r1, r3
   81f3a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81f3e:	6844      	ldr	r4, [r0, #4]
   81f40:	6864      	ldr	r4, [r4, #4]
   81f42:	6044      	str	r4, [r0, #4]
   81f44:	4602      	mov	r2, r0
   81f46:	3208      	adds	r2, #8
   81f48:	4294      	cmp	r4, r2
   81f4a:	d106      	bne.n	81f5a <vTaskSwitchContext+0x76>
   81f4c:	6860      	ldr	r0, [r4, #4]
   81f4e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   81f52:	4a09      	ldr	r2, [pc, #36]	; (81f78 <vTaskSwitchContext+0x94>)
   81f54:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81f58:	6050      	str	r0, [r2, #4]
   81f5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81f5e:	4a06      	ldr	r2, [pc, #24]	; (81f78 <vTaskSwitchContext+0x94>)
   81f60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81f64:	685b      	ldr	r3, [r3, #4]
   81f66:	68da      	ldr	r2, [r3, #12]
   81f68:	4b06      	ldr	r3, [pc, #24]	; (81f84 <vTaskSwitchContext+0xa0>)
   81f6a:	601a      	str	r2, [r3, #0]
   81f6c:	bd10      	pop	{r4, pc}
   81f6e:	bf00      	nop
   81f70:	20078ba4 	.word	0x20078ba4
   81f74:	20078ad8 	.word	0x20078ad8
   81f78:	20078adc 	.word	0x20078adc
   81f7c:	20078be4 	.word	0x20078be4
   81f80:	000810a1 	.word	0x000810a1
   81f84:	20078ba8 	.word	0x20078ba8

00081f88 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81f88:	b538      	push	{r3, r4, r5, lr}
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81f8a:	b918      	cbnz	r0, 81f94 <vTaskPlaceOnEventList+0xc>
   81f8c:	4b0f      	ldr	r3, [pc, #60]	; (81fcc <vTaskPlaceOnEventList+0x44>)
   81f8e:	4798      	blx	r3
   81f90:	bf00      	nop
   81f92:	e7fd      	b.n	81f90 <vTaskPlaceOnEventList+0x8>
   81f94:	460c      	mov	r4, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81f96:	4d0e      	ldr	r5, [pc, #56]	; (81fd0 <vTaskPlaceOnEventList+0x48>)
   81f98:	6829      	ldr	r1, [r5, #0]
   81f9a:	3118      	adds	r1, #24
   81f9c:	4b0d      	ldr	r3, [pc, #52]	; (81fd4 <vTaskPlaceOnEventList+0x4c>)
   81f9e:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81fa0:	6828      	ldr	r0, [r5, #0]
   81fa2:	3004      	adds	r0, #4
   81fa4:	4b0c      	ldr	r3, [pc, #48]	; (81fd8 <vTaskPlaceOnEventList+0x50>)
   81fa6:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81fac:	429c      	cmp	r4, r3
   81fae:	d105      	bne.n	81fbc <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81fb0:	6829      	ldr	r1, [r5, #0]
   81fb2:	3104      	adds	r1, #4
   81fb4:	4809      	ldr	r0, [pc, #36]	; (81fdc <vTaskPlaceOnEventList+0x54>)
   81fb6:	4b0a      	ldr	r3, [pc, #40]	; (81fe0 <vTaskPlaceOnEventList+0x58>)
   81fb8:	4798      	blx	r3
   81fba:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81fbc:	4b09      	ldr	r3, [pc, #36]	; (81fe4 <vTaskPlaceOnEventList+0x5c>)
   81fbe:	8818      	ldrh	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81fc0:	4420      	add	r0, r4
   81fc2:	b280      	uxth	r0, r0
   81fc4:	4b08      	ldr	r3, [pc, #32]	; (81fe8 <vTaskPlaceOnEventList+0x60>)
   81fc6:	4798      	blx	r3
   81fc8:	bd38      	pop	{r3, r4, r5, pc}
   81fca:	bf00      	nop
   81fcc:	000810a1 	.word	0x000810a1
   81fd0:	20078ba8 	.word	0x20078ba8
   81fd4:	00080fd9 	.word	0x00080fd9
   81fd8:	00081019 	.word	0x00081019
   81fdc:	20078a8c 	.word	0x20078a8c
   81fe0:	00080fbd 	.word	0x00080fbd
   81fe4:	20078bc4 	.word	0x20078bc4
   81fe8:	00081851 	.word	0x00081851

00081fec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81fec:	b538      	push	{r3, r4, r5, lr}
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81fee:	b918      	cbnz	r0, 81ff8 <vTaskPlaceOnEventListRestricted+0xc>
   81ff0:	4b0a      	ldr	r3, [pc, #40]	; (8201c <vTaskPlaceOnEventListRestricted+0x30>)
   81ff2:	4798      	blx	r3
   81ff4:	bf00      	nop
   81ff6:	e7fd      	b.n	81ff4 <vTaskPlaceOnEventListRestricted+0x8>
   81ff8:	460d      	mov	r5, r1

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81ffa:	4c09      	ldr	r4, [pc, #36]	; (82020 <vTaskPlaceOnEventListRestricted+0x34>)
   81ffc:	6821      	ldr	r1, [r4, #0]
   81ffe:	3118      	adds	r1, #24
   82000:	4b08      	ldr	r3, [pc, #32]	; (82024 <vTaskPlaceOnEventListRestricted+0x38>)
   82002:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82004:	6820      	ldr	r0, [r4, #0]
   82006:	3004      	adds	r0, #4
   82008:	4b07      	ldr	r3, [pc, #28]	; (82028 <vTaskPlaceOnEventListRestricted+0x3c>)
   8200a:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8200c:	4b07      	ldr	r3, [pc, #28]	; (8202c <vTaskPlaceOnEventListRestricted+0x40>)
   8200e:	8818      	ldrh	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82010:	4428      	add	r0, r5
   82012:	b280      	uxth	r0, r0
   82014:	4b06      	ldr	r3, [pc, #24]	; (82030 <vTaskPlaceOnEventListRestricted+0x44>)
   82016:	4798      	blx	r3
   82018:	bd38      	pop	{r3, r4, r5, pc}
   8201a:	bf00      	nop
   8201c:	000810a1 	.word	0x000810a1
   82020:	20078ba8 	.word	0x20078ba8
   82024:	00080fbd 	.word	0x00080fbd
   82028:	00081019 	.word	0x00081019
   8202c:	20078bc4 	.word	0x20078bc4
   82030:	00081851 	.word	0x00081851

00082034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82034:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   82036:	68c3      	ldr	r3, [r0, #12]
   82038:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8203a:	b91c      	cbnz	r4, 82044 <xTaskRemoveFromEventList+0x10>
   8203c:	4b16      	ldr	r3, [pc, #88]	; (82098 <xTaskRemoveFromEventList+0x64>)
   8203e:	4798      	blx	r3
   82040:	bf00      	nop
   82042:	e7fd      	b.n	82040 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82044:	f104 0518 	add.w	r5, r4, #24
   82048:	4628      	mov	r0, r5
   8204a:	4b14      	ldr	r3, [pc, #80]	; (8209c <xTaskRemoveFromEventList+0x68>)
   8204c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8204e:	4b14      	ldr	r3, [pc, #80]	; (820a0 <xTaskRemoveFromEventList+0x6c>)
   82050:	681b      	ldr	r3, [r3, #0]
   82052:	b99b      	cbnz	r3, 8207c <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82054:	1d25      	adds	r5, r4, #4
   82056:	4628      	mov	r0, r5
   82058:	4b10      	ldr	r3, [pc, #64]	; (8209c <xTaskRemoveFromEventList+0x68>)
   8205a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8205c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8205e:	4b11      	ldr	r3, [pc, #68]	; (820a4 <xTaskRemoveFromEventList+0x70>)
   82060:	681b      	ldr	r3, [r3, #0]
   82062:	4298      	cmp	r0, r3
   82064:	bf84      	itt	hi
   82066:	4b0f      	ldrhi	r3, [pc, #60]	; (820a4 <xTaskRemoveFromEventList+0x70>)
   82068:	6018      	strhi	r0, [r3, #0]
   8206a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8206e:	4629      	mov	r1, r5
   82070:	4b0d      	ldr	r3, [pc, #52]	; (820a8 <xTaskRemoveFromEventList+0x74>)
   82072:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   82076:	4b0d      	ldr	r3, [pc, #52]	; (820ac <xTaskRemoveFromEventList+0x78>)
   82078:	4798      	blx	r3
   8207a:	e003      	b.n	82084 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8207c:	4629      	mov	r1, r5
   8207e:	480c      	ldr	r0, [pc, #48]	; (820b0 <xTaskRemoveFromEventList+0x7c>)
   82080:	4b0a      	ldr	r3, [pc, #40]	; (820ac <xTaskRemoveFromEventList+0x78>)
   82082:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82084:	4b0b      	ldr	r3, [pc, #44]	; (820b4 <xTaskRemoveFromEventList+0x80>)
   82086:	681b      	ldr	r3, [r3, #0]
	else
	{
		xReturn = pdFALSE;
	}

	return xReturn;
   82088:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8208c:	4298      	cmp	r0, r3
   8208e:	bf34      	ite	cc
   82090:	2000      	movcc	r0, #0
   82092:	2001      	movcs	r0, #1
   82094:	bd38      	pop	{r3, r4, r5, pc}
   82096:	bf00      	nop
   82098:	000810a1 	.word	0x000810a1
   8209c:	00081019 	.word	0x00081019
   820a0:	20078ba4 	.word	0x20078ba4
   820a4:	20078ad8 	.word	0x20078ad8
   820a8:	20078adc 	.word	0x20078adc
   820ac:	00080fbd 	.word	0x00080fbd
   820b0:	20078bac 	.word	0x20078bac
   820b4:	20078ba8 	.word	0x20078ba8

000820b8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   820b8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   820ba:	b918      	cbnz	r0, 820c4 <vTaskSetTimeOutState+0xc>
   820bc:	4b05      	ldr	r3, [pc, #20]	; (820d4 <vTaskSetTimeOutState+0x1c>)
   820be:	4798      	blx	r3
   820c0:	bf00      	nop
   820c2:	e7fd      	b.n	820c0 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   820c4:	4a04      	ldr	r2, [pc, #16]	; (820d8 <vTaskSetTimeOutState+0x20>)
   820c6:	6812      	ldr	r2, [r2, #0]
   820c8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   820ca:	4a04      	ldr	r2, [pc, #16]	; (820dc <vTaskSetTimeOutState+0x24>)
   820cc:	8812      	ldrh	r2, [r2, #0]
   820ce:	8082      	strh	r2, [r0, #4]
   820d0:	bd08      	pop	{r3, pc}
   820d2:	bf00      	nop
   820d4:	000810a1 	.word	0x000810a1
   820d8:	20078bc0 	.word	0x20078bc0
   820dc:	20078bc4 	.word	0x20078bc4

000820e0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   820e0:	b538      	push	{r3, r4, r5, lr}
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   820e2:	b918      	cbnz	r0, 820ec <xTaskCheckForTimeOut+0xc>
   820e4:	4b1b      	ldr	r3, [pc, #108]	; (82154 <xTaskCheckForTimeOut+0x74>)
   820e6:	4798      	blx	r3
   820e8:	bf00      	nop
   820ea:	e7fd      	b.n	820e8 <xTaskCheckForTimeOut+0x8>
   820ec:	460d      	mov	r5, r1
   820ee:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   820f0:	b919      	cbnz	r1, 820fa <xTaskCheckForTimeOut+0x1a>
   820f2:	4b18      	ldr	r3, [pc, #96]	; (82154 <xTaskCheckForTimeOut+0x74>)
   820f4:	4798      	blx	r3
   820f6:	bf00      	nop
   820f8:	e7fd      	b.n	820f6 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   820fa:	4b17      	ldr	r3, [pc, #92]	; (82158 <xTaskCheckForTimeOut+0x78>)
   820fc:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   820fe:	882b      	ldrh	r3, [r5, #0]
   82100:	f64f 72ff 	movw	r2, #65535	; 0xffff
   82104:	4293      	cmp	r3, r2
   82106:	d01b      	beq.n	82140 <xTaskCheckForTimeOut+0x60>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   82108:	4a14      	ldr	r2, [pc, #80]	; (8215c <xTaskCheckForTimeOut+0x7c>)
   8210a:	6812      	ldr	r2, [r2, #0]
   8210c:	6821      	ldr	r1, [r4, #0]
   8210e:	4291      	cmp	r1, r2
   82110:	d005      	beq.n	8211e <xTaskCheckForTimeOut+0x3e>
   82112:	4a13      	ldr	r2, [pc, #76]	; (82160 <xTaskCheckForTimeOut+0x80>)
   82114:	8812      	ldrh	r2, [r2, #0]
   82116:	b292      	uxth	r2, r2
   82118:	88a1      	ldrh	r1, [r4, #4]
   8211a:	4291      	cmp	r1, r2
   8211c:	d912      	bls.n	82144 <xTaskCheckForTimeOut+0x64>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8211e:	4a10      	ldr	r2, [pc, #64]	; (82160 <xTaskCheckForTimeOut+0x80>)
   82120:	8811      	ldrh	r1, [r2, #0]
   82122:	88a0      	ldrh	r0, [r4, #4]
   82124:	1a09      	subs	r1, r1, r0
   82126:	b289      	uxth	r1, r1
   82128:	428b      	cmp	r3, r1
   8212a:	d90d      	bls.n	82148 <xTaskCheckForTimeOut+0x68>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8212c:	8812      	ldrh	r2, [r2, #0]
   8212e:	b292      	uxth	r2, r2
   82130:	1a12      	subs	r2, r2, r0
   82132:	1a9b      	subs	r3, r3, r2
   82134:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82136:	4620      	mov	r0, r4
   82138:	4b0a      	ldr	r3, [pc, #40]	; (82164 <xTaskCheckForTimeOut+0x84>)
   8213a:	4798      	blx	r3
			xReturn = pdFALSE;
   8213c:	2400      	movs	r4, #0
   8213e:	e004      	b.n	8214a <xTaskCheckForTimeOut+0x6a>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   82140:	2400      	movs	r4, #0
   82142:	e002      	b.n	8214a <xTaskCheckForTimeOut+0x6a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82144:	2401      	movs	r4, #1
   82146:	e000      	b.n	8214a <xTaskCheckForTimeOut+0x6a>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82148:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   8214a:	4b07      	ldr	r3, [pc, #28]	; (82168 <xTaskCheckForTimeOut+0x88>)
   8214c:	4798      	blx	r3

	return xReturn;
}
   8214e:	4620      	mov	r0, r4
   82150:	bd38      	pop	{r3, r4, r5, pc}
   82152:	bf00      	nop
   82154:	000810a1 	.word	0x000810a1
   82158:	000810b1 	.word	0x000810b1
   8215c:	20078bc0 	.word	0x20078bc0
   82160:	20078bc4 	.word	0x20078bc4
   82164:	000820b9 	.word	0x000820b9
   82168:	000810d1 	.word	0x000810d1

0008216c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   8216c:	2201      	movs	r2, #1
   8216e:	4b01      	ldr	r3, [pc, #4]	; (82174 <vTaskMissedYield+0x8>)
   82170:	601a      	str	r2, [r3, #0]
   82172:	4770      	bx	lr
   82174:	20078be4 	.word	0x20078be4

00082178 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   82178:	4b01      	ldr	r3, [pc, #4]	; (82180 <xTaskGetCurrentTaskHandle+0x8>)
   8217a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8217c:	4770      	bx	lr
   8217e:	bf00      	nop
   82180:	20078ba8 	.word	0x20078ba8

00082184 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   82184:	4b05      	ldr	r3, [pc, #20]	; (8219c <xTaskGetSchedulerState+0x18>)
   82186:	681b      	ldr	r3, [r3, #0]
   82188:	b133      	cbz	r3, 82198 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8218a:	4b05      	ldr	r3, [pc, #20]	; (821a0 <xTaskGetSchedulerState+0x1c>)
   8218c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8218e:	2b00      	cmp	r3, #0
   82190:	bf0c      	ite	eq
   82192:	2001      	moveq	r0, #1
   82194:	2002      	movne	r0, #2
   82196:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   82198:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   8219a:	4770      	bx	lr
   8219c:	20078aa8 	.word	0x20078aa8
   821a0:	20078ba4 	.word	0x20078ba4

000821a4 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   821a4:	2800      	cmp	r0, #0
   821a6:	d031      	beq.n	8220c <vTaskPriorityInherit+0x68>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   821a8:	b538      	push	{r3, r4, r5, lr}

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   821aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   821ac:	4918      	ldr	r1, [pc, #96]	; (82210 <vTaskPriorityInherit+0x6c>)
   821ae:	6809      	ldr	r1, [r1, #0]
   821b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   821b2:	428b      	cmp	r3, r1
   821b4:	d229      	bcs.n	8220a <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   821b6:	4916      	ldr	r1, [pc, #88]	; (82210 <vTaskPriorityInherit+0x6c>)
   821b8:	6809      	ldr	r1, [r1, #0]
   821ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   821bc:	f1c1 010a 	rsb	r1, r1, #10
   821c0:	8301      	strh	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   821c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821c6:	4913      	ldr	r1, [pc, #76]	; (82214 <vTaskPriorityInherit+0x70>)
   821c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   821cc:	6941      	ldr	r1, [r0, #20]
   821ce:	4299      	cmp	r1, r3
   821d0:	d117      	bne.n	82202 <vTaskPriorityInherit+0x5e>
   821d2:	4605      	mov	r5, r0
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   821d4:	1d04      	adds	r4, r0, #4
   821d6:	4620      	mov	r0, r4
   821d8:	4b0f      	ldr	r3, [pc, #60]	; (82218 <vTaskPriorityInherit+0x74>)
   821da:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   821dc:	4b0c      	ldr	r3, [pc, #48]	; (82210 <vTaskPriorityInherit+0x6c>)
   821de:	681b      	ldr	r3, [r3, #0]
   821e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   821e2:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   821e4:	4b0d      	ldr	r3, [pc, #52]	; (8221c <vTaskPriorityInherit+0x78>)
   821e6:	681b      	ldr	r3, [r3, #0]
   821e8:	4298      	cmp	r0, r3
   821ea:	bf84      	itt	hi
   821ec:	4b0b      	ldrhi	r3, [pc, #44]	; (8221c <vTaskPriorityInherit+0x78>)
   821ee:	6018      	strhi	r0, [r3, #0]
   821f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   821f4:	4621      	mov	r1, r4
   821f6:	4b07      	ldr	r3, [pc, #28]	; (82214 <vTaskPriorityInherit+0x70>)
   821f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   821fc:	4b08      	ldr	r3, [pc, #32]	; (82220 <vTaskPriorityInherit+0x7c>)
   821fe:	4798      	blx	r3
   82200:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82202:	4b03      	ldr	r3, [pc, #12]	; (82210 <vTaskPriorityInherit+0x6c>)
   82204:	681b      	ldr	r3, [r3, #0]
   82206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82208:	62c3      	str	r3, [r0, #44]	; 0x2c
   8220a:	bd38      	pop	{r3, r4, r5, pc}
   8220c:	4770      	bx	lr
   8220e:	bf00      	nop
   82210:	20078ba8 	.word	0x20078ba8
   82214:	20078adc 	.word	0x20078adc
   82218:	00081019 	.word	0x00081019
   8221c:	20078ad8 	.word	0x20078ad8
   82220:	00080fbd 	.word	0x00080fbd

00082224 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   82224:	b1e8      	cbz	r0, 82262 <vTaskPriorityDisinherit+0x3e>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   82226:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82228:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8222a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   8222c:	4291      	cmp	r1, r2
   8222e:	d017      	beq.n	82260 <vTaskPriorityDisinherit+0x3c>
   82230:	4604      	mov	r4, r0
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82232:	1d05      	adds	r5, r0, #4
   82234:	4628      	mov	r0, r5
   82236:	4b0b      	ldr	r3, [pc, #44]	; (82264 <vTaskPriorityDisinherit+0x40>)
   82238:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8223a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   8223c:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8223e:	f1c0 030a 	rsb	r3, r0, #10
   82242:	8323      	strh	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   82244:	4b08      	ldr	r3, [pc, #32]	; (82268 <vTaskPriorityDisinherit+0x44>)
   82246:	681b      	ldr	r3, [r3, #0]
   82248:	4298      	cmp	r0, r3
   8224a:	bf84      	itt	hi
   8224c:	4b06      	ldrhi	r3, [pc, #24]	; (82268 <vTaskPriorityDisinherit+0x44>)
   8224e:	6018      	strhi	r0, [r3, #0]
   82250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82254:	4629      	mov	r1, r5
   82256:	4b05      	ldr	r3, [pc, #20]	; (8226c <vTaskPriorityDisinherit+0x48>)
   82258:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8225c:	4b04      	ldr	r3, [pc, #16]	; (82270 <vTaskPriorityDisinherit+0x4c>)
   8225e:	4798      	blx	r3
   82260:	bd38      	pop	{r3, r4, r5, pc}
   82262:	4770      	bx	lr
   82264:	00081019 	.word	0x00081019
   82268:	20078ad8 	.word	0x20078ad8
   8226c:	20078adc 	.word	0x20078adc
   82270:	00080fbd 	.word	0x00080fbd

00082274 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   82274:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   82276:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82278:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   8227a:	4291      	cmp	r1, r2
   8227c:	d80b      	bhi.n	82296 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8227e:	1ad2      	subs	r2, r2, r3
   82280:	8b03      	ldrh	r3, [r0, #24]
   82282:	b292      	uxth	r2, r2
   82284:	4293      	cmp	r3, r2
   82286:	d911      	bls.n	822ac <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   82288:	1d01      	adds	r1, r0, #4
   8228a:	4b0a      	ldr	r3, [pc, #40]	; (822b4 <prvInsertTimerInActiveList+0x40>)
   8228c:	6818      	ldr	r0, [r3, #0]
   8228e:	4b0a      	ldr	r3, [pc, #40]	; (822b8 <prvInsertTimerInActiveList+0x44>)
   82290:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   82292:	2000      	movs	r0, #0
   82294:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   82296:	429a      	cmp	r2, r3
   82298:	d201      	bcs.n	8229e <prvInsertTimerInActiveList+0x2a>
   8229a:	4299      	cmp	r1, r3
   8229c:	d208      	bcs.n	822b0 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8229e:	1d01      	adds	r1, r0, #4
   822a0:	4b06      	ldr	r3, [pc, #24]	; (822bc <prvInsertTimerInActiveList+0x48>)
   822a2:	6818      	ldr	r0, [r3, #0]
   822a4:	4b04      	ldr	r3, [pc, #16]	; (822b8 <prvInsertTimerInActiveList+0x44>)
   822a6:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   822a8:	2000      	movs	r0, #0
   822aa:	bd08      	pop	{r3, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   822ac:	2001      	movs	r0, #1
   822ae:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   822b0:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   822b2:	bd08      	pop	{r3, pc}
   822b4:	20078c24 	.word	0x20078c24
   822b8:	00080fd9 	.word	0x00080fd9
   822bc:	20078bf0 	.word	0x20078bf0

000822c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   822c0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   822c2:	4b0d      	ldr	r3, [pc, #52]	; (822f8 <prvCheckForValidListAndQueue+0x38>)
   822c4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   822c6:	4b0d      	ldr	r3, [pc, #52]	; (822fc <prvCheckForValidListAndQueue+0x3c>)
   822c8:	681b      	ldr	r3, [r3, #0]
   822ca:	b98b      	cbnz	r3, 822f0 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   822cc:	4d0c      	ldr	r5, [pc, #48]	; (82300 <prvCheckForValidListAndQueue+0x40>)
   822ce:	4628      	mov	r0, r5
   822d0:	4e0c      	ldr	r6, [pc, #48]	; (82304 <prvCheckForValidListAndQueue+0x44>)
   822d2:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   822d4:	4c0c      	ldr	r4, [pc, #48]	; (82308 <prvCheckForValidListAndQueue+0x48>)
   822d6:	4620      	mov	r0, r4
   822d8:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   822da:	4b0c      	ldr	r3, [pc, #48]	; (8230c <prvCheckForValidListAndQueue+0x4c>)
   822dc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   822de:	4b0c      	ldr	r3, [pc, #48]	; (82310 <prvCheckForValidListAndQueue+0x50>)
   822e0:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   822e2:	2200      	movs	r2, #0
   822e4:	210c      	movs	r1, #12
   822e6:	2005      	movs	r0, #5
   822e8:	4b0a      	ldr	r3, [pc, #40]	; (82314 <prvCheckForValidListAndQueue+0x54>)
   822ea:	4798      	blx	r3
   822ec:	4b03      	ldr	r3, [pc, #12]	; (822fc <prvCheckForValidListAndQueue+0x3c>)
   822ee:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   822f0:	4b09      	ldr	r3, [pc, #36]	; (82318 <prvCheckForValidListAndQueue+0x58>)
   822f2:	4798      	blx	r3
   822f4:	bd70      	pop	{r4, r5, r6, pc}
   822f6:	bf00      	nop
   822f8:	000810b1 	.word	0x000810b1
   822fc:	20078c20 	.word	0x20078c20
   82300:	20078bf4 	.word	0x20078bf4
   82304:	00080f9d 	.word	0x00080f9d
   82308:	20078c08 	.word	0x20078c08
   8230c:	20078bf0 	.word	0x20078bf0
   82310:	20078c24 	.word	0x20078c24
   82314:	00081491 	.word	0x00081491
   82318:	000810d1 	.word	0x000810d1

0008231c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   8231c:	b510      	push	{r4, lr}
   8231e:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82320:	4b0b      	ldr	r3, [pc, #44]	; (82350 <xTimerCreateTimerTask+0x34>)
   82322:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82324:	4b0b      	ldr	r3, [pc, #44]	; (82354 <xTimerCreateTimerTask+0x38>)
   82326:	681b      	ldr	r3, [r3, #0]
   82328:	b163      	cbz	r3, 82344 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8232a:	2300      	movs	r3, #0
   8232c:	9303      	str	r3, [sp, #12]
   8232e:	9302      	str	r3, [sp, #8]
   82330:	9301      	str	r3, [sp, #4]
   82332:	2209      	movs	r2, #9
   82334:	9200      	str	r2, [sp, #0]
   82336:	f44f 7200 	mov.w	r2, #512	; 0x200
   8233a:	4907      	ldr	r1, [pc, #28]	; (82358 <xTimerCreateTimerTask+0x3c>)
   8233c:	4807      	ldr	r0, [pc, #28]	; (8235c <xTimerCreateTimerTask+0x40>)
   8233e:	4c08      	ldr	r4, [pc, #32]	; (82360 <xTimerCreateTimerTask+0x44>)
   82340:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82342:	b918      	cbnz	r0, 8234c <xTimerCreateTimerTask+0x30>
   82344:	4b07      	ldr	r3, [pc, #28]	; (82364 <xTimerCreateTimerTask+0x48>)
   82346:	4798      	blx	r3
   82348:	bf00      	nop
   8234a:	e7fd      	b.n	82348 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   8234c:	b004      	add	sp, #16
   8234e:	bd10      	pop	{r4, pc}
   82350:	000822c1 	.word	0x000822c1
   82354:	20078c20 	.word	0x20078c20
   82358:	00086104 	.word	0x00086104
   8235c:	00082479 	.word	0x00082479
   82360:	000818ad 	.word	0x000818ad
   82364:	000810a1 	.word	0x000810a1

00082368 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82368:	b530      	push	{r4, r5, lr}
   8236a:	b085      	sub	sp, #20
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   8236c:	4c10      	ldr	r4, [pc, #64]	; (823b0 <xTimerGenericCommand+0x48>)
   8236e:	6825      	ldr	r5, [r4, #0]
   82370:	b1dd      	cbz	r5, 823aa <xTimerGenericCommand+0x42>
   82372:	461c      	mov	r4, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82374:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82376:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   8237a:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   8237c:	b974      	cbnz	r4, 8239c <xTimerGenericCommand+0x34>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8237e:	4b0d      	ldr	r3, [pc, #52]	; (823b4 <xTimerGenericCommand+0x4c>)
   82380:	4798      	blx	r3
   82382:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82384:	f04f 0300 	mov.w	r3, #0
   82388:	bf0c      	ite	eq
   8238a:	f8bd 2020 	ldrheq.w	r2, [sp, #32]
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8238e:	461a      	movne	r2, r3
   82390:	a901      	add	r1, sp, #4
   82392:	4807      	ldr	r0, [pc, #28]	; (823b0 <xTimerGenericCommand+0x48>)
   82394:	6800      	ldr	r0, [r0, #0]
   82396:	4c08      	ldr	r4, [pc, #32]	; (823b8 <xTimerGenericCommand+0x50>)
   82398:	47a0      	blx	r4
   8239a:	e007      	b.n	823ac <xTimerGenericCommand+0x44>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8239c:	2300      	movs	r3, #0
   8239e:	4622      	mov	r2, r4
   823a0:	a901      	add	r1, sp, #4
   823a2:	4628      	mov	r0, r5
   823a4:	4c05      	ldr	r4, [pc, #20]	; (823bc <xTimerGenericCommand+0x54>)
   823a6:	47a0      	blx	r4
   823a8:	e000      	b.n	823ac <xTimerGenericCommand+0x44>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   823aa:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   823ac:	b005      	add	sp, #20
   823ae:	bd30      	pop	{r4, r5, pc}
   823b0:	20078c20 	.word	0x20078c20
   823b4:	00082185 	.word	0x00082185
   823b8:	000814e9 	.word	0x000814e9
   823bc:	00081611 	.word	0x00081611

000823c0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   823c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   823c4:	b082      	sub	sp, #8
   823c6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   823c8:	4b23      	ldr	r3, [pc, #140]	; (82458 <prvSampleTimeNow+0x98>)
   823ca:	4798      	blx	r3
   823cc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   823ce:	4b23      	ldr	r3, [pc, #140]	; (8245c <prvSampleTimeNow+0x9c>)
   823d0:	881b      	ldrh	r3, [r3, #0]
   823d2:	4283      	cmp	r3, r0
   823d4:	d936      	bls.n	82444 <prvSampleTimeNow+0x84>
   823d6:	e026      	b.n	82426 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   823d8:	68da      	ldr	r2, [r3, #12]
   823da:	8815      	ldrh	r5, [r2, #0]
   823dc:	b2ad      	uxth	r5, r5

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   823de:	68db      	ldr	r3, [r3, #12]
   823e0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   823e2:	f104 0a04 	add.w	sl, r4, #4
   823e6:	4650      	mov	r0, sl
   823e8:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   823ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   823ec:	4620      	mov	r0, r4
   823ee:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   823f0:	69e3      	ldr	r3, [r4, #28]
   823f2:	2b01      	cmp	r3, #1
   823f4:	d119      	bne.n	8242a <prvSampleTimeNow+0x6a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   823f6:	8b23      	ldrh	r3, [r4, #24]
   823f8:	442b      	add	r3, r5
   823fa:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   823fc:	429d      	cmp	r5, r3
   823fe:	d206      	bcs.n	8240e <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82400:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82402:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82404:	4651      	mov	r1, sl
   82406:	6830      	ldr	r0, [r6, #0]
   82408:	4b15      	ldr	r3, [pc, #84]	; (82460 <prvSampleTimeNow+0xa0>)
   8240a:	4798      	blx	r3
   8240c:	e00d      	b.n	8242a <prvSampleTimeNow+0x6a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8240e:	2100      	movs	r1, #0
   82410:	9100      	str	r1, [sp, #0]
   82412:	460b      	mov	r3, r1
   82414:	462a      	mov	r2, r5
   82416:	4620      	mov	r0, r4
   82418:	4c12      	ldr	r4, [pc, #72]	; (82464 <prvSampleTimeNow+0xa4>)
   8241a:	47a0      	blx	r4
				configASSERT( xResult );
   8241c:	b928      	cbnz	r0, 8242a <prvSampleTimeNow+0x6a>
   8241e:	4b12      	ldr	r3, [pc, #72]	; (82468 <prvSampleTimeNow+0xa8>)
   82420:	4798      	blx	r3
   82422:	bf00      	nop
   82424:	e7fd      	b.n	82422 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82426:	4e11      	ldr	r6, [pc, #68]	; (8246c <prvSampleTimeNow+0xac>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82428:	4f11      	ldr	r7, [pc, #68]	; (82470 <prvSampleTimeNow+0xb0>)

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8242a:	6833      	ldr	r3, [r6, #0]
   8242c:	681a      	ldr	r2, [r3, #0]
   8242e:	2a00      	cmp	r2, #0
   82430:	d1d2      	bne.n	823d8 <prvSampleTimeNow+0x18>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82432:	4a10      	ldr	r2, [pc, #64]	; (82474 <prvSampleTimeNow+0xb4>)
   82434:	6810      	ldr	r0, [r2, #0]
   82436:	490d      	ldr	r1, [pc, #52]	; (8246c <prvSampleTimeNow+0xac>)
   82438:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   8243a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   8243c:	2301      	movs	r3, #1
   8243e:	f8c9 3000 	str.w	r3, [r9]
   82442:	e002      	b.n	8244a <prvSampleTimeNow+0x8a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82444:	2300      	movs	r3, #0
   82446:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   8244a:	4b04      	ldr	r3, [pc, #16]	; (8245c <prvSampleTimeNow+0x9c>)
   8244c:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   82450:	4640      	mov	r0, r8
   82452:	b002      	add	sp, #8
   82454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82458:	00081b2d 	.word	0x00081b2d
   8245c:	20078c1c 	.word	0x20078c1c
   82460:	00080fd9 	.word	0x00080fd9
   82464:	00082369 	.word	0x00082369
   82468:	000810a1 	.word	0x000810a1
   8246c:	20078bf0 	.word	0x20078bf0
   82470:	00081019 	.word	0x00081019
   82474:	20078c24 	.word	0x20078c24

00082478 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8247c:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8247e:	4d51      	ldr	r5, [pc, #324]	; (825c4 <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82480:	f8df 8170 	ldr.w	r8, [pc, #368]	; 825f4 <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82484:	4b50      	ldr	r3, [pc, #320]	; (825c8 <prvTimerTask+0x150>)
   82486:	681b      	ldr	r3, [r3, #0]
   82488:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8248a:	2a00      	cmp	r2, #0
   8248c:	f000 8090 	beq.w	825b0 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82490:	68db      	ldr	r3, [r3, #12]
   82492:	881c      	ldrh	r4, [r3, #0]
   82494:	b2a4      	uxth	r4, r4
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82496:	4b4d      	ldr	r3, [pc, #308]	; (825cc <prvTimerTask+0x154>)
   82498:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8249a:	a803      	add	r0, sp, #12
   8249c:	4b4c      	ldr	r3, [pc, #304]	; (825d0 <prvTimerTask+0x158>)
   8249e:	4798      	blx	r3
   824a0:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   824a2:	9b03      	ldr	r3, [sp, #12]
   824a4:	2b00      	cmp	r3, #0
   824a6:	d132      	bne.n	8250e <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   824a8:	4284      	cmp	r4, r0
   824aa:	d825      	bhi.n	824f8 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   824ac:	4b49      	ldr	r3, [pc, #292]	; (825d4 <prvTimerTask+0x15c>)
   824ae:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   824b0:	4b45      	ldr	r3, [pc, #276]	; (825c8 <prvTimerTask+0x150>)
   824b2:	681b      	ldr	r3, [r3, #0]
   824b4:	68db      	ldr	r3, [r3, #12]
   824b6:	68de      	ldr	r6, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   824b8:	1d30      	adds	r0, r6, #4
   824ba:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   824bc:	69f3      	ldr	r3, [r6, #28]
   824be:	2b01      	cmp	r3, #1
   824c0:	d115      	bne.n	824ee <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   824c2:	8b31      	ldrh	r1, [r6, #24]
   824c4:	4421      	add	r1, r4
   824c6:	4623      	mov	r3, r4
   824c8:	463a      	mov	r2, r7
   824ca:	b289      	uxth	r1, r1
   824cc:	4630      	mov	r0, r6
   824ce:	4f42      	ldr	r7, [pc, #264]	; (825d8 <prvTimerTask+0x160>)
   824d0:	47b8      	blx	r7
   824d2:	2801      	cmp	r0, #1
   824d4:	d10b      	bne.n	824ee <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   824d6:	2100      	movs	r1, #0
   824d8:	9100      	str	r1, [sp, #0]
   824da:	460b      	mov	r3, r1
   824dc:	4622      	mov	r2, r4
   824de:	4630      	mov	r0, r6
   824e0:	4c3e      	ldr	r4, [pc, #248]	; (825dc <prvTimerTask+0x164>)
   824e2:	47a0      	blx	r4
			configASSERT( xResult );
   824e4:	b918      	cbnz	r0, 824ee <prvTimerTask+0x76>
   824e6:	4b3e      	ldr	r3, [pc, #248]	; (825e0 <prvTimerTask+0x168>)
   824e8:	4798      	blx	r3
   824ea:	bf00      	nop
   824ec:	e7fd      	b.n	824ea <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   824ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
   824f0:	4630      	mov	r0, r6
   824f2:	4798      	blx	r3
   824f4:	e00d      	b.n	82512 <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   824f6:	2400      	movs	r4, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   824f8:	1be1      	subs	r1, r4, r7
   824fa:	b289      	uxth	r1, r1
   824fc:	6828      	ldr	r0, [r5, #0]
   824fe:	4b39      	ldr	r3, [pc, #228]	; (825e4 <prvTimerTask+0x16c>)
   82500:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82502:	4b34      	ldr	r3, [pc, #208]	; (825d4 <prvTimerTask+0x15c>)
   82504:	4798      	blx	r3
   82506:	b920      	cbnz	r0, 82512 <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82508:	4b37      	ldr	r3, [pc, #220]	; (825e8 <prvTimerTask+0x170>)
   8250a:	4798      	blx	r3
   8250c:	e001      	b.n	82512 <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   8250e:	4b31      	ldr	r3, [pc, #196]	; (825d4 <prvTimerTask+0x15c>)
   82510:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82512:	a802      	add	r0, sp, #8
   82514:	4b2e      	ldr	r3, [pc, #184]	; (825d0 <prvTimerTask+0x158>)
   82516:	4798      	blx	r3
   82518:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8251a:	4e34      	ldr	r6, [pc, #208]	; (825ec <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8251c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 825d8 <prvTimerTask+0x160>
   82520:	e03e      	b.n	825a0 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82522:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82524:	b11c      	cbz	r4, 8252e <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82526:	6963      	ldr	r3, [r4, #20]
   82528:	b10b      	cbz	r3, 8252e <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   8252a:	1d20      	adds	r0, r4, #4
   8252c:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   8252e:	9b03      	ldr	r3, [sp, #12]
   82530:	2b02      	cmp	r3, #2
   82532:	d023      	beq.n	8257c <prvTimerTask+0x104>
   82534:	2b03      	cmp	r3, #3
   82536:	d030      	beq.n	8259a <prvTimerTask+0x122>
   82538:	2b00      	cmp	r3, #0
   8253a:	d131      	bne.n	825a0 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8253c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82540:	8b21      	ldrh	r1, [r4, #24]
   82542:	4419      	add	r1, r3
   82544:	463a      	mov	r2, r7
   82546:	b289      	uxth	r1, r1
   82548:	4620      	mov	r0, r4
   8254a:	47c8      	blx	r9
   8254c:	2801      	cmp	r0, #1
   8254e:	d127      	bne.n	825a0 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82550:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82552:	4620      	mov	r0, r4
   82554:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82556:	69e3      	ldr	r3, [r4, #28]
   82558:	2b01      	cmp	r3, #1
   8255a:	d121      	bne.n	825a0 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8255c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   82560:	8b23      	ldrh	r3, [r4, #24]
   82562:	441a      	add	r2, r3
   82564:	2100      	movs	r1, #0
   82566:	9100      	str	r1, [sp, #0]
   82568:	460b      	mov	r3, r1
   8256a:	b292      	uxth	r2, r2
   8256c:	4620      	mov	r0, r4
   8256e:	4c1b      	ldr	r4, [pc, #108]	; (825dc <prvTimerTask+0x164>)
   82570:	47a0      	blx	r4
						configASSERT( xResult );
   82572:	b9a8      	cbnz	r0, 825a0 <prvTimerTask+0x128>
   82574:	4b1a      	ldr	r3, [pc, #104]	; (825e0 <prvTimerTask+0x168>)
   82576:	4798      	blx	r3
   82578:	bf00      	nop
   8257a:	e7fd      	b.n	82578 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8257c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   82580:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82582:	b91b      	cbnz	r3, 8258c <prvTimerTask+0x114>
   82584:	4b16      	ldr	r3, [pc, #88]	; (825e0 <prvTimerTask+0x168>)
   82586:	4798      	blx	r3
   82588:	bf00      	nop
   8258a:	e7fd      	b.n	82588 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8258c:	18f9      	adds	r1, r7, r3
   8258e:	463b      	mov	r3, r7
   82590:	463a      	mov	r2, r7
   82592:	b289      	uxth	r1, r1
   82594:	4620      	mov	r0, r4
   82596:	47c8      	blx	r9
   82598:	e002      	b.n	825a0 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   8259a:	4620      	mov	r0, r4
   8259c:	4b14      	ldr	r3, [pc, #80]	; (825f0 <prvTimerTask+0x178>)
   8259e:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   825a0:	2300      	movs	r3, #0
   825a2:	461a      	mov	r2, r3
   825a4:	a903      	add	r1, sp, #12
   825a6:	6828      	ldr	r0, [r5, #0]
   825a8:	47b0      	blx	r6
   825aa:	2800      	cmp	r0, #0
   825ac:	d1b9      	bne.n	82522 <prvTimerTask+0xaa>
   825ae:	e769      	b.n	82484 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   825b0:	4b06      	ldr	r3, [pc, #24]	; (825cc <prvTimerTask+0x154>)
   825b2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   825b4:	a803      	add	r0, sp, #12
   825b6:	4b06      	ldr	r3, [pc, #24]	; (825d0 <prvTimerTask+0x158>)
   825b8:	4798      	blx	r3
   825ba:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   825bc:	9b03      	ldr	r3, [sp, #12]
   825be:	2b00      	cmp	r3, #0
   825c0:	d099      	beq.n	824f6 <prvTimerTask+0x7e>
   825c2:	e7a4      	b.n	8250e <prvTimerTask+0x96>
   825c4:	20078c20 	.word	0x20078c20
   825c8:	20078bf0 	.word	0x20078bf0
   825cc:	00081b1d 	.word	0x00081b1d
   825d0:	000823c1 	.word	0x000823c1
   825d4:	00081c79 	.word	0x00081c79
   825d8:	00082275 	.word	0x00082275
   825dc:	00082369 	.word	0x00082369
   825e0:	000810a1 	.word	0x000810a1
   825e4:	00081805 	.word	0x00081805
   825e8:	00081091 	.word	0x00081091
   825ec:	000816a1 	.word	0x000816a1
   825f0:	000812c1 	.word	0x000812c1
   825f4:	00081019 	.word	0x00081019

000825f8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   825f8:	3801      	subs	r0, #1
   825fa:	2802      	cmp	r0, #2
   825fc:	d815      	bhi.n	8262a <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   825fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82602:	460e      	mov	r6, r1
   82604:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82606:	b19a      	cbz	r2, 82630 <_write+0x38>
   82608:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8260a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82644 <_write+0x4c>
   8260e:	4f0c      	ldr	r7, [pc, #48]	; (82640 <_write+0x48>)
   82610:	f8d8 0000 	ldr.w	r0, [r8]
   82614:	f815 1b01 	ldrb.w	r1, [r5], #1
   82618:	683b      	ldr	r3, [r7, #0]
   8261a:	4798      	blx	r3
   8261c:	2800      	cmp	r0, #0
   8261e:	db0a      	blt.n	82636 <_write+0x3e>
   82620:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82622:	3c01      	subs	r4, #1
   82624:	d1f4      	bne.n	82610 <_write+0x18>
   82626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8262a:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8262e:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   82630:	2000      	movs	r0, #0
   82632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   82636:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8263a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8263e:	bf00      	nop
   82640:	20078c88 	.word	0x20078c88
   82644:	20078c8c 	.word	0x20078c8c

00082648 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   82648:	b4f0      	push	{r4, r5, r6, r7}
   8264a:	b08c      	sub	sp, #48	; 0x30
   8264c:	4607      	mov	r7, r0
   8264e:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   82650:	ac01      	add	r4, sp, #4
   82652:	4d11      	ldr	r5, [pc, #68]	; (82698 <pwm_clocks_generate+0x50>)
   82654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8265a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8265c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   82660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   82664:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   82666:	2000      	movs	r0, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   82668:	f852 3b04 	ldr.w	r3, [r2], #4
   8266c:	fbb6 f3f3 	udiv	r3, r6, r3
   82670:	fbb3 f3f7 	udiv	r3, r3, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   82674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   82678:	d905      	bls.n	82686 <pwm_clocks_generate+0x3e>
			break;
		}
		ul_pre++;
   8267a:	3001      	adds	r0, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   8267c:	280b      	cmp	r0, #11
   8267e:	d1f3      	bne.n	82668 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   82680:	f64f 70ff 	movw	r0, #65535	; 0xffff
   82684:	e005      	b.n	82692 <pwm_clocks_generate+0x4a>
		}
		ul_pre++;
	} while (ul_pre < PWM_CLOCK_PRE_MAX);

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   82686:	280a      	cmp	r0, #10
		return ul_div | (ul_pre << 8);
   82688:	bf94      	ite	ls
   8268a:	ea43 2000 	orrls.w	r0, r3, r0, lsl #8
	} else {
		return PWM_INVALID_ARGUMENT;
   8268e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}
}
   82692:	b00c      	add	sp, #48	; 0x30
   82694:	bcf0      	pop	{r4, r5, r6, r7}
   82696:	4770      	bx	lr
   82698:	0008610c 	.word	0x0008610c

0008269c <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   8269c:	b570      	push	{r4, r5, r6, lr}
   8269e:	4606      	mov	r6, r0
   826a0:	460c      	mov	r4, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   826a2:	6808      	ldr	r0, [r1, #0]
   826a4:	b140      	cbz	r0, 826b8 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   826a6:	6889      	ldr	r1, [r1, #8]
   826a8:	4b0e      	ldr	r3, [pc, #56]	; (826e4 <pwm_init+0x48>)
   826aa:	4798      	blx	r3
   826ac:	4605      	mov	r5, r0
		if (result == PWM_INVALID_ARGUMENT) {
   826ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
   826b2:	4298      	cmp	r0, r3
   826b4:	d101      	bne.n	826ba <pwm_init+0x1e>
   826b6:	e00e      	b.n	826d6 <pwm_init+0x3a>
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
	uint32_t clock = 0;
   826b8:	2500      	movs	r5, #0

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   826ba:	6860      	ldr	r0, [r4, #4]
   826bc:	b140      	cbz	r0, 826d0 <pwm_init+0x34>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   826be:	68a1      	ldr	r1, [r4, #8]
   826c0:	4b08      	ldr	r3, [pc, #32]	; (826e4 <pwm_init+0x48>)
   826c2:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   826c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   826c8:	4298      	cmp	r0, r3
   826ca:	d007      	beq.n	826dc <pwm_init+0x40>
			return result;
		}

		clock |= (result << 16);
   826cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   826d0:	6035      	str	r5, [r6, #0]
#endif
	return 0;
   826d2:	2000      	movs	r0, #0
   826d4:	bd70      	pop	{r4, r5, r6, pc}

	/* Clock A */
	if (clock_config->ul_clka != 0) {
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   826d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   826da:	bd70      	pop	{r4, r5, r6, pc}
	/* Clock B */
	if (clock_config->ul_clkb != 0) {
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);

		if (result == PWM_INVALID_ARGUMENT) {
			return result;
   826dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
#endif
	return 0;
}
   826e0:	bd70      	pop	{r4, r5, r6, pc}
   826e2:	bf00      	nop
   826e4:	00082649 	.word	0x00082649

000826e8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   826e8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   826ea:	680b      	ldr	r3, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   826ec:	684a      	ldr	r2, [r1, #4]
   826ee:	f002 020f 	and.w	r2, r2, #15
   826f2:	8a8c      	ldrh	r4, [r1, #20]
   826f4:	4322      	orrs	r2, r4
   826f6:	890c      	ldrh	r4, [r1, #8]
   826f8:	4322      	orrs	r2, r4
   826fa:	7a8c      	ldrb	r4, [r1, #10]
   826fc:	ea42 2244 	orr.w	r2, r2, r4, lsl #9
   82700:	7d8c      	ldrb	r4, [r1, #22]
   82702:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   82706:	7dcc      	ldrb	r4, [r1, #23]
   82708:	ea42 4244 	orr.w	r2, r2, r4, lsl #17
   8270c:	7e0c      	ldrb	r4, [r1, #24]
   8270e:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
   82712:	eb00 1443 	add.w	r4, r0, r3, lsl #5
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   82716:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8271a:	68ca      	ldr	r2, [r1, #12]
   8271c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   82720:	690a      	ldr	r2, [r1, #16]
   82722:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   82726:	7d8a      	ldrb	r2, [r1, #22]
   82728:	b13a      	cbz	r2, 8273a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8272a:	8b8c      	ldrh	r4, [r1, #28]
   8272c:	8b4a      	ldrh	r2, [r1, #26]
   8272e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   82732:	eb00 1443 	add.w	r4, r0, r3, lsl #5
   82736:	f8c4 2218 	str.w	r2, [r4, #536]	; 0x218
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8273a:	6c84      	ldr	r4, [r0, #72]	; 0x48
   8273c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   82740:	409a      	lsls	r2, r3
   82742:	43d2      	mvns	r2, r2
   82744:	ea04 0502 	and.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   82748:	7fcc      	ldrb	r4, [r1, #31]
   8274a:	fa04 f603 	lsl.w	r6, r4, r3
   8274e:	7f8c      	ldrb	r4, [r1, #30]
   82750:	409c      	lsls	r4, r3
   82752:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   82756:	432c      	orrs	r4, r5
			(((p_channel->output_selection.b_override_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   82758:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8275a:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8275c:	4022      	ands	r2, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   8275e:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   82762:	fa04 f503 	lsl.w	r5, r4, r3
   82766:	f891 4020 	ldrb.w	r4, [r1, #32]
   8276a:	409c      	lsls	r4, r3
   8276c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   82770:	4322      	orrs	r2, r4
			(((p_channel->output_selection.override_level_pwml) << ch_num)
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   82772:	6442      	str	r2, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   82774:	2201      	movs	r2, #1
   82776:	409a      	lsls	r2, r3
	if (p_channel->b_sync_ch) {
   82778:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8277c:	b11c      	cbz	r4, 82786 <pwm_channel_init+0x9e>
		p_pwm->PWM_SCM |= channel;
   8277e:	6a04      	ldr	r4, [r0, #32]
   82780:	4314      	orrs	r4, r2
   82782:	6204      	str	r4, [r0, #32]
   82784:	e003      	b.n	8278e <pwm_channel_init+0xa6>
	} else {
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   82786:	6a04      	ldr	r4, [r0, #32]
   82788:	ea24 0402 	bic.w	r4, r4, r2
   8278c:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   8278e:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   82792:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   82794:	6e84      	ldr	r4, [r0, #104]	; 0x68
   82796:	bf0c      	ite	eq
   82798:	4314      	orreq	r4, r2
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8279a:	4394      	bicne	r4, r2
   8279c:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   8279e:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   827a2:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   827a4:	6e84      	ldr	r4, [r0, #104]	; 0x68
   827a6:	bf0c      	ite	eq
   827a8:	ea44 4202 	orreq.w	r2, r4, r2, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   827ac:	ea24 4202 	bicne.w	r2, r4, r2, lsl #16
   827b0:	6682      	str	r2, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   827b2:	2b03      	cmp	r3, #3
   827b4:	d80c      	bhi.n	827d0 <pwm_channel_init+0xe8>
		ch_num *= 8;
   827b6:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   827b8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   827ba:	22ff      	movs	r2, #255	; 0xff
   827bc:	409a      	lsls	r2, r3
   827be:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   827c2:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   827c6:	fa01 f303 	lsl.w	r3, r1, r3
   827ca:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE1 = fault_enable_reg;
   827cc:	66c3      	str	r3, [r0, #108]	; 0x6c
   827ce:	e00c      	b.n	827ea <pwm_channel_init+0x102>
	} else {
		ch_num -= 4;
   827d0:	3b04      	subs	r3, #4
		ch_num *= 8;
   827d2:	00db      	lsls	r3, r3, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   827d4:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   827d6:	22ff      	movs	r2, #255	; 0xff
   827d8:	409a      	lsls	r2, r3
   827da:	ea24 0202 	bic.w	r2, r4, r2
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   827de:	f891 1023 	ldrb.w	r1, [r1, #35]	; 0x23
   827e2:	fa01 f303 	lsl.w	r3, r1, r3
   827e6:	4313      	orrs	r3, r2
		p_pwm->PWM_FPE2 = fault_enable_reg;
   827e8:	6703      	str	r3, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   827ea:	2000      	movs	r0, #0
   827ec:	bc70      	pop	{r4, r5, r6}
   827ee:	4770      	bx	lr

000827f0 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   827f0:	690b      	ldr	r3, [r1, #16]
   827f2:	4293      	cmp	r3, r2
   827f4:	d307      	bcc.n	82806 <pwm_channel_update_duty+0x16>
 * \retval 0 if changing succeeds, otherwise fails.
 */
uint32_t pwm_channel_update_duty(Pwm *p_pwm, pwm_channel_t *p_channel,
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;
   827f6:	680b      	ldr	r3, [r1, #0]
		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
	} else {
		/* Save new duty cycle value */
		p_channel->ul_duty = ul_duty;
   827f8:	60ca      	str	r2, [r1, #12]
		mode &= ~PWM_CMR_CPD;
		p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = mode;

		p_pwm->PWM_CH_NUM[ch_num].PWM_CUPD = ul_duty;
#else
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   827fa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   827fe:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
#endif
	}

	return 0;
   82802:	2000      	movs	r0, #0
   82804:	4770      	bx	lr
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
		return PWM_INVALID_ARGUMENT;
   82806:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   8280a:	4770      	bx	lr

0008280c <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   8280c:	2301      	movs	r3, #1
   8280e:	fa03 f101 	lsl.w	r1, r3, r1
   82812:	6041      	str	r1, [r0, #4]
   82814:	4770      	bx	lr
   82816:	bf00      	nop

00082818 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   82818:	2301      	movs	r3, #1
   8281a:	fa03 f101 	lsl.w	r1, r3, r1
   8281e:	6081      	str	r1, [r0, #8]
   82820:	4770      	bx	lr
   82822:	bf00      	nop

00082824 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82824:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82826:	23ac      	movs	r3, #172	; 0xac
   82828:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8282a:	680b      	ldr	r3, [r1, #0]
   8282c:	684a      	ldr	r2, [r1, #4]
   8282e:	fbb3 f3f2 	udiv	r3, r3, r2
   82832:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82834:	1e5c      	subs	r4, r3, #1
   82836:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8283a:	4294      	cmp	r4, r2
   8283c:	d80a      	bhi.n	82854 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8283e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   82840:	688b      	ldr	r3, [r1, #8]
   82842:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82844:	f240 2302 	movw	r3, #514	; 0x202
   82848:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8284c:	2350      	movs	r3, #80	; 0x50
   8284e:	6003      	str	r3, [r0, #0]

	return 0;
   82850:	2000      	movs	r0, #0
   82852:	e000      	b.n	82856 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   82854:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   82856:	bc10      	pop	{r4}
   82858:	4770      	bx	lr
   8285a:	bf00      	nop

0008285c <uart_is_rx_ready>:
 * \retval 1 One data has been received.
 * \retval 0 No data has been received.
 */
uint32_t uart_is_rx_ready(Uart *p_uart)
{
	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
   8285c:	6940      	ldr	r0, [r0, #20]
}
   8285e:	f000 0001 	and.w	r0, r0, #1
   82862:	4770      	bx	lr

00082864 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82864:	6943      	ldr	r3, [r0, #20]
   82866:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8286a:	bf1a      	itte	ne
   8286c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8286e:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   82870:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   82872:	4770      	bx	lr

00082874 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82874:	6943      	ldr	r3, [r0, #20]
   82876:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8287a:	bf1d      	ittte	ne
   8287c:	6983      	ldrne	r3, [r0, #24]
   8287e:	700b      	strbne	r3, [r1, #0]
	return 0;
   82880:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   82882:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   82884:	4770      	bx	lr
   82886:	bf00      	nop

00082888 <main>:
#include "ReglStyr.h"
#include "UARTSet.h"


int main (void)
{
   82888:	b500      	push	{lr}
   8288a:	b085      	sub	sp, #20
	// Board init
	
	
	sysclk_init();
   8288c:	4b24      	ldr	r3, [pc, #144]	; (82920 <main+0x98>)
   8288e:	4798      	blx	r3
	board_init();
   82890:	4b24      	ldr	r3, [pc, #144]	; (82924 <main+0x9c>)
   82892:	4798      	blx	r3
   82894:	200b      	movs	r0, #11
   82896:	4c24      	ldr	r4, [pc, #144]	; (82928 <main+0xa0>)
   82898:	47a0      	blx	r4
   8289a:	200c      	movs	r0, #12
   8289c:	47a0      	blx	r4
   8289e:	200d      	movs	r0, #13
   828a0:	47a0      	blx	r4
   828a2:	200e      	movs	r0, #14
   828a4:	47a0      	blx	r4
	ioport_init();
	delay_init();
	configure_console(); // Initialize UART
   828a6:	4b21      	ldr	r3, [pc, #132]	; (8292c <main+0xa4>)
   828a8:	4798      	blx	r3
	setup_pwm();
   828aa:	4b21      	ldr	r3, [pc, #132]	; (82930 <main+0xa8>)
   828ac:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   828ae:	4b21      	ldr	r3, [pc, #132]	; (82934 <main+0xac>)
   828b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   828b4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   828b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   828ba:	635a      	str	r2, [r3, #52]	; 0x34
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   828bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   828c0:	f44f 7280 	mov.w	r2, #256	; 0x100
   828c4:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   828c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   828ca:	631a      	str	r2, [r3, #48]	; 0x30
	// init shield
	ioport_set_pin_dir(PIO_PC21_IDX, IOPORT_DIR_OUTPUT); // byta kanal PIO
	ioport_set_pin_level(PIO_PC21_IDX, LOW);
	ioport_set_pin_dir(PIO_PD8_IDX, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(PIO_PD8_IDX, HIGH);
	adc_setup();
   828cc:	4b1a      	ldr	r3, [pc, #104]	; (82938 <main+0xb0>)
   828ce:	4798      	blx	r3
	
	// FREERTOS task for pid
 	if (xTaskCreate(task_pid, (const signed char * const) "PIDRegulation",
   828d0:	2300      	movs	r3, #0
   828d2:	9303      	str	r3, [sp, #12]
   828d4:	9302      	str	r3, [sp, #8]
   828d6:	9301      	str	r3, [sp, #4]
   828d8:	2202      	movs	r2, #2
   828da:	9200      	str	r2, [sp, #0]
   828dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   828e0:	4916      	ldr	r1, [pc, #88]	; (8293c <main+0xb4>)
   828e2:	4817      	ldr	r0, [pc, #92]	; (82940 <main+0xb8>)
   828e4:	4c17      	ldr	r4, [pc, #92]	; (82944 <main+0xbc>)
   828e6:	47a0      	blx	r4
   828e8:	2801      	cmp	r0, #1
   828ea:	d002      	beq.n	828f2 <main+0x6a>
 	TASK_PIDRegulation_STACK_SIZE, NULL, TASK_PIDRegulation_STACK_PRIORITY, NULL) != pdPASS)
 	{
	 	printf("Failed to create PIDRegulationTask\r\n");
   828ec:	4816      	ldr	r0, [pc, #88]	; (82948 <main+0xc0>)
   828ee:	4b17      	ldr	r3, [pc, #92]	; (8294c <main+0xc4>)
   828f0:	4798      	blx	r3
 	}
	
	/* Creating the serial communication task */
	if (xTaskCreate(ComTask, (const signed char * const) "SerialComTask",
   828f2:	2300      	movs	r3, #0
   828f4:	9303      	str	r3, [sp, #12]
   828f6:	9302      	str	r3, [sp, #8]
   828f8:	9301      	str	r3, [sp, #4]
   828fa:	2201      	movs	r2, #1
   828fc:	9200      	str	r2, [sp, #0]
   828fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   82902:	4913      	ldr	r1, [pc, #76]	; (82950 <main+0xc8>)
   82904:	4813      	ldr	r0, [pc, #76]	; (82954 <main+0xcc>)
   82906:	4c0f      	ldr	r4, [pc, #60]	; (82944 <main+0xbc>)
   82908:	47a0      	blx	r4
   8290a:	2801      	cmp	r0, #1
   8290c:	d002      	beq.n	82914 <main+0x8c>
	TASK_SerialComTask_STACK_SIZE, NULL, TASK_SerialComTask_STACK_PRIORITY, NULL) != pdPASS)
	{
	printf("Failed to create SerialComTask\r\n");
   8290e:	4812      	ldr	r0, [pc, #72]	; (82958 <main+0xd0>)
   82910:	4b0e      	ldr	r3, [pc, #56]	; (8294c <main+0xc4>)
   82912:	4798      	blx	r3
	}
	
	/* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   82914:	4b11      	ldr	r3, [pc, #68]	; (8295c <main+0xd4>)
   82916:	4798      	blx	r3
	printf("Insufficient RAM\r\n");
   82918:	4811      	ldr	r0, [pc, #68]	; (82960 <main+0xd8>)
   8291a:	4b0c      	ldr	r3, [pc, #48]	; (8294c <main+0xc4>)
   8291c:	4798      	blx	r3
   8291e:	e7fe      	b.n	8291e <main+0x96>
   82920:	00080249 	.word	0x00080249
   82924:	000802e9 	.word	0x000802e9
   82928:	000807b9 	.word	0x000807b9
   8292c:	00080d09 	.word	0x00080d09
   82930:	00080a55 	.word	0x00080a55
   82934:	400e1200 	.word	0x400e1200
   82938:	00080151 	.word	0x00080151
   8293c:	00086138 	.word	0x00086138
   82940:	00080ae5 	.word	0x00080ae5
   82944:	000818ad 	.word	0x000818ad
   82948:	00086148 	.word	0x00086148
   8294c:	00083199 	.word	0x00083199
   82950:	00086170 	.word	0x00086170
   82954:	00080f09 	.word	0x00080f09
   82958:	00086180 	.word	0x00086180
   8295c:	00081ab1 	.word	0x00081ab1
   82960:	000861a4 	.word	0x000861a4

00082964 <__aeabi_drsub>:
   82964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   82968:	e002      	b.n	82970 <__adddf3>
   8296a:	bf00      	nop

0008296c <__aeabi_dsub>:
   8296c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00082970 <__adddf3>:
   82970:	b530      	push	{r4, r5, lr}
   82972:	ea4f 0441 	mov.w	r4, r1, lsl #1
   82976:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8297a:	ea94 0f05 	teq	r4, r5
   8297e:	bf08      	it	eq
   82980:	ea90 0f02 	teqeq	r0, r2
   82984:	bf1f      	itttt	ne
   82986:	ea54 0c00 	orrsne.w	ip, r4, r0
   8298a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8298e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   82992:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82996:	f000 80e2 	beq.w	82b5e <__adddf3+0x1ee>
   8299a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8299e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   829a2:	bfb8      	it	lt
   829a4:	426d      	neglt	r5, r5
   829a6:	dd0c      	ble.n	829c2 <__adddf3+0x52>
   829a8:	442c      	add	r4, r5
   829aa:	ea80 0202 	eor.w	r2, r0, r2
   829ae:	ea81 0303 	eor.w	r3, r1, r3
   829b2:	ea82 0000 	eor.w	r0, r2, r0
   829b6:	ea83 0101 	eor.w	r1, r3, r1
   829ba:	ea80 0202 	eor.w	r2, r0, r2
   829be:	ea81 0303 	eor.w	r3, r1, r3
   829c2:	2d36      	cmp	r5, #54	; 0x36
   829c4:	bf88      	it	hi
   829c6:	bd30      	pophi	{r4, r5, pc}
   829c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   829cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   829d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   829d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   829d8:	d002      	beq.n	829e0 <__adddf3+0x70>
   829da:	4240      	negs	r0, r0
   829dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   829e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   829e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   829e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   829ec:	d002      	beq.n	829f4 <__adddf3+0x84>
   829ee:	4252      	negs	r2, r2
   829f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   829f4:	ea94 0f05 	teq	r4, r5
   829f8:	f000 80a7 	beq.w	82b4a <__adddf3+0x1da>
   829fc:	f1a4 0401 	sub.w	r4, r4, #1
   82a00:	f1d5 0e20 	rsbs	lr, r5, #32
   82a04:	db0d      	blt.n	82a22 <__adddf3+0xb2>
   82a06:	fa02 fc0e 	lsl.w	ip, r2, lr
   82a0a:	fa22 f205 	lsr.w	r2, r2, r5
   82a0e:	1880      	adds	r0, r0, r2
   82a10:	f141 0100 	adc.w	r1, r1, #0
   82a14:	fa03 f20e 	lsl.w	r2, r3, lr
   82a18:	1880      	adds	r0, r0, r2
   82a1a:	fa43 f305 	asr.w	r3, r3, r5
   82a1e:	4159      	adcs	r1, r3
   82a20:	e00e      	b.n	82a40 <__adddf3+0xd0>
   82a22:	f1a5 0520 	sub.w	r5, r5, #32
   82a26:	f10e 0e20 	add.w	lr, lr, #32
   82a2a:	2a01      	cmp	r2, #1
   82a2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   82a30:	bf28      	it	cs
   82a32:	f04c 0c02 	orrcs.w	ip, ip, #2
   82a36:	fa43 f305 	asr.w	r3, r3, r5
   82a3a:	18c0      	adds	r0, r0, r3
   82a3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   82a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82a44:	d507      	bpl.n	82a56 <__adddf3+0xe6>
   82a46:	f04f 0e00 	mov.w	lr, #0
   82a4a:	f1dc 0c00 	rsbs	ip, ip, #0
   82a4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   82a52:	eb6e 0101 	sbc.w	r1, lr, r1
   82a56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   82a5a:	d31b      	bcc.n	82a94 <__adddf3+0x124>
   82a5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   82a60:	d30c      	bcc.n	82a7c <__adddf3+0x10c>
   82a62:	0849      	lsrs	r1, r1, #1
   82a64:	ea5f 0030 	movs.w	r0, r0, rrx
   82a68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   82a6c:	f104 0401 	add.w	r4, r4, #1
   82a70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   82a74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   82a78:	f080 809a 	bcs.w	82bb0 <__adddf3+0x240>
   82a7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   82a80:	bf08      	it	eq
   82a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   82a86:	f150 0000 	adcs.w	r0, r0, #0
   82a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82a8e:	ea41 0105 	orr.w	r1, r1, r5
   82a92:	bd30      	pop	{r4, r5, pc}
   82a94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   82a98:	4140      	adcs	r0, r0
   82a9a:	eb41 0101 	adc.w	r1, r1, r1
   82a9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82aa2:	f1a4 0401 	sub.w	r4, r4, #1
   82aa6:	d1e9      	bne.n	82a7c <__adddf3+0x10c>
   82aa8:	f091 0f00 	teq	r1, #0
   82aac:	bf04      	itt	eq
   82aae:	4601      	moveq	r1, r0
   82ab0:	2000      	moveq	r0, #0
   82ab2:	fab1 f381 	clz	r3, r1
   82ab6:	bf08      	it	eq
   82ab8:	3320      	addeq	r3, #32
   82aba:	f1a3 030b 	sub.w	r3, r3, #11
   82abe:	f1b3 0220 	subs.w	r2, r3, #32
   82ac2:	da0c      	bge.n	82ade <__adddf3+0x16e>
   82ac4:	320c      	adds	r2, #12
   82ac6:	dd08      	ble.n	82ada <__adddf3+0x16a>
   82ac8:	f102 0c14 	add.w	ip, r2, #20
   82acc:	f1c2 020c 	rsb	r2, r2, #12
   82ad0:	fa01 f00c 	lsl.w	r0, r1, ip
   82ad4:	fa21 f102 	lsr.w	r1, r1, r2
   82ad8:	e00c      	b.n	82af4 <__adddf3+0x184>
   82ada:	f102 0214 	add.w	r2, r2, #20
   82ade:	bfd8      	it	le
   82ae0:	f1c2 0c20 	rsble	ip, r2, #32
   82ae4:	fa01 f102 	lsl.w	r1, r1, r2
   82ae8:	fa20 fc0c 	lsr.w	ip, r0, ip
   82aec:	bfdc      	itt	le
   82aee:	ea41 010c 	orrle.w	r1, r1, ip
   82af2:	4090      	lslle	r0, r2
   82af4:	1ae4      	subs	r4, r4, r3
   82af6:	bfa2      	ittt	ge
   82af8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   82afc:	4329      	orrge	r1, r5
   82afe:	bd30      	popge	{r4, r5, pc}
   82b00:	ea6f 0404 	mvn.w	r4, r4
   82b04:	3c1f      	subs	r4, #31
   82b06:	da1c      	bge.n	82b42 <__adddf3+0x1d2>
   82b08:	340c      	adds	r4, #12
   82b0a:	dc0e      	bgt.n	82b2a <__adddf3+0x1ba>
   82b0c:	f104 0414 	add.w	r4, r4, #20
   82b10:	f1c4 0220 	rsb	r2, r4, #32
   82b14:	fa20 f004 	lsr.w	r0, r0, r4
   82b18:	fa01 f302 	lsl.w	r3, r1, r2
   82b1c:	ea40 0003 	orr.w	r0, r0, r3
   82b20:	fa21 f304 	lsr.w	r3, r1, r4
   82b24:	ea45 0103 	orr.w	r1, r5, r3
   82b28:	bd30      	pop	{r4, r5, pc}
   82b2a:	f1c4 040c 	rsb	r4, r4, #12
   82b2e:	f1c4 0220 	rsb	r2, r4, #32
   82b32:	fa20 f002 	lsr.w	r0, r0, r2
   82b36:	fa01 f304 	lsl.w	r3, r1, r4
   82b3a:	ea40 0003 	orr.w	r0, r0, r3
   82b3e:	4629      	mov	r1, r5
   82b40:	bd30      	pop	{r4, r5, pc}
   82b42:	fa21 f004 	lsr.w	r0, r1, r4
   82b46:	4629      	mov	r1, r5
   82b48:	bd30      	pop	{r4, r5, pc}
   82b4a:	f094 0f00 	teq	r4, #0
   82b4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   82b52:	bf06      	itte	eq
   82b54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   82b58:	3401      	addeq	r4, #1
   82b5a:	3d01      	subne	r5, #1
   82b5c:	e74e      	b.n	829fc <__adddf3+0x8c>
   82b5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82b62:	bf18      	it	ne
   82b64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   82b68:	d029      	beq.n	82bbe <__adddf3+0x24e>
   82b6a:	ea94 0f05 	teq	r4, r5
   82b6e:	bf08      	it	eq
   82b70:	ea90 0f02 	teqeq	r0, r2
   82b74:	d005      	beq.n	82b82 <__adddf3+0x212>
   82b76:	ea54 0c00 	orrs.w	ip, r4, r0
   82b7a:	bf04      	itt	eq
   82b7c:	4619      	moveq	r1, r3
   82b7e:	4610      	moveq	r0, r2
   82b80:	bd30      	pop	{r4, r5, pc}
   82b82:	ea91 0f03 	teq	r1, r3
   82b86:	bf1e      	ittt	ne
   82b88:	2100      	movne	r1, #0
   82b8a:	2000      	movne	r0, #0
   82b8c:	bd30      	popne	{r4, r5, pc}
   82b8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   82b92:	d105      	bne.n	82ba0 <__adddf3+0x230>
   82b94:	0040      	lsls	r0, r0, #1
   82b96:	4149      	adcs	r1, r1
   82b98:	bf28      	it	cs
   82b9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   82b9e:	bd30      	pop	{r4, r5, pc}
   82ba0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   82ba4:	bf3c      	itt	cc
   82ba6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   82baa:	bd30      	popcc	{r4, r5, pc}
   82bac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82bb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   82bb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82bb8:	f04f 0000 	mov.w	r0, #0
   82bbc:	bd30      	pop	{r4, r5, pc}
   82bbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   82bc2:	bf1a      	itte	ne
   82bc4:	4619      	movne	r1, r3
   82bc6:	4610      	movne	r0, r2
   82bc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   82bcc:	bf1c      	itt	ne
   82bce:	460b      	movne	r3, r1
   82bd0:	4602      	movne	r2, r0
   82bd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   82bd6:	bf06      	itte	eq
   82bd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   82bdc:	ea91 0f03 	teqeq	r1, r3
   82be0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   82be4:	bd30      	pop	{r4, r5, pc}
   82be6:	bf00      	nop

00082be8 <__aeabi_ui2d>:
   82be8:	f090 0f00 	teq	r0, #0
   82bec:	bf04      	itt	eq
   82bee:	2100      	moveq	r1, #0
   82bf0:	4770      	bxeq	lr
   82bf2:	b530      	push	{r4, r5, lr}
   82bf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82bf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82bfc:	f04f 0500 	mov.w	r5, #0
   82c00:	f04f 0100 	mov.w	r1, #0
   82c04:	e750      	b.n	82aa8 <__adddf3+0x138>
   82c06:	bf00      	nop

00082c08 <__aeabi_i2d>:
   82c08:	f090 0f00 	teq	r0, #0
   82c0c:	bf04      	itt	eq
   82c0e:	2100      	moveq	r1, #0
   82c10:	4770      	bxeq	lr
   82c12:	b530      	push	{r4, r5, lr}
   82c14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82c18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82c1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   82c20:	bf48      	it	mi
   82c22:	4240      	negmi	r0, r0
   82c24:	f04f 0100 	mov.w	r1, #0
   82c28:	e73e      	b.n	82aa8 <__adddf3+0x138>
   82c2a:	bf00      	nop

00082c2c <__aeabi_f2d>:
   82c2c:	0042      	lsls	r2, r0, #1
   82c2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   82c32:	ea4f 0131 	mov.w	r1, r1, rrx
   82c36:	ea4f 7002 	mov.w	r0, r2, lsl #28
   82c3a:	bf1f      	itttt	ne
   82c3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   82c40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82c44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   82c48:	4770      	bxne	lr
   82c4a:	f092 0f00 	teq	r2, #0
   82c4e:	bf14      	ite	ne
   82c50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   82c54:	4770      	bxeq	lr
   82c56:	b530      	push	{r4, r5, lr}
   82c58:	f44f 7460 	mov.w	r4, #896	; 0x380
   82c5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   82c60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82c64:	e720      	b.n	82aa8 <__adddf3+0x138>
   82c66:	bf00      	nop

00082c68 <__aeabi_ul2d>:
   82c68:	ea50 0201 	orrs.w	r2, r0, r1
   82c6c:	bf08      	it	eq
   82c6e:	4770      	bxeq	lr
   82c70:	b530      	push	{r4, r5, lr}
   82c72:	f04f 0500 	mov.w	r5, #0
   82c76:	e00a      	b.n	82c8e <__aeabi_l2d+0x16>

00082c78 <__aeabi_l2d>:
   82c78:	ea50 0201 	orrs.w	r2, r0, r1
   82c7c:	bf08      	it	eq
   82c7e:	4770      	bxeq	lr
   82c80:	b530      	push	{r4, r5, lr}
   82c82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   82c86:	d502      	bpl.n	82c8e <__aeabi_l2d+0x16>
   82c88:	4240      	negs	r0, r0
   82c8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   82c8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   82c92:	f104 0432 	add.w	r4, r4, #50	; 0x32
   82c96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   82c9a:	f43f aedc 	beq.w	82a56 <__adddf3+0xe6>
   82c9e:	f04f 0203 	mov.w	r2, #3
   82ca2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82ca6:	bf18      	it	ne
   82ca8:	3203      	addne	r2, #3
   82caa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   82cae:	bf18      	it	ne
   82cb0:	3203      	addne	r2, #3
   82cb2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   82cb6:	f1c2 0320 	rsb	r3, r2, #32
   82cba:	fa00 fc03 	lsl.w	ip, r0, r3
   82cbe:	fa20 f002 	lsr.w	r0, r0, r2
   82cc2:	fa01 fe03 	lsl.w	lr, r1, r3
   82cc6:	ea40 000e 	orr.w	r0, r0, lr
   82cca:	fa21 f102 	lsr.w	r1, r1, r2
   82cce:	4414      	add	r4, r2
   82cd0:	e6c1      	b.n	82a56 <__adddf3+0xe6>
   82cd2:	bf00      	nop

00082cd4 <__aeabi_dmul>:
   82cd4:	b570      	push	{r4, r5, r6, lr}
   82cd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82cda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82cde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82ce2:	bf1d      	ittte	ne
   82ce4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82ce8:	ea94 0f0c 	teqne	r4, ip
   82cec:	ea95 0f0c 	teqne	r5, ip
   82cf0:	f000 f8de 	bleq	82eb0 <__aeabi_dmul+0x1dc>
   82cf4:	442c      	add	r4, r5
   82cf6:	ea81 0603 	eor.w	r6, r1, r3
   82cfa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   82cfe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   82d02:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   82d06:	bf18      	it	ne
   82d08:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   82d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82d14:	d038      	beq.n	82d88 <__aeabi_dmul+0xb4>
   82d16:	fba0 ce02 	umull	ip, lr, r0, r2
   82d1a:	f04f 0500 	mov.w	r5, #0
   82d1e:	fbe1 e502 	umlal	lr, r5, r1, r2
   82d22:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   82d26:	fbe0 e503 	umlal	lr, r5, r0, r3
   82d2a:	f04f 0600 	mov.w	r6, #0
   82d2e:	fbe1 5603 	umlal	r5, r6, r1, r3
   82d32:	f09c 0f00 	teq	ip, #0
   82d36:	bf18      	it	ne
   82d38:	f04e 0e01 	orrne.w	lr, lr, #1
   82d3c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   82d40:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   82d44:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   82d48:	d204      	bcs.n	82d54 <__aeabi_dmul+0x80>
   82d4a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   82d4e:	416d      	adcs	r5, r5
   82d50:	eb46 0606 	adc.w	r6, r6, r6
   82d54:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   82d58:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   82d5c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   82d60:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   82d64:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   82d68:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   82d6c:	bf88      	it	hi
   82d6e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   82d72:	d81e      	bhi.n	82db2 <__aeabi_dmul+0xde>
   82d74:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   82d78:	bf08      	it	eq
   82d7a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   82d7e:	f150 0000 	adcs.w	r0, r0, #0
   82d82:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   82d86:	bd70      	pop	{r4, r5, r6, pc}
   82d88:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   82d8c:	ea46 0101 	orr.w	r1, r6, r1
   82d90:	ea40 0002 	orr.w	r0, r0, r2
   82d94:	ea81 0103 	eor.w	r1, r1, r3
   82d98:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   82d9c:	bfc2      	ittt	gt
   82d9e:	ebd4 050c 	rsbsgt	r5, r4, ip
   82da2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   82da6:	bd70      	popgt	{r4, r5, r6, pc}
   82da8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   82dac:	f04f 0e00 	mov.w	lr, #0
   82db0:	3c01      	subs	r4, #1
   82db2:	f300 80ab 	bgt.w	82f0c <__aeabi_dmul+0x238>
   82db6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   82dba:	bfde      	ittt	le
   82dbc:	2000      	movle	r0, #0
   82dbe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   82dc2:	bd70      	pople	{r4, r5, r6, pc}
   82dc4:	f1c4 0400 	rsb	r4, r4, #0
   82dc8:	3c20      	subs	r4, #32
   82dca:	da35      	bge.n	82e38 <__aeabi_dmul+0x164>
   82dcc:	340c      	adds	r4, #12
   82dce:	dc1b      	bgt.n	82e08 <__aeabi_dmul+0x134>
   82dd0:	f104 0414 	add.w	r4, r4, #20
   82dd4:	f1c4 0520 	rsb	r5, r4, #32
   82dd8:	fa00 f305 	lsl.w	r3, r0, r5
   82ddc:	fa20 f004 	lsr.w	r0, r0, r4
   82de0:	fa01 f205 	lsl.w	r2, r1, r5
   82de4:	ea40 0002 	orr.w	r0, r0, r2
   82de8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   82dec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   82df0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82df4:	fa21 f604 	lsr.w	r6, r1, r4
   82df8:	eb42 0106 	adc.w	r1, r2, r6
   82dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82e00:	bf08      	it	eq
   82e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82e06:	bd70      	pop	{r4, r5, r6, pc}
   82e08:	f1c4 040c 	rsb	r4, r4, #12
   82e0c:	f1c4 0520 	rsb	r5, r4, #32
   82e10:	fa00 f304 	lsl.w	r3, r0, r4
   82e14:	fa20 f005 	lsr.w	r0, r0, r5
   82e18:	fa01 f204 	lsl.w	r2, r1, r4
   82e1c:	ea40 0002 	orr.w	r0, r0, r2
   82e20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82e24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   82e28:	f141 0100 	adc.w	r1, r1, #0
   82e2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82e30:	bf08      	it	eq
   82e32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82e36:	bd70      	pop	{r4, r5, r6, pc}
   82e38:	f1c4 0520 	rsb	r5, r4, #32
   82e3c:	fa00 f205 	lsl.w	r2, r0, r5
   82e40:	ea4e 0e02 	orr.w	lr, lr, r2
   82e44:	fa20 f304 	lsr.w	r3, r0, r4
   82e48:	fa01 f205 	lsl.w	r2, r1, r5
   82e4c:	ea43 0302 	orr.w	r3, r3, r2
   82e50:	fa21 f004 	lsr.w	r0, r1, r4
   82e54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82e58:	fa21 f204 	lsr.w	r2, r1, r4
   82e5c:	ea20 0002 	bic.w	r0, r0, r2
   82e60:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   82e64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   82e68:	bf08      	it	eq
   82e6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   82e6e:	bd70      	pop	{r4, r5, r6, pc}
   82e70:	f094 0f00 	teq	r4, #0
   82e74:	d10f      	bne.n	82e96 <__aeabi_dmul+0x1c2>
   82e76:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   82e7a:	0040      	lsls	r0, r0, #1
   82e7c:	eb41 0101 	adc.w	r1, r1, r1
   82e80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   82e84:	bf08      	it	eq
   82e86:	3c01      	subeq	r4, #1
   82e88:	d0f7      	beq.n	82e7a <__aeabi_dmul+0x1a6>
   82e8a:	ea41 0106 	orr.w	r1, r1, r6
   82e8e:	f095 0f00 	teq	r5, #0
   82e92:	bf18      	it	ne
   82e94:	4770      	bxne	lr
   82e96:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   82e9a:	0052      	lsls	r2, r2, #1
   82e9c:	eb43 0303 	adc.w	r3, r3, r3
   82ea0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   82ea4:	bf08      	it	eq
   82ea6:	3d01      	subeq	r5, #1
   82ea8:	d0f7      	beq.n	82e9a <__aeabi_dmul+0x1c6>
   82eaa:	ea43 0306 	orr.w	r3, r3, r6
   82eae:	4770      	bx	lr
   82eb0:	ea94 0f0c 	teq	r4, ip
   82eb4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   82eb8:	bf18      	it	ne
   82eba:	ea95 0f0c 	teqne	r5, ip
   82ebe:	d00c      	beq.n	82eda <__aeabi_dmul+0x206>
   82ec0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82ec4:	bf18      	it	ne
   82ec6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82eca:	d1d1      	bne.n	82e70 <__aeabi_dmul+0x19c>
   82ecc:	ea81 0103 	eor.w	r1, r1, r3
   82ed0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82ed4:	f04f 0000 	mov.w	r0, #0
   82ed8:	bd70      	pop	{r4, r5, r6, pc}
   82eda:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   82ede:	bf06      	itte	eq
   82ee0:	4610      	moveq	r0, r2
   82ee2:	4619      	moveq	r1, r3
   82ee4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   82ee8:	d019      	beq.n	82f1e <__aeabi_dmul+0x24a>
   82eea:	ea94 0f0c 	teq	r4, ip
   82eee:	d102      	bne.n	82ef6 <__aeabi_dmul+0x222>
   82ef0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   82ef4:	d113      	bne.n	82f1e <__aeabi_dmul+0x24a>
   82ef6:	ea95 0f0c 	teq	r5, ip
   82efa:	d105      	bne.n	82f08 <__aeabi_dmul+0x234>
   82efc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   82f00:	bf1c      	itt	ne
   82f02:	4610      	movne	r0, r2
   82f04:	4619      	movne	r1, r3
   82f06:	d10a      	bne.n	82f1e <__aeabi_dmul+0x24a>
   82f08:	ea81 0103 	eor.w	r1, r1, r3
   82f0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   82f10:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82f14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   82f18:	f04f 0000 	mov.w	r0, #0
   82f1c:	bd70      	pop	{r4, r5, r6, pc}
   82f1e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   82f22:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   82f26:	bd70      	pop	{r4, r5, r6, pc}

00082f28 <__aeabi_ddiv>:
   82f28:	b570      	push	{r4, r5, r6, lr}
   82f2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   82f2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   82f32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   82f36:	bf1d      	ittte	ne
   82f38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   82f3c:	ea94 0f0c 	teqne	r4, ip
   82f40:	ea95 0f0c 	teqne	r5, ip
   82f44:	f000 f8a7 	bleq	83096 <__aeabi_ddiv+0x16e>
   82f48:	eba4 0405 	sub.w	r4, r4, r5
   82f4c:	ea81 0e03 	eor.w	lr, r1, r3
   82f50:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   82f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
   82f58:	f000 8088 	beq.w	8306c <__aeabi_ddiv+0x144>
   82f5c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   82f60:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   82f64:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   82f68:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   82f6c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   82f70:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   82f74:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   82f78:	ea4f 2600 	mov.w	r6, r0, lsl #8
   82f7c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   82f80:	429d      	cmp	r5, r3
   82f82:	bf08      	it	eq
   82f84:	4296      	cmpeq	r6, r2
   82f86:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   82f8a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   82f8e:	d202      	bcs.n	82f96 <__aeabi_ddiv+0x6e>
   82f90:	085b      	lsrs	r3, r3, #1
   82f92:	ea4f 0232 	mov.w	r2, r2, rrx
   82f96:	1ab6      	subs	r6, r6, r2
   82f98:	eb65 0503 	sbc.w	r5, r5, r3
   82f9c:	085b      	lsrs	r3, r3, #1
   82f9e:	ea4f 0232 	mov.w	r2, r2, rrx
   82fa2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   82fa6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   82faa:	ebb6 0e02 	subs.w	lr, r6, r2
   82fae:	eb75 0e03 	sbcs.w	lr, r5, r3
   82fb2:	bf22      	ittt	cs
   82fb4:	1ab6      	subcs	r6, r6, r2
   82fb6:	4675      	movcs	r5, lr
   82fb8:	ea40 000c 	orrcs.w	r0, r0, ip
   82fbc:	085b      	lsrs	r3, r3, #1
   82fbe:	ea4f 0232 	mov.w	r2, r2, rrx
   82fc2:	ebb6 0e02 	subs.w	lr, r6, r2
   82fc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   82fca:	bf22      	ittt	cs
   82fcc:	1ab6      	subcs	r6, r6, r2
   82fce:	4675      	movcs	r5, lr
   82fd0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   82fd4:	085b      	lsrs	r3, r3, #1
   82fd6:	ea4f 0232 	mov.w	r2, r2, rrx
   82fda:	ebb6 0e02 	subs.w	lr, r6, r2
   82fde:	eb75 0e03 	sbcs.w	lr, r5, r3
   82fe2:	bf22      	ittt	cs
   82fe4:	1ab6      	subcs	r6, r6, r2
   82fe6:	4675      	movcs	r5, lr
   82fe8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   82fec:	085b      	lsrs	r3, r3, #1
   82fee:	ea4f 0232 	mov.w	r2, r2, rrx
   82ff2:	ebb6 0e02 	subs.w	lr, r6, r2
   82ff6:	eb75 0e03 	sbcs.w	lr, r5, r3
   82ffa:	bf22      	ittt	cs
   82ffc:	1ab6      	subcs	r6, r6, r2
   82ffe:	4675      	movcs	r5, lr
   83000:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83004:	ea55 0e06 	orrs.w	lr, r5, r6
   83008:	d018      	beq.n	8303c <__aeabi_ddiv+0x114>
   8300a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8300e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83012:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83016:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8301a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8301e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83022:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83026:	d1c0      	bne.n	82faa <__aeabi_ddiv+0x82>
   83028:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8302c:	d10b      	bne.n	83046 <__aeabi_ddiv+0x11e>
   8302e:	ea41 0100 	orr.w	r1, r1, r0
   83032:	f04f 0000 	mov.w	r0, #0
   83036:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8303a:	e7b6      	b.n	82faa <__aeabi_ddiv+0x82>
   8303c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83040:	bf04      	itt	eq
   83042:	4301      	orreq	r1, r0
   83044:	2000      	moveq	r0, #0
   83046:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8304a:	bf88      	it	hi
   8304c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83050:	f63f aeaf 	bhi.w	82db2 <__aeabi_dmul+0xde>
   83054:	ebb5 0c03 	subs.w	ip, r5, r3
   83058:	bf04      	itt	eq
   8305a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8305e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83062:	f150 0000 	adcs.w	r0, r0, #0
   83066:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8306a:	bd70      	pop	{r4, r5, r6, pc}
   8306c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83070:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83074:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83078:	bfc2      	ittt	gt
   8307a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8307e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83082:	bd70      	popgt	{r4, r5, r6, pc}
   83084:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83088:	f04f 0e00 	mov.w	lr, #0
   8308c:	3c01      	subs	r4, #1
   8308e:	e690      	b.n	82db2 <__aeabi_dmul+0xde>
   83090:	ea45 0e06 	orr.w	lr, r5, r6
   83094:	e68d      	b.n	82db2 <__aeabi_dmul+0xde>
   83096:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8309a:	ea94 0f0c 	teq	r4, ip
   8309e:	bf08      	it	eq
   830a0:	ea95 0f0c 	teqeq	r5, ip
   830a4:	f43f af3b 	beq.w	82f1e <__aeabi_dmul+0x24a>
   830a8:	ea94 0f0c 	teq	r4, ip
   830ac:	d10a      	bne.n	830c4 <__aeabi_ddiv+0x19c>
   830ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   830b2:	f47f af34 	bne.w	82f1e <__aeabi_dmul+0x24a>
   830b6:	ea95 0f0c 	teq	r5, ip
   830ba:	f47f af25 	bne.w	82f08 <__aeabi_dmul+0x234>
   830be:	4610      	mov	r0, r2
   830c0:	4619      	mov	r1, r3
   830c2:	e72c      	b.n	82f1e <__aeabi_dmul+0x24a>
   830c4:	ea95 0f0c 	teq	r5, ip
   830c8:	d106      	bne.n	830d8 <__aeabi_ddiv+0x1b0>
   830ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   830ce:	f43f aefd 	beq.w	82ecc <__aeabi_dmul+0x1f8>
   830d2:	4610      	mov	r0, r2
   830d4:	4619      	mov	r1, r3
   830d6:	e722      	b.n	82f1e <__aeabi_dmul+0x24a>
   830d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   830dc:	bf18      	it	ne
   830de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   830e2:	f47f aec5 	bne.w	82e70 <__aeabi_dmul+0x19c>
   830e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   830ea:	f47f af0d 	bne.w	82f08 <__aeabi_dmul+0x234>
   830ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   830f2:	f47f aeeb 	bne.w	82ecc <__aeabi_dmul+0x1f8>
   830f6:	e712      	b.n	82f1e <__aeabi_dmul+0x24a>

000830f8 <__aeabi_d2iz>:
   830f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   830fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83100:	d215      	bcs.n	8312e <__aeabi_d2iz+0x36>
   83102:	d511      	bpl.n	83128 <__aeabi_d2iz+0x30>
   83104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8310c:	d912      	bls.n	83134 <__aeabi_d2iz+0x3c>
   8310e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8311a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8311e:	fa23 f002 	lsr.w	r0, r3, r2
   83122:	bf18      	it	ne
   83124:	4240      	negne	r0, r0
   83126:	4770      	bx	lr
   83128:	f04f 0000 	mov.w	r0, #0
   8312c:	4770      	bx	lr
   8312e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83132:	d105      	bne.n	83140 <__aeabi_d2iz+0x48>
   83134:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83138:	bf08      	it	eq
   8313a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8313e:	4770      	bx	lr
   83140:	f04f 0000 	mov.w	r0, #0
   83144:	4770      	bx	lr
   83146:	bf00      	nop

00083148 <__libc_init_array>:
   83148:	b570      	push	{r4, r5, r6, lr}
   8314a:	4e0f      	ldr	r6, [pc, #60]	; (83188 <__libc_init_array+0x40>)
   8314c:	4d0f      	ldr	r5, [pc, #60]	; (8318c <__libc_init_array+0x44>)
   8314e:	1b76      	subs	r6, r6, r5
   83150:	10b6      	asrs	r6, r6, #2
   83152:	bf18      	it	ne
   83154:	2400      	movne	r4, #0
   83156:	d005      	beq.n	83164 <__libc_init_array+0x1c>
   83158:	3401      	adds	r4, #1
   8315a:	f855 3b04 	ldr.w	r3, [r5], #4
   8315e:	4798      	blx	r3
   83160:	42a6      	cmp	r6, r4
   83162:	d1f9      	bne.n	83158 <__libc_init_array+0x10>
   83164:	4e0a      	ldr	r6, [pc, #40]	; (83190 <__libc_init_array+0x48>)
   83166:	4d0b      	ldr	r5, [pc, #44]	; (83194 <__libc_init_array+0x4c>)
   83168:	f003 f852 	bl	86210 <_init>
   8316c:	1b76      	subs	r6, r6, r5
   8316e:	10b6      	asrs	r6, r6, #2
   83170:	bf18      	it	ne
   83172:	2400      	movne	r4, #0
   83174:	d006      	beq.n	83184 <__libc_init_array+0x3c>
   83176:	3401      	adds	r4, #1
   83178:	f855 3b04 	ldr.w	r3, [r5], #4
   8317c:	4798      	blx	r3
   8317e:	42a6      	cmp	r6, r4
   83180:	d1f9      	bne.n	83176 <__libc_init_array+0x2e>
   83182:	bd70      	pop	{r4, r5, r6, pc}
   83184:	bd70      	pop	{r4, r5, r6, pc}
   83186:	bf00      	nop
   83188:	0008621c 	.word	0x0008621c
   8318c:	0008621c 	.word	0x0008621c
   83190:	00086224 	.word	0x00086224
   83194:	0008621c 	.word	0x0008621c

00083198 <iprintf>:
   83198:	b40f      	push	{r0, r1, r2, r3}
   8319a:	b510      	push	{r4, lr}
   8319c:	4b07      	ldr	r3, [pc, #28]	; (831bc <iprintf+0x24>)
   8319e:	b082      	sub	sp, #8
   831a0:	ac04      	add	r4, sp, #16
   831a2:	f854 2b04 	ldr.w	r2, [r4], #4
   831a6:	6818      	ldr	r0, [r3, #0]
   831a8:	4623      	mov	r3, r4
   831aa:	6881      	ldr	r1, [r0, #8]
   831ac:	9401      	str	r4, [sp, #4]
   831ae:	f000 fa19 	bl	835e4 <_vfiprintf_r>
   831b2:	b002      	add	sp, #8
   831b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   831b8:	b004      	add	sp, #16
   831ba:	4770      	bx	lr
   831bc:	20070568 	.word	0x20070568

000831c0 <memcpy>:
   831c0:	4684      	mov	ip, r0
   831c2:	ea41 0300 	orr.w	r3, r1, r0
   831c6:	f013 0303 	ands.w	r3, r3, #3
   831ca:	d149      	bne.n	83260 <memcpy+0xa0>
   831cc:	3a40      	subs	r2, #64	; 0x40
   831ce:	d323      	bcc.n	83218 <memcpy+0x58>
   831d0:	680b      	ldr	r3, [r1, #0]
   831d2:	6003      	str	r3, [r0, #0]
   831d4:	684b      	ldr	r3, [r1, #4]
   831d6:	6043      	str	r3, [r0, #4]
   831d8:	688b      	ldr	r3, [r1, #8]
   831da:	6083      	str	r3, [r0, #8]
   831dc:	68cb      	ldr	r3, [r1, #12]
   831de:	60c3      	str	r3, [r0, #12]
   831e0:	690b      	ldr	r3, [r1, #16]
   831e2:	6103      	str	r3, [r0, #16]
   831e4:	694b      	ldr	r3, [r1, #20]
   831e6:	6143      	str	r3, [r0, #20]
   831e8:	698b      	ldr	r3, [r1, #24]
   831ea:	6183      	str	r3, [r0, #24]
   831ec:	69cb      	ldr	r3, [r1, #28]
   831ee:	61c3      	str	r3, [r0, #28]
   831f0:	6a0b      	ldr	r3, [r1, #32]
   831f2:	6203      	str	r3, [r0, #32]
   831f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   831f6:	6243      	str	r3, [r0, #36]	; 0x24
   831f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   831fa:	6283      	str	r3, [r0, #40]	; 0x28
   831fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   831fe:	62c3      	str	r3, [r0, #44]	; 0x2c
   83200:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83202:	6303      	str	r3, [r0, #48]	; 0x30
   83204:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83206:	6343      	str	r3, [r0, #52]	; 0x34
   83208:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8320a:	6383      	str	r3, [r0, #56]	; 0x38
   8320c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8320e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83210:	3040      	adds	r0, #64	; 0x40
   83212:	3140      	adds	r1, #64	; 0x40
   83214:	3a40      	subs	r2, #64	; 0x40
   83216:	d2db      	bcs.n	831d0 <memcpy+0x10>
   83218:	3230      	adds	r2, #48	; 0x30
   8321a:	d30b      	bcc.n	83234 <memcpy+0x74>
   8321c:	680b      	ldr	r3, [r1, #0]
   8321e:	6003      	str	r3, [r0, #0]
   83220:	684b      	ldr	r3, [r1, #4]
   83222:	6043      	str	r3, [r0, #4]
   83224:	688b      	ldr	r3, [r1, #8]
   83226:	6083      	str	r3, [r0, #8]
   83228:	68cb      	ldr	r3, [r1, #12]
   8322a:	60c3      	str	r3, [r0, #12]
   8322c:	3010      	adds	r0, #16
   8322e:	3110      	adds	r1, #16
   83230:	3a10      	subs	r2, #16
   83232:	d2f3      	bcs.n	8321c <memcpy+0x5c>
   83234:	320c      	adds	r2, #12
   83236:	d305      	bcc.n	83244 <memcpy+0x84>
   83238:	f851 3b04 	ldr.w	r3, [r1], #4
   8323c:	f840 3b04 	str.w	r3, [r0], #4
   83240:	3a04      	subs	r2, #4
   83242:	d2f9      	bcs.n	83238 <memcpy+0x78>
   83244:	3204      	adds	r2, #4
   83246:	d008      	beq.n	8325a <memcpy+0x9a>
   83248:	07d2      	lsls	r2, r2, #31
   8324a:	bf1c      	itt	ne
   8324c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83250:	f800 3b01 	strbne.w	r3, [r0], #1
   83254:	d301      	bcc.n	8325a <memcpy+0x9a>
   83256:	880b      	ldrh	r3, [r1, #0]
   83258:	8003      	strh	r3, [r0, #0]
   8325a:	4660      	mov	r0, ip
   8325c:	4770      	bx	lr
   8325e:	bf00      	nop
   83260:	2a08      	cmp	r2, #8
   83262:	d313      	bcc.n	8328c <memcpy+0xcc>
   83264:	078b      	lsls	r3, r1, #30
   83266:	d0b1      	beq.n	831cc <memcpy+0xc>
   83268:	f010 0303 	ands.w	r3, r0, #3
   8326c:	d0ae      	beq.n	831cc <memcpy+0xc>
   8326e:	f1c3 0304 	rsb	r3, r3, #4
   83272:	1ad2      	subs	r2, r2, r3
   83274:	07db      	lsls	r3, r3, #31
   83276:	bf1c      	itt	ne
   83278:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8327c:	f800 3b01 	strbne.w	r3, [r0], #1
   83280:	d3a4      	bcc.n	831cc <memcpy+0xc>
   83282:	f831 3b02 	ldrh.w	r3, [r1], #2
   83286:	f820 3b02 	strh.w	r3, [r0], #2
   8328a:	e79f      	b.n	831cc <memcpy+0xc>
   8328c:	3a04      	subs	r2, #4
   8328e:	d3d9      	bcc.n	83244 <memcpy+0x84>
   83290:	3a01      	subs	r2, #1
   83292:	f811 3b01 	ldrb.w	r3, [r1], #1
   83296:	f800 3b01 	strb.w	r3, [r0], #1
   8329a:	d2f9      	bcs.n	83290 <memcpy+0xd0>
   8329c:	780b      	ldrb	r3, [r1, #0]
   8329e:	7003      	strb	r3, [r0, #0]
   832a0:	784b      	ldrb	r3, [r1, #1]
   832a2:	7043      	strb	r3, [r0, #1]
   832a4:	788b      	ldrb	r3, [r1, #2]
   832a6:	7083      	strb	r3, [r0, #2]
   832a8:	4660      	mov	r0, ip
   832aa:	4770      	bx	lr

000832ac <memset>:
   832ac:	b470      	push	{r4, r5, r6}
   832ae:	0784      	lsls	r4, r0, #30
   832b0:	d046      	beq.n	83340 <memset+0x94>
   832b2:	1e54      	subs	r4, r2, #1
   832b4:	2a00      	cmp	r2, #0
   832b6:	d041      	beq.n	8333c <memset+0x90>
   832b8:	b2cd      	uxtb	r5, r1
   832ba:	4603      	mov	r3, r0
   832bc:	e002      	b.n	832c4 <memset+0x18>
   832be:	1e62      	subs	r2, r4, #1
   832c0:	b3e4      	cbz	r4, 8333c <memset+0x90>
   832c2:	4614      	mov	r4, r2
   832c4:	f803 5b01 	strb.w	r5, [r3], #1
   832c8:	079a      	lsls	r2, r3, #30
   832ca:	d1f8      	bne.n	832be <memset+0x12>
   832cc:	2c03      	cmp	r4, #3
   832ce:	d92e      	bls.n	8332e <memset+0x82>
   832d0:	b2cd      	uxtb	r5, r1
   832d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   832d6:	2c0f      	cmp	r4, #15
   832d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   832dc:	d919      	bls.n	83312 <memset+0x66>
   832de:	4626      	mov	r6, r4
   832e0:	f103 0210 	add.w	r2, r3, #16
   832e4:	3e10      	subs	r6, #16
   832e6:	2e0f      	cmp	r6, #15
   832e8:	f842 5c10 	str.w	r5, [r2, #-16]
   832ec:	f842 5c0c 	str.w	r5, [r2, #-12]
   832f0:	f842 5c08 	str.w	r5, [r2, #-8]
   832f4:	f842 5c04 	str.w	r5, [r2, #-4]
   832f8:	f102 0210 	add.w	r2, r2, #16
   832fc:	d8f2      	bhi.n	832e4 <memset+0x38>
   832fe:	f1a4 0210 	sub.w	r2, r4, #16
   83302:	f022 020f 	bic.w	r2, r2, #15
   83306:	f004 040f 	and.w	r4, r4, #15
   8330a:	3210      	adds	r2, #16
   8330c:	2c03      	cmp	r4, #3
   8330e:	4413      	add	r3, r2
   83310:	d90d      	bls.n	8332e <memset+0x82>
   83312:	461e      	mov	r6, r3
   83314:	4622      	mov	r2, r4
   83316:	3a04      	subs	r2, #4
   83318:	2a03      	cmp	r2, #3
   8331a:	f846 5b04 	str.w	r5, [r6], #4
   8331e:	d8fa      	bhi.n	83316 <memset+0x6a>
   83320:	1f22      	subs	r2, r4, #4
   83322:	f022 0203 	bic.w	r2, r2, #3
   83326:	3204      	adds	r2, #4
   83328:	4413      	add	r3, r2
   8332a:	f004 0403 	and.w	r4, r4, #3
   8332e:	b12c      	cbz	r4, 8333c <memset+0x90>
   83330:	b2c9      	uxtb	r1, r1
   83332:	441c      	add	r4, r3
   83334:	f803 1b01 	strb.w	r1, [r3], #1
   83338:	42a3      	cmp	r3, r4
   8333a:	d1fb      	bne.n	83334 <memset+0x88>
   8333c:	bc70      	pop	{r4, r5, r6}
   8333e:	4770      	bx	lr
   83340:	4614      	mov	r4, r2
   83342:	4603      	mov	r3, r0
   83344:	e7c2      	b.n	832cc <memset+0x20>
   83346:	bf00      	nop

00083348 <setbuf>:
   83348:	2900      	cmp	r1, #0
   8334a:	bf0c      	ite	eq
   8334c:	2202      	moveq	r2, #2
   8334e:	2200      	movne	r2, #0
   83350:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83354:	f000 b800 	b.w	83358 <setvbuf>

00083358 <setvbuf>:
   83358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8335c:	4d51      	ldr	r5, [pc, #324]	; (834a4 <setvbuf+0x14c>)
   8335e:	b083      	sub	sp, #12
   83360:	682d      	ldr	r5, [r5, #0]
   83362:	4604      	mov	r4, r0
   83364:	460f      	mov	r7, r1
   83366:	4690      	mov	r8, r2
   83368:	461e      	mov	r6, r3
   8336a:	b115      	cbz	r5, 83372 <setvbuf+0x1a>
   8336c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8336e:	2b00      	cmp	r3, #0
   83370:	d079      	beq.n	83466 <setvbuf+0x10e>
   83372:	f1b8 0f02 	cmp.w	r8, #2
   83376:	d004      	beq.n	83382 <setvbuf+0x2a>
   83378:	f1b8 0f01 	cmp.w	r8, #1
   8337c:	d87f      	bhi.n	8347e <setvbuf+0x126>
   8337e:	2e00      	cmp	r6, #0
   83380:	db7d      	blt.n	8347e <setvbuf+0x126>
   83382:	4621      	mov	r1, r4
   83384:	4628      	mov	r0, r5
   83386:	f001 f96f 	bl	84668 <_fflush_r>
   8338a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8338c:	b141      	cbz	r1, 833a0 <setvbuf+0x48>
   8338e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83392:	4299      	cmp	r1, r3
   83394:	d002      	beq.n	8339c <setvbuf+0x44>
   83396:	4628      	mov	r0, r5
   83398:	f001 fac2 	bl	84920 <_free_r>
   8339c:	2300      	movs	r3, #0
   8339e:	6323      	str	r3, [r4, #48]	; 0x30
   833a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   833a4:	2200      	movs	r2, #0
   833a6:	61a2      	str	r2, [r4, #24]
   833a8:	6062      	str	r2, [r4, #4]
   833aa:	061a      	lsls	r2, r3, #24
   833ac:	d454      	bmi.n	83458 <setvbuf+0x100>
   833ae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   833b2:	f023 0303 	bic.w	r3, r3, #3
   833b6:	f1b8 0f02 	cmp.w	r8, #2
   833ba:	81a3      	strh	r3, [r4, #12]
   833bc:	d039      	beq.n	83432 <setvbuf+0xda>
   833be:	ab01      	add	r3, sp, #4
   833c0:	466a      	mov	r2, sp
   833c2:	4621      	mov	r1, r4
   833c4:	4628      	mov	r0, r5
   833c6:	f001 fd49 	bl	84e5c <__swhatbuf_r>
   833ca:	89a3      	ldrh	r3, [r4, #12]
   833cc:	4318      	orrs	r0, r3
   833ce:	81a0      	strh	r0, [r4, #12]
   833d0:	b326      	cbz	r6, 8341c <setvbuf+0xc4>
   833d2:	b327      	cbz	r7, 8341e <setvbuf+0xc6>
   833d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   833d6:	2b00      	cmp	r3, #0
   833d8:	d04d      	beq.n	83476 <setvbuf+0x11e>
   833da:	9b00      	ldr	r3, [sp, #0]
   833dc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   833e0:	429e      	cmp	r6, r3
   833e2:	bf1c      	itt	ne
   833e4:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   833e8:	81a0      	strhne	r0, [r4, #12]
   833ea:	f1b8 0f01 	cmp.w	r8, #1
   833ee:	bf08      	it	eq
   833f0:	f040 0001 	orreq.w	r0, r0, #1
   833f4:	b283      	uxth	r3, r0
   833f6:	bf08      	it	eq
   833f8:	81a0      	strheq	r0, [r4, #12]
   833fa:	f003 0008 	and.w	r0, r3, #8
   833fe:	b280      	uxth	r0, r0
   83400:	6027      	str	r7, [r4, #0]
   83402:	6127      	str	r7, [r4, #16]
   83404:	6166      	str	r6, [r4, #20]
   83406:	b318      	cbz	r0, 83450 <setvbuf+0xf8>
   83408:	f013 0001 	ands.w	r0, r3, #1
   8340c:	d02f      	beq.n	8346e <setvbuf+0x116>
   8340e:	2000      	movs	r0, #0
   83410:	4276      	negs	r6, r6
   83412:	61a6      	str	r6, [r4, #24]
   83414:	60a0      	str	r0, [r4, #8]
   83416:	b003      	add	sp, #12
   83418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8341c:	9e00      	ldr	r6, [sp, #0]
   8341e:	4630      	mov	r0, r6
   83420:	f001 fd90 	bl	84f44 <malloc>
   83424:	4607      	mov	r7, r0
   83426:	b368      	cbz	r0, 83484 <setvbuf+0x12c>
   83428:	89a3      	ldrh	r3, [r4, #12]
   8342a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8342e:	81a3      	strh	r3, [r4, #12]
   83430:	e7d0      	b.n	833d4 <setvbuf+0x7c>
   83432:	2000      	movs	r0, #0
   83434:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83438:	f043 0302 	orr.w	r3, r3, #2
   8343c:	2500      	movs	r5, #0
   8343e:	2101      	movs	r1, #1
   83440:	81a3      	strh	r3, [r4, #12]
   83442:	60a5      	str	r5, [r4, #8]
   83444:	6022      	str	r2, [r4, #0]
   83446:	6122      	str	r2, [r4, #16]
   83448:	6161      	str	r1, [r4, #20]
   8344a:	b003      	add	sp, #12
   8344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83450:	60a0      	str	r0, [r4, #8]
   83452:	b003      	add	sp, #12
   83454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83458:	6921      	ldr	r1, [r4, #16]
   8345a:	4628      	mov	r0, r5
   8345c:	f001 fa60 	bl	84920 <_free_r>
   83460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83464:	e7a3      	b.n	833ae <setvbuf+0x56>
   83466:	4628      	mov	r0, r5
   83468:	f001 f992 	bl	84790 <__sinit>
   8346c:	e781      	b.n	83372 <setvbuf+0x1a>
   8346e:	60a6      	str	r6, [r4, #8]
   83470:	b003      	add	sp, #12
   83472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83476:	4628      	mov	r0, r5
   83478:	f001 f98a 	bl	84790 <__sinit>
   8347c:	e7ad      	b.n	833da <setvbuf+0x82>
   8347e:	f04f 30ff 	mov.w	r0, #4294967295
   83482:	e7e2      	b.n	8344a <setvbuf+0xf2>
   83484:	f8dd 9000 	ldr.w	r9, [sp]
   83488:	45b1      	cmp	r9, r6
   8348a:	d006      	beq.n	8349a <setvbuf+0x142>
   8348c:	4648      	mov	r0, r9
   8348e:	f001 fd59 	bl	84f44 <malloc>
   83492:	4607      	mov	r7, r0
   83494:	b108      	cbz	r0, 8349a <setvbuf+0x142>
   83496:	464e      	mov	r6, r9
   83498:	e7c6      	b.n	83428 <setvbuf+0xd0>
   8349a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8349e:	f04f 30ff 	mov.w	r0, #4294967295
   834a2:	e7c7      	b.n	83434 <setvbuf+0xdc>
   834a4:	20070568 	.word	0x20070568

000834a8 <strlen>:
   834a8:	f020 0103 	bic.w	r1, r0, #3
   834ac:	f010 0003 	ands.w	r0, r0, #3
   834b0:	f1c0 0000 	rsb	r0, r0, #0
   834b4:	f851 3b04 	ldr.w	r3, [r1], #4
   834b8:	f100 0c04 	add.w	ip, r0, #4
   834bc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   834c0:	f06f 0200 	mvn.w	r2, #0
   834c4:	bf1c      	itt	ne
   834c6:	fa22 f20c 	lsrne.w	r2, r2, ip
   834ca:	4313      	orrne	r3, r2
   834cc:	f04f 0c01 	mov.w	ip, #1
   834d0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   834d4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   834d8:	eba3 020c 	sub.w	r2, r3, ip
   834dc:	ea22 0203 	bic.w	r2, r2, r3
   834e0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   834e4:	bf04      	itt	eq
   834e6:	f851 3b04 	ldreq.w	r3, [r1], #4
   834ea:	3004      	addeq	r0, #4
   834ec:	d0f4      	beq.n	834d8 <strlen+0x30>
   834ee:	f1c2 0100 	rsb	r1, r2, #0
   834f2:	ea02 0201 	and.w	r2, r2, r1
   834f6:	fab2 f282 	clz	r2, r2
   834fa:	f1c2 021f 	rsb	r2, r2, #31
   834fe:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83502:	4770      	bx	lr

00083504 <strncpy>:
   83504:	ea40 0301 	orr.w	r3, r0, r1
   83508:	079b      	lsls	r3, r3, #30
   8350a:	b470      	push	{r4, r5, r6}
   8350c:	d12b      	bne.n	83566 <strncpy+0x62>
   8350e:	2a03      	cmp	r2, #3
   83510:	d929      	bls.n	83566 <strncpy+0x62>
   83512:	460c      	mov	r4, r1
   83514:	4603      	mov	r3, r0
   83516:	4621      	mov	r1, r4
   83518:	f854 6b04 	ldr.w	r6, [r4], #4
   8351c:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
   83520:	ea25 0506 	bic.w	r5, r5, r6
   83524:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
   83528:	d106      	bne.n	83538 <strncpy+0x34>
   8352a:	3a04      	subs	r2, #4
   8352c:	2a03      	cmp	r2, #3
   8352e:	f843 6b04 	str.w	r6, [r3], #4
   83532:	4621      	mov	r1, r4
   83534:	d8ef      	bhi.n	83516 <strncpy+0x12>
   83536:	b1a2      	cbz	r2, 83562 <strncpy+0x5e>
   83538:	780c      	ldrb	r4, [r1, #0]
   8353a:	3a01      	subs	r2, #1
   8353c:	701c      	strb	r4, [r3, #0]
   8353e:	3101      	adds	r1, #1
   83540:	3301      	adds	r3, #1
   83542:	b13c      	cbz	r4, 83554 <strncpy+0x50>
   83544:	b16a      	cbz	r2, 83562 <strncpy+0x5e>
   83546:	f811 4b01 	ldrb.w	r4, [r1], #1
   8354a:	3a01      	subs	r2, #1
   8354c:	f803 4b01 	strb.w	r4, [r3], #1
   83550:	2c00      	cmp	r4, #0
   83552:	d1f7      	bne.n	83544 <strncpy+0x40>
   83554:	b12a      	cbz	r2, 83562 <strncpy+0x5e>
   83556:	441a      	add	r2, r3
   83558:	2100      	movs	r1, #0
   8355a:	f803 1b01 	strb.w	r1, [r3], #1
   8355e:	429a      	cmp	r2, r3
   83560:	d1fb      	bne.n	8355a <strncpy+0x56>
   83562:	bc70      	pop	{r4, r5, r6}
   83564:	4770      	bx	lr
   83566:	4603      	mov	r3, r0
   83568:	e7e5      	b.n	83536 <strncpy+0x32>
   8356a:	bf00      	nop

0008356c <__sprint_r.part.0>:
   8356c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8356e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83572:	049c      	lsls	r4, r3, #18
   83574:	4692      	mov	sl, r2
   83576:	d52c      	bpl.n	835d2 <__sprint_r.part.0+0x66>
   83578:	6893      	ldr	r3, [r2, #8]
   8357a:	6812      	ldr	r2, [r2, #0]
   8357c:	b33b      	cbz	r3, 835ce <__sprint_r.part.0+0x62>
   8357e:	460f      	mov	r7, r1
   83580:	4680      	mov	r8, r0
   83582:	f102 0908 	add.w	r9, r2, #8
   83586:	e919 0060 	ldmdb	r9, {r5, r6}
   8358a:	08b6      	lsrs	r6, r6, #2
   8358c:	d017      	beq.n	835be <__sprint_r.part.0+0x52>
   8358e:	3d04      	subs	r5, #4
   83590:	2400      	movs	r4, #0
   83592:	e001      	b.n	83598 <__sprint_r.part.0+0x2c>
   83594:	42a6      	cmp	r6, r4
   83596:	d010      	beq.n	835ba <__sprint_r.part.0+0x4e>
   83598:	463a      	mov	r2, r7
   8359a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8359e:	4640      	mov	r0, r8
   835a0:	f001 f95e 	bl	84860 <_fputwc_r>
   835a4:	1c43      	adds	r3, r0, #1
   835a6:	f104 0401 	add.w	r4, r4, #1
   835aa:	d1f3      	bne.n	83594 <__sprint_r.part.0+0x28>
   835ac:	2300      	movs	r3, #0
   835ae:	f8ca 3008 	str.w	r3, [sl, #8]
   835b2:	f8ca 3004 	str.w	r3, [sl, #4]
   835b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   835ba:	f8da 3008 	ldr.w	r3, [sl, #8]
   835be:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   835c2:	f8ca 3008 	str.w	r3, [sl, #8]
   835c6:	f109 0908 	add.w	r9, r9, #8
   835ca:	2b00      	cmp	r3, #0
   835cc:	d1db      	bne.n	83586 <__sprint_r.part.0+0x1a>
   835ce:	2000      	movs	r0, #0
   835d0:	e7ec      	b.n	835ac <__sprint_r.part.0+0x40>
   835d2:	f001 fa8d 	bl	84af0 <__sfvwrite_r>
   835d6:	2300      	movs	r3, #0
   835d8:	f8ca 3008 	str.w	r3, [sl, #8]
   835dc:	f8ca 3004 	str.w	r3, [sl, #4]
   835e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000835e4 <_vfiprintf_r>:
   835e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835e8:	b0ab      	sub	sp, #172	; 0xac
   835ea:	461c      	mov	r4, r3
   835ec:	9100      	str	r1, [sp, #0]
   835ee:	4690      	mov	r8, r2
   835f0:	9304      	str	r3, [sp, #16]
   835f2:	9005      	str	r0, [sp, #20]
   835f4:	b118      	cbz	r0, 835fe <_vfiprintf_r+0x1a>
   835f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   835f8:	2b00      	cmp	r3, #0
   835fa:	f000 80de 	beq.w	837ba <_vfiprintf_r+0x1d6>
   835fe:	9800      	ldr	r0, [sp, #0]
   83600:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83604:	b28a      	uxth	r2, r1
   83606:	0495      	lsls	r5, r2, #18
   83608:	d407      	bmi.n	8361a <_vfiprintf_r+0x36>
   8360a:	6e43      	ldr	r3, [r0, #100]	; 0x64
   8360c:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83614:	8182      	strh	r2, [r0, #12]
   83616:	6643      	str	r3, [r0, #100]	; 0x64
   83618:	b292      	uxth	r2, r2
   8361a:	0711      	lsls	r1, r2, #28
   8361c:	f140 80b1 	bpl.w	83782 <_vfiprintf_r+0x19e>
   83620:	9b00      	ldr	r3, [sp, #0]
   83622:	691b      	ldr	r3, [r3, #16]
   83624:	2b00      	cmp	r3, #0
   83626:	f000 80ac 	beq.w	83782 <_vfiprintf_r+0x19e>
   8362a:	f002 021a 	and.w	r2, r2, #26
   8362e:	2a0a      	cmp	r2, #10
   83630:	f000 80b5 	beq.w	8379e <_vfiprintf_r+0x1ba>
   83634:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83638:	46d3      	mov	fp, sl
   8363a:	2300      	movs	r3, #0
   8363c:	9302      	str	r3, [sp, #8]
   8363e:	930f      	str	r3, [sp, #60]	; 0x3c
   83640:	930e      	str	r3, [sp, #56]	; 0x38
   83642:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83646:	f898 3000 	ldrb.w	r3, [r8]
   8364a:	4644      	mov	r4, r8
   8364c:	b1fb      	cbz	r3, 8368e <_vfiprintf_r+0xaa>
   8364e:	2b25      	cmp	r3, #37	; 0x25
   83650:	d102      	bne.n	83658 <_vfiprintf_r+0x74>
   83652:	e01c      	b.n	8368e <_vfiprintf_r+0xaa>
   83654:	2b25      	cmp	r3, #37	; 0x25
   83656:	d003      	beq.n	83660 <_vfiprintf_r+0x7c>
   83658:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8365c:	2b00      	cmp	r3, #0
   8365e:	d1f9      	bne.n	83654 <_vfiprintf_r+0x70>
   83660:	ebc8 0504 	rsb	r5, r8, r4
   83664:	b19d      	cbz	r5, 8368e <_vfiprintf_r+0xaa>
   83666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8366a:	3301      	adds	r3, #1
   8366c:	442a      	add	r2, r5
   8366e:	2b07      	cmp	r3, #7
   83670:	f8cb 8000 	str.w	r8, [fp]
   83674:	f8cb 5004 	str.w	r5, [fp, #4]
   83678:	920f      	str	r2, [sp, #60]	; 0x3c
   8367a:	930e      	str	r3, [sp, #56]	; 0x38
   8367c:	dd7b      	ble.n	83776 <_vfiprintf_r+0x192>
   8367e:	2a00      	cmp	r2, #0
   83680:	f040 851f 	bne.w	840c2 <_vfiprintf_r+0xade>
   83684:	46d3      	mov	fp, sl
   83686:	9b02      	ldr	r3, [sp, #8]
   83688:	920e      	str	r2, [sp, #56]	; 0x38
   8368a:	442b      	add	r3, r5
   8368c:	9302      	str	r3, [sp, #8]
   8368e:	7823      	ldrb	r3, [r4, #0]
   83690:	2b00      	cmp	r3, #0
   83692:	f000 843b 	beq.w	83f0c <_vfiprintf_r+0x928>
   83696:	f04f 0300 	mov.w	r3, #0
   8369a:	2100      	movs	r1, #0
   8369c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   836a0:	f104 0801 	add.w	r8, r4, #1
   836a4:	7863      	ldrb	r3, [r4, #1]
   836a6:	4608      	mov	r0, r1
   836a8:	460e      	mov	r6, r1
   836aa:	460c      	mov	r4, r1
   836ac:	f04f 32ff 	mov.w	r2, #4294967295
   836b0:	9201      	str	r2, [sp, #4]
   836b2:	f108 0801 	add.w	r8, r8, #1
   836b6:	f1a3 0220 	sub.w	r2, r3, #32
   836ba:	2a58      	cmp	r2, #88	; 0x58
   836bc:	f200 838b 	bhi.w	83dd6 <_vfiprintf_r+0x7f2>
   836c0:	e8df f012 	tbh	[pc, r2, lsl #1]
   836c4:	0389033d 	.word	0x0389033d
   836c8:	03450389 	.word	0x03450389
   836cc:	03890389 	.word	0x03890389
   836d0:	03890389 	.word	0x03890389
   836d4:	03890389 	.word	0x03890389
   836d8:	026b007e 	.word	0x026b007e
   836dc:	00860389 	.word	0x00860389
   836e0:	03890270 	.word	0x03890270
   836e4:	025d01cc 	.word	0x025d01cc
   836e8:	025d025d 	.word	0x025d025d
   836ec:	025d025d 	.word	0x025d025d
   836f0:	025d025d 	.word	0x025d025d
   836f4:	025d025d 	.word	0x025d025d
   836f8:	03890389 	.word	0x03890389
   836fc:	03890389 	.word	0x03890389
   83700:	03890389 	.word	0x03890389
   83704:	03890389 	.word	0x03890389
   83708:	03890389 	.word	0x03890389
   8370c:	038901d1 	.word	0x038901d1
   83710:	03890389 	.word	0x03890389
   83714:	03890389 	.word	0x03890389
   83718:	03890389 	.word	0x03890389
   8371c:	03890389 	.word	0x03890389
   83720:	021a0389 	.word	0x021a0389
   83724:	03890389 	.word	0x03890389
   83728:	03890389 	.word	0x03890389
   8372c:	02e50389 	.word	0x02e50389
   83730:	03890389 	.word	0x03890389
   83734:	03890308 	.word	0x03890308
   83738:	03890389 	.word	0x03890389
   8373c:	03890389 	.word	0x03890389
   83740:	03890389 	.word	0x03890389
   83744:	03890389 	.word	0x03890389
   83748:	032b0389 	.word	0x032b0389
   8374c:	03890382 	.word	0x03890382
   83750:	03890389 	.word	0x03890389
   83754:	0382035e 	.word	0x0382035e
   83758:	03890389 	.word	0x03890389
   8375c:	03890363 	.word	0x03890363
   83760:	028d0370 	.word	0x028d0370
   83764:	02e0008b 	.word	0x02e0008b
   83768:	02930389 	.word	0x02930389
   8376c:	02b20389 	.word	0x02b20389
   83770:	03890389 	.word	0x03890389
   83774:	034a      	.short	0x034a
   83776:	f10b 0b08 	add.w	fp, fp, #8
   8377a:	9b02      	ldr	r3, [sp, #8]
   8377c:	442b      	add	r3, r5
   8377e:	9302      	str	r3, [sp, #8]
   83780:	e785      	b.n	8368e <_vfiprintf_r+0xaa>
   83782:	9900      	ldr	r1, [sp, #0]
   83784:	9805      	ldr	r0, [sp, #20]
   83786:	f000 fe57 	bl	84438 <__swsetup_r>
   8378a:	2800      	cmp	r0, #0
   8378c:	f040 8545 	bne.w	8421a <_vfiprintf_r+0xc36>
   83790:	9b00      	ldr	r3, [sp, #0]
   83792:	899a      	ldrh	r2, [r3, #12]
   83794:	f002 021a 	and.w	r2, r2, #26
   83798:	2a0a      	cmp	r2, #10
   8379a:	f47f af4b 	bne.w	83634 <_vfiprintf_r+0x50>
   8379e:	9900      	ldr	r1, [sp, #0]
   837a0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   837a4:	2b00      	cmp	r3, #0
   837a6:	f6ff af45 	blt.w	83634 <_vfiprintf_r+0x50>
   837aa:	4623      	mov	r3, r4
   837ac:	4642      	mov	r2, r8
   837ae:	9805      	ldr	r0, [sp, #20]
   837b0:	f000 fe0c 	bl	843cc <__sbprintf>
   837b4:	b02b      	add	sp, #172	; 0xac
   837b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837ba:	f000 ffe9 	bl	84790 <__sinit>
   837be:	e71e      	b.n	835fe <_vfiprintf_r+0x1a>
   837c0:	9a04      	ldr	r2, [sp, #16]
   837c2:	4613      	mov	r3, r2
   837c4:	6814      	ldr	r4, [r2, #0]
   837c6:	3304      	adds	r3, #4
   837c8:	2c00      	cmp	r4, #0
   837ca:	9304      	str	r3, [sp, #16]
   837cc:	da02      	bge.n	837d4 <_vfiprintf_r+0x1f0>
   837ce:	4264      	negs	r4, r4
   837d0:	f046 0604 	orr.w	r6, r6, #4
   837d4:	f898 3000 	ldrb.w	r3, [r8]
   837d8:	e76b      	b.n	836b2 <_vfiprintf_r+0xce>
   837da:	f04f 0300 	mov.w	r3, #0
   837de:	9804      	ldr	r0, [sp, #16]
   837e0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   837e4:	4603      	mov	r3, r0
   837e6:	2130      	movs	r1, #48	; 0x30
   837e8:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   837ec:	9901      	ldr	r1, [sp, #4]
   837ee:	2278      	movs	r2, #120	; 0x78
   837f0:	2900      	cmp	r1, #0
   837f2:	9406      	str	r4, [sp, #24]
   837f4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   837f8:	6804      	ldr	r4, [r0, #0]
   837fa:	f103 0304 	add.w	r3, r3, #4
   837fe:	f04f 0500 	mov.w	r5, #0
   83802:	f046 0202 	orr.w	r2, r6, #2
   83806:	f2c0 850c 	blt.w	84222 <_vfiprintf_r+0xc3e>
   8380a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8380e:	ea54 0205 	orrs.w	r2, r4, r5
   83812:	f046 0602 	orr.w	r6, r6, #2
   83816:	9304      	str	r3, [sp, #16]
   83818:	f040 84b5 	bne.w	84186 <_vfiprintf_r+0xba2>
   8381c:	48b3      	ldr	r0, [pc, #716]	; (83aec <_vfiprintf_r+0x508>)
   8381e:	9b01      	ldr	r3, [sp, #4]
   83820:	2b00      	cmp	r3, #0
   83822:	f040 8462 	bne.w	840ea <_vfiprintf_r+0xb06>
   83826:	4699      	mov	r9, r3
   83828:	4657      	mov	r7, sl
   8382a:	2300      	movs	r3, #0
   8382c:	9301      	str	r3, [sp, #4]
   8382e:	9303      	str	r3, [sp, #12]
   83830:	9b01      	ldr	r3, [sp, #4]
   83832:	9a03      	ldr	r2, [sp, #12]
   83834:	4293      	cmp	r3, r2
   83836:	bfb8      	it	lt
   83838:	4613      	movlt	r3, r2
   8383a:	461d      	mov	r5, r3
   8383c:	f1b9 0f00 	cmp.w	r9, #0
   83840:	d000      	beq.n	83844 <_vfiprintf_r+0x260>
   83842:	3501      	adds	r5, #1
   83844:	f016 0302 	ands.w	r3, r6, #2
   83848:	9307      	str	r3, [sp, #28]
   8384a:	bf18      	it	ne
   8384c:	3502      	addne	r5, #2
   8384e:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   83852:	9308      	str	r3, [sp, #32]
   83854:	f040 82e8 	bne.w	83e28 <_vfiprintf_r+0x844>
   83858:	9b06      	ldr	r3, [sp, #24]
   8385a:	1b5c      	subs	r4, r3, r5
   8385c:	2c00      	cmp	r4, #0
   8385e:	f340 82e3 	ble.w	83e28 <_vfiprintf_r+0x844>
   83862:	2c10      	cmp	r4, #16
   83864:	f340 853c 	ble.w	842e0 <_vfiprintf_r+0xcfc>
   83868:	f8df 9284 	ldr.w	r9, [pc, #644]	; 83af0 <_vfiprintf_r+0x50c>
   8386c:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83870:	46dc      	mov	ip, fp
   83872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83874:	46c3      	mov	fp, r8
   83876:	2310      	movs	r3, #16
   83878:	46a8      	mov	r8, r5
   8387a:	4670      	mov	r0, lr
   8387c:	464d      	mov	r5, r9
   8387e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83882:	e007      	b.n	83894 <_vfiprintf_r+0x2b0>
   83884:	f100 0e02 	add.w	lr, r0, #2
   83888:	4608      	mov	r0, r1
   8388a:	f10c 0c08 	add.w	ip, ip, #8
   8388e:	3c10      	subs	r4, #16
   83890:	2c10      	cmp	r4, #16
   83892:	dd13      	ble.n	838bc <_vfiprintf_r+0x2d8>
   83894:	1c41      	adds	r1, r0, #1
   83896:	3210      	adds	r2, #16
   83898:	2907      	cmp	r1, #7
   8389a:	920f      	str	r2, [sp, #60]	; 0x3c
   8389c:	f8cc 5000 	str.w	r5, [ip]
   838a0:	f8cc 3004 	str.w	r3, [ip, #4]
   838a4:	910e      	str	r1, [sp, #56]	; 0x38
   838a6:	dded      	ble.n	83884 <_vfiprintf_r+0x2a0>
   838a8:	2a00      	cmp	r2, #0
   838aa:	f040 82a5 	bne.w	83df8 <_vfiprintf_r+0x814>
   838ae:	3c10      	subs	r4, #16
   838b0:	2c10      	cmp	r4, #16
   838b2:	4610      	mov	r0, r2
   838b4:	f04f 0e01 	mov.w	lr, #1
   838b8:	46d4      	mov	ip, sl
   838ba:	dceb      	bgt.n	83894 <_vfiprintf_r+0x2b0>
   838bc:	46a9      	mov	r9, r5
   838be:	4670      	mov	r0, lr
   838c0:	4645      	mov	r5, r8
   838c2:	46d8      	mov	r8, fp
   838c4:	46e3      	mov	fp, ip
   838c6:	4422      	add	r2, r4
   838c8:	2807      	cmp	r0, #7
   838ca:	920f      	str	r2, [sp, #60]	; 0x3c
   838cc:	f8cb 9000 	str.w	r9, [fp]
   838d0:	f8cb 4004 	str.w	r4, [fp, #4]
   838d4:	900e      	str	r0, [sp, #56]	; 0x38
   838d6:	f300 836d 	bgt.w	83fb4 <_vfiprintf_r+0x9d0>
   838da:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   838de:	f10b 0b08 	add.w	fp, fp, #8
   838e2:	f100 0e01 	add.w	lr, r0, #1
   838e6:	2b00      	cmp	r3, #0
   838e8:	f040 82a7 	bne.w	83e3a <_vfiprintf_r+0x856>
   838ec:	9b07      	ldr	r3, [sp, #28]
   838ee:	2b00      	cmp	r3, #0
   838f0:	f000 82ba 	beq.w	83e68 <_vfiprintf_r+0x884>
   838f4:	3202      	adds	r2, #2
   838f6:	a90c      	add	r1, sp, #48	; 0x30
   838f8:	2302      	movs	r3, #2
   838fa:	f1be 0f07 	cmp.w	lr, #7
   838fe:	920f      	str	r2, [sp, #60]	; 0x3c
   83900:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83904:	e88b 000a 	stmia.w	fp, {r1, r3}
   83908:	f340 8370 	ble.w	83fec <_vfiprintf_r+0xa08>
   8390c:	2a00      	cmp	r2, #0
   8390e:	f040 8400 	bne.w	84112 <_vfiprintf_r+0xb2e>
   83912:	9b08      	ldr	r3, [sp, #32]
   83914:	f04f 0e01 	mov.w	lr, #1
   83918:	2b80      	cmp	r3, #128	; 0x80
   8391a:	4610      	mov	r0, r2
   8391c:	46d3      	mov	fp, sl
   8391e:	f040 82a7 	bne.w	83e70 <_vfiprintf_r+0x88c>
   83922:	9b06      	ldr	r3, [sp, #24]
   83924:	1b5c      	subs	r4, r3, r5
   83926:	2c00      	cmp	r4, #0
   83928:	f340 82a2 	ble.w	83e70 <_vfiprintf_r+0x88c>
   8392c:	2c10      	cmp	r4, #16
   8392e:	f340 84f8 	ble.w	84322 <_vfiprintf_r+0xd3e>
   83932:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 83af4 <_vfiprintf_r+0x510>
   83936:	46de      	mov	lr, fp
   83938:	2310      	movs	r3, #16
   8393a:	46c3      	mov	fp, r8
   8393c:	46a8      	mov	r8, r5
   8393e:	464d      	mov	r5, r9
   83940:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83944:	e007      	b.n	83956 <_vfiprintf_r+0x372>
   83946:	f100 0c02 	add.w	ip, r0, #2
   8394a:	4608      	mov	r0, r1
   8394c:	f10e 0e08 	add.w	lr, lr, #8
   83950:	3c10      	subs	r4, #16
   83952:	2c10      	cmp	r4, #16
   83954:	dd13      	ble.n	8397e <_vfiprintf_r+0x39a>
   83956:	1c41      	adds	r1, r0, #1
   83958:	3210      	adds	r2, #16
   8395a:	2907      	cmp	r1, #7
   8395c:	920f      	str	r2, [sp, #60]	; 0x3c
   8395e:	f8ce 5000 	str.w	r5, [lr]
   83962:	f8ce 3004 	str.w	r3, [lr, #4]
   83966:	910e      	str	r1, [sp, #56]	; 0x38
   83968:	dded      	ble.n	83946 <_vfiprintf_r+0x362>
   8396a:	2a00      	cmp	r2, #0
   8396c:	f040 830c 	bne.w	83f88 <_vfiprintf_r+0x9a4>
   83970:	3c10      	subs	r4, #16
   83972:	2c10      	cmp	r4, #16
   83974:	f04f 0c01 	mov.w	ip, #1
   83978:	4610      	mov	r0, r2
   8397a:	46d6      	mov	lr, sl
   8397c:	dceb      	bgt.n	83956 <_vfiprintf_r+0x372>
   8397e:	46a9      	mov	r9, r5
   83980:	4645      	mov	r5, r8
   83982:	46d8      	mov	r8, fp
   83984:	46f3      	mov	fp, lr
   83986:	4422      	add	r2, r4
   83988:	f1bc 0f07 	cmp.w	ip, #7
   8398c:	920f      	str	r2, [sp, #60]	; 0x3c
   8398e:	f8cb 9000 	str.w	r9, [fp]
   83992:	f8cb 4004 	str.w	r4, [fp, #4]
   83996:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   8399a:	f300 83c8 	bgt.w	8412e <_vfiprintf_r+0xb4a>
   8399e:	9b01      	ldr	r3, [sp, #4]
   839a0:	9903      	ldr	r1, [sp, #12]
   839a2:	f10b 0b08 	add.w	fp, fp, #8
   839a6:	1a5c      	subs	r4, r3, r1
   839a8:	2c00      	cmp	r4, #0
   839aa:	f10c 0e01 	add.w	lr, ip, #1
   839ae:	4660      	mov	r0, ip
   839b0:	f300 8264 	bgt.w	83e7c <_vfiprintf_r+0x898>
   839b4:	9903      	ldr	r1, [sp, #12]
   839b6:	f1be 0f07 	cmp.w	lr, #7
   839ba:	440a      	add	r2, r1
   839bc:	920f      	str	r2, [sp, #60]	; 0x3c
   839be:	f8cb 7000 	str.w	r7, [fp]
   839c2:	f8cb 1004 	str.w	r1, [fp, #4]
   839c6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   839ca:	f340 82c5 	ble.w	83f58 <_vfiprintf_r+0x974>
   839ce:	2a00      	cmp	r2, #0
   839d0:	f040 8332 	bne.w	84038 <_vfiprintf_r+0xa54>
   839d4:	0770      	lsls	r0, r6, #29
   839d6:	920e      	str	r2, [sp, #56]	; 0x38
   839d8:	d538      	bpl.n	83a4c <_vfiprintf_r+0x468>
   839da:	9b06      	ldr	r3, [sp, #24]
   839dc:	1b5c      	subs	r4, r3, r5
   839de:	2c00      	cmp	r4, #0
   839e0:	dd34      	ble.n	83a4c <_vfiprintf_r+0x468>
   839e2:	46d3      	mov	fp, sl
   839e4:	2c10      	cmp	r4, #16
   839e6:	f340 8496 	ble.w	84316 <_vfiprintf_r+0xd32>
   839ea:	f8df 9104 	ldr.w	r9, [pc, #260]	; 83af0 <_vfiprintf_r+0x50c>
   839ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   839f0:	464f      	mov	r7, r9
   839f2:	2610      	movs	r6, #16
   839f4:	f8dd 9014 	ldr.w	r9, [sp, #20]
   839f8:	e006      	b.n	83a08 <_vfiprintf_r+0x424>
   839fa:	1c88      	adds	r0, r1, #2
   839fc:	4619      	mov	r1, r3
   839fe:	f10b 0b08 	add.w	fp, fp, #8
   83a02:	3c10      	subs	r4, #16
   83a04:	2c10      	cmp	r4, #16
   83a06:	dd13      	ble.n	83a30 <_vfiprintf_r+0x44c>
   83a08:	1c4b      	adds	r3, r1, #1
   83a0a:	3210      	adds	r2, #16
   83a0c:	2b07      	cmp	r3, #7
   83a0e:	920f      	str	r2, [sp, #60]	; 0x3c
   83a10:	f8cb 7000 	str.w	r7, [fp]
   83a14:	f8cb 6004 	str.w	r6, [fp, #4]
   83a18:	930e      	str	r3, [sp, #56]	; 0x38
   83a1a:	ddee      	ble.n	839fa <_vfiprintf_r+0x416>
   83a1c:	2a00      	cmp	r2, #0
   83a1e:	f040 8285 	bne.w	83f2c <_vfiprintf_r+0x948>
   83a22:	3c10      	subs	r4, #16
   83a24:	2c10      	cmp	r4, #16
   83a26:	f04f 0001 	mov.w	r0, #1
   83a2a:	4611      	mov	r1, r2
   83a2c:	46d3      	mov	fp, sl
   83a2e:	dceb      	bgt.n	83a08 <_vfiprintf_r+0x424>
   83a30:	46b9      	mov	r9, r7
   83a32:	4422      	add	r2, r4
   83a34:	2807      	cmp	r0, #7
   83a36:	920f      	str	r2, [sp, #60]	; 0x3c
   83a38:	f8cb 9000 	str.w	r9, [fp]
   83a3c:	f8cb 4004 	str.w	r4, [fp, #4]
   83a40:	900e      	str	r0, [sp, #56]	; 0x38
   83a42:	f340 8292 	ble.w	83f6a <_vfiprintf_r+0x986>
   83a46:	2a00      	cmp	r2, #0
   83a48:	f040 840c 	bne.w	84264 <_vfiprintf_r+0xc80>
   83a4c:	9b02      	ldr	r3, [sp, #8]
   83a4e:	9a06      	ldr	r2, [sp, #24]
   83a50:	42aa      	cmp	r2, r5
   83a52:	bfac      	ite	ge
   83a54:	189b      	addge	r3, r3, r2
   83a56:	195b      	addlt	r3, r3, r5
   83a58:	9302      	str	r3, [sp, #8]
   83a5a:	e290      	b.n	83f7e <_vfiprintf_r+0x99a>
   83a5c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   83a60:	f898 3000 	ldrb.w	r3, [r8]
   83a64:	e625      	b.n	836b2 <_vfiprintf_r+0xce>
   83a66:	9406      	str	r4, [sp, #24]
   83a68:	2900      	cmp	r1, #0
   83a6a:	f040 8485 	bne.w	84378 <_vfiprintf_r+0xd94>
   83a6e:	f046 0610 	orr.w	r6, r6, #16
   83a72:	06b3      	lsls	r3, r6, #26
   83a74:	f140 8304 	bpl.w	84080 <_vfiprintf_r+0xa9c>
   83a78:	9904      	ldr	r1, [sp, #16]
   83a7a:	3107      	adds	r1, #7
   83a7c:	f021 0107 	bic.w	r1, r1, #7
   83a80:	e9d1 2300 	ldrd	r2, r3, [r1]
   83a84:	4614      	mov	r4, r2
   83a86:	461d      	mov	r5, r3
   83a88:	3108      	adds	r1, #8
   83a8a:	9104      	str	r1, [sp, #16]
   83a8c:	2a00      	cmp	r2, #0
   83a8e:	f173 0300 	sbcs.w	r3, r3, #0
   83a92:	f2c0 837c 	blt.w	8418e <_vfiprintf_r+0xbaa>
   83a96:	9b01      	ldr	r3, [sp, #4]
   83a98:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83a9c:	2b00      	cmp	r3, #0
   83a9e:	f2c0 830b 	blt.w	840b8 <_vfiprintf_r+0xad4>
   83aa2:	ea54 0305 	orrs.w	r3, r4, r5
   83aa6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83aaa:	f000 80de 	beq.w	83c6a <_vfiprintf_r+0x686>
   83aae:	2d00      	cmp	r5, #0
   83ab0:	bf08      	it	eq
   83ab2:	2c0a      	cmpeq	r4, #10
   83ab4:	f0c0 80de 	bcc.w	83c74 <_vfiprintf_r+0x690>
   83ab8:	4657      	mov	r7, sl
   83aba:	4620      	mov	r0, r4
   83abc:	4629      	mov	r1, r5
   83abe:	220a      	movs	r2, #10
   83ac0:	2300      	movs	r3, #0
   83ac2:	f002 f97d 	bl	85dc0 <__aeabi_uldivmod>
   83ac6:	3230      	adds	r2, #48	; 0x30
   83ac8:	f807 2d01 	strb.w	r2, [r7, #-1]!
   83acc:	4620      	mov	r0, r4
   83ace:	4629      	mov	r1, r5
   83ad0:	2300      	movs	r3, #0
   83ad2:	220a      	movs	r2, #10
   83ad4:	f002 f974 	bl	85dc0 <__aeabi_uldivmod>
   83ad8:	4604      	mov	r4, r0
   83ada:	460d      	mov	r5, r1
   83adc:	ea54 0305 	orrs.w	r3, r4, r5
   83ae0:	d1eb      	bne.n	83aba <_vfiprintf_r+0x4d6>
   83ae2:	ebc7 030a 	rsb	r3, r7, sl
   83ae6:	9303      	str	r3, [sp, #12]
   83ae8:	e6a2      	b.n	83830 <_vfiprintf_r+0x24c>
   83aea:	bf00      	nop
   83aec:	000861e4 	.word	0x000861e4
   83af0:	00086200 	.word	0x00086200
   83af4:	000861c0 	.word	0x000861c0
   83af8:	9406      	str	r4, [sp, #24]
   83afa:	2900      	cmp	r1, #0
   83afc:	f040 8438 	bne.w	84370 <_vfiprintf_r+0xd8c>
   83b00:	f046 0610 	orr.w	r6, r6, #16
   83b04:	f016 0320 	ands.w	r3, r6, #32
   83b08:	f000 82a1 	beq.w	8404e <_vfiprintf_r+0xa6a>
   83b0c:	f04f 0200 	mov.w	r2, #0
   83b10:	9b04      	ldr	r3, [sp, #16]
   83b12:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   83b16:	3307      	adds	r3, #7
   83b18:	f023 0307 	bic.w	r3, r3, #7
   83b1c:	f103 0208 	add.w	r2, r3, #8
   83b20:	e9d3 4500 	ldrd	r4, r5, [r3]
   83b24:	9b01      	ldr	r3, [sp, #4]
   83b26:	9204      	str	r2, [sp, #16]
   83b28:	2b00      	cmp	r3, #0
   83b2a:	db0a      	blt.n	83b42 <_vfiprintf_r+0x55e>
   83b2c:	ea54 0305 	orrs.w	r3, r4, r5
   83b30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83b34:	d105      	bne.n	83b42 <_vfiprintf_r+0x55e>
   83b36:	9b01      	ldr	r3, [sp, #4]
   83b38:	2b00      	cmp	r3, #0
   83b3a:	f000 8427 	beq.w	8438c <_vfiprintf_r+0xda8>
   83b3e:	2400      	movs	r4, #0
   83b40:	2500      	movs	r5, #0
   83b42:	f04f 0900 	mov.w	r9, #0
   83b46:	4657      	mov	r7, sl
   83b48:	08e2      	lsrs	r2, r4, #3
   83b4a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   83b4e:	08e9      	lsrs	r1, r5, #3
   83b50:	f004 0307 	and.w	r3, r4, #7
   83b54:	460d      	mov	r5, r1
   83b56:	4614      	mov	r4, r2
   83b58:	3330      	adds	r3, #48	; 0x30
   83b5a:	ea54 0205 	orrs.w	r2, r4, r5
   83b5e:	f807 3d01 	strb.w	r3, [r7, #-1]!
   83b62:	d1f1      	bne.n	83b48 <_vfiprintf_r+0x564>
   83b64:	07f4      	lsls	r4, r6, #31
   83b66:	d5bc      	bpl.n	83ae2 <_vfiprintf_r+0x4fe>
   83b68:	2b30      	cmp	r3, #48	; 0x30
   83b6a:	d0ba      	beq.n	83ae2 <_vfiprintf_r+0x4fe>
   83b6c:	2230      	movs	r2, #48	; 0x30
   83b6e:	1e7b      	subs	r3, r7, #1
   83b70:	f807 2c01 	strb.w	r2, [r7, #-1]
   83b74:	ebc3 020a 	rsb	r2, r3, sl
   83b78:	9203      	str	r2, [sp, #12]
   83b7a:	461f      	mov	r7, r3
   83b7c:	e658      	b.n	83830 <_vfiprintf_r+0x24c>
   83b7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83b82:	2400      	movs	r4, #0
   83b84:	f818 3b01 	ldrb.w	r3, [r8], #1
   83b88:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83b8c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   83b90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83b94:	2a09      	cmp	r2, #9
   83b96:	d9f5      	bls.n	83b84 <_vfiprintf_r+0x5a0>
   83b98:	e58d      	b.n	836b6 <_vfiprintf_r+0xd2>
   83b9a:	f898 3000 	ldrb.w	r3, [r8]
   83b9e:	2101      	movs	r1, #1
   83ba0:	202b      	movs	r0, #43	; 0x2b
   83ba2:	e586      	b.n	836b2 <_vfiprintf_r+0xce>
   83ba4:	f898 3000 	ldrb.w	r3, [r8]
   83ba8:	f108 0501 	add.w	r5, r8, #1
   83bac:	2b2a      	cmp	r3, #42	; 0x2a
   83bae:	f000 83cc 	beq.w	8434a <_vfiprintf_r+0xd66>
   83bb2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83bb6:	2a09      	cmp	r2, #9
   83bb8:	46a8      	mov	r8, r5
   83bba:	bf98      	it	ls
   83bbc:	2500      	movls	r5, #0
   83bbe:	f200 83b5 	bhi.w	8432c <_vfiprintf_r+0xd48>
   83bc2:	f818 3b01 	ldrb.w	r3, [r8], #1
   83bc6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   83bca:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   83bce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   83bd2:	2a09      	cmp	r2, #9
   83bd4:	d9f5      	bls.n	83bc2 <_vfiprintf_r+0x5de>
   83bd6:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   83bda:	9201      	str	r2, [sp, #4]
   83bdc:	e56b      	b.n	836b6 <_vfiprintf_r+0xd2>
   83bde:	9406      	str	r4, [sp, #24]
   83be0:	2900      	cmp	r1, #0
   83be2:	d08f      	beq.n	83b04 <_vfiprintf_r+0x520>
   83be4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83be8:	e78c      	b.n	83b04 <_vfiprintf_r+0x520>
   83bea:	f04f 0300 	mov.w	r3, #0
   83bee:	9a04      	ldr	r2, [sp, #16]
   83bf0:	9406      	str	r4, [sp, #24]
   83bf2:	6817      	ldr	r7, [r2, #0]
   83bf4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83bf8:	1d14      	adds	r4, r2, #4
   83bfa:	9b01      	ldr	r3, [sp, #4]
   83bfc:	2f00      	cmp	r7, #0
   83bfe:	f000 837f 	beq.w	84300 <_vfiprintf_r+0xd1c>
   83c02:	2b00      	cmp	r3, #0
   83c04:	f2c0 8353 	blt.w	842ae <_vfiprintf_r+0xcca>
   83c08:	461a      	mov	r2, r3
   83c0a:	2100      	movs	r1, #0
   83c0c:	4638      	mov	r0, r7
   83c0e:	f001 fc4d 	bl	854ac <memchr>
   83c12:	2800      	cmp	r0, #0
   83c14:	f000 838e 	beq.w	84334 <_vfiprintf_r+0xd50>
   83c18:	1bc3      	subs	r3, r0, r7
   83c1a:	9303      	str	r3, [sp, #12]
   83c1c:	2300      	movs	r3, #0
   83c1e:	9404      	str	r4, [sp, #16]
   83c20:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83c24:	9301      	str	r3, [sp, #4]
   83c26:	e603      	b.n	83830 <_vfiprintf_r+0x24c>
   83c28:	9406      	str	r4, [sp, #24]
   83c2a:	2900      	cmp	r1, #0
   83c2c:	f040 839d 	bne.w	8436a <_vfiprintf_r+0xd86>
   83c30:	f016 0920 	ands.w	r9, r6, #32
   83c34:	d134      	bne.n	83ca0 <_vfiprintf_r+0x6bc>
   83c36:	f016 0310 	ands.w	r3, r6, #16
   83c3a:	d103      	bne.n	83c44 <_vfiprintf_r+0x660>
   83c3c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   83c40:	f040 831f 	bne.w	84282 <_vfiprintf_r+0xc9e>
   83c44:	9a04      	ldr	r2, [sp, #16]
   83c46:	2500      	movs	r5, #0
   83c48:	4613      	mov	r3, r2
   83c4a:	6814      	ldr	r4, [r2, #0]
   83c4c:	9a01      	ldr	r2, [sp, #4]
   83c4e:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   83c52:	2a00      	cmp	r2, #0
   83c54:	f103 0304 	add.w	r3, r3, #4
   83c58:	f2c0 8327 	blt.w	842aa <_vfiprintf_r+0xcc6>
   83c5c:	ea54 0205 	orrs.w	r2, r4, r5
   83c60:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83c64:	9304      	str	r3, [sp, #16]
   83c66:	f47f af22 	bne.w	83aae <_vfiprintf_r+0x4ca>
   83c6a:	9b01      	ldr	r3, [sp, #4]
   83c6c:	2b00      	cmp	r3, #0
   83c6e:	f43f addb 	beq.w	83828 <_vfiprintf_r+0x244>
   83c72:	2400      	movs	r4, #0
   83c74:	af2a      	add	r7, sp, #168	; 0xa8
   83c76:	3430      	adds	r4, #48	; 0x30
   83c78:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83c7c:	ebc7 030a 	rsb	r3, r7, sl
   83c80:	9303      	str	r3, [sp, #12]
   83c82:	e5d5      	b.n	83830 <_vfiprintf_r+0x24c>
   83c84:	f046 0620 	orr.w	r6, r6, #32
   83c88:	f898 3000 	ldrb.w	r3, [r8]
   83c8c:	e511      	b.n	836b2 <_vfiprintf_r+0xce>
   83c8e:	9406      	str	r4, [sp, #24]
   83c90:	2900      	cmp	r1, #0
   83c92:	f040 8375 	bne.w	84380 <_vfiprintf_r+0xd9c>
   83c96:	f046 0610 	orr.w	r6, r6, #16
   83c9a:	f016 0920 	ands.w	r9, r6, #32
   83c9e:	d0ca      	beq.n	83c36 <_vfiprintf_r+0x652>
   83ca0:	f04f 0200 	mov.w	r2, #0
   83ca4:	9b04      	ldr	r3, [sp, #16]
   83ca6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   83caa:	3307      	adds	r3, #7
   83cac:	f023 0307 	bic.w	r3, r3, #7
   83cb0:	f103 0208 	add.w	r2, r3, #8
   83cb4:	e9d3 4500 	ldrd	r4, r5, [r3]
   83cb8:	9b01      	ldr	r3, [sp, #4]
   83cba:	9204      	str	r2, [sp, #16]
   83cbc:	2b00      	cmp	r3, #0
   83cbe:	f2c0 81f9 	blt.w	840b4 <_vfiprintf_r+0xad0>
   83cc2:	ea54 0305 	orrs.w	r3, r4, r5
   83cc6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83cca:	f04f 0900 	mov.w	r9, #0
   83cce:	f47f aeee 	bne.w	83aae <_vfiprintf_r+0x4ca>
   83cd2:	e7ca      	b.n	83c6a <_vfiprintf_r+0x686>
   83cd4:	9406      	str	r4, [sp, #24]
   83cd6:	2900      	cmp	r1, #0
   83cd8:	f040 8355 	bne.w	84386 <_vfiprintf_r+0xda2>
   83cdc:	06b2      	lsls	r2, r6, #26
   83cde:	48b2      	ldr	r0, [pc, #712]	; (83fa8 <_vfiprintf_r+0x9c4>)
   83ce0:	d541      	bpl.n	83d66 <_vfiprintf_r+0x782>
   83ce2:	9a04      	ldr	r2, [sp, #16]
   83ce4:	3207      	adds	r2, #7
   83ce6:	f022 0207 	bic.w	r2, r2, #7
   83cea:	f102 0108 	add.w	r1, r2, #8
   83cee:	9104      	str	r1, [sp, #16]
   83cf0:	e9d2 4500 	ldrd	r4, r5, [r2]
   83cf4:	f016 0901 	ands.w	r9, r6, #1
   83cf8:	f000 817e 	beq.w	83ff8 <_vfiprintf_r+0xa14>
   83cfc:	ea54 0205 	orrs.w	r2, r4, r5
   83d00:	f040 822b 	bne.w	8415a <_vfiprintf_r+0xb76>
   83d04:	f04f 0300 	mov.w	r3, #0
   83d08:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83d0c:	9b01      	ldr	r3, [sp, #4]
   83d0e:	2b00      	cmp	r3, #0
   83d10:	f2c0 82f3 	blt.w	842fa <_vfiprintf_r+0xd16>
   83d14:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83d18:	e581      	b.n	8381e <_vfiprintf_r+0x23a>
   83d1a:	9a04      	ldr	r2, [sp, #16]
   83d1c:	f04f 0100 	mov.w	r1, #0
   83d20:	6813      	ldr	r3, [r2, #0]
   83d22:	2501      	movs	r5, #1
   83d24:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83d28:	4613      	mov	r3, r2
   83d2a:	3304      	adds	r3, #4
   83d2c:	9406      	str	r4, [sp, #24]
   83d2e:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   83d32:	9304      	str	r3, [sp, #16]
   83d34:	9503      	str	r5, [sp, #12]
   83d36:	af10      	add	r7, sp, #64	; 0x40
   83d38:	2300      	movs	r3, #0
   83d3a:	9301      	str	r3, [sp, #4]
   83d3c:	e582      	b.n	83844 <_vfiprintf_r+0x260>
   83d3e:	f898 3000 	ldrb.w	r3, [r8]
   83d42:	2800      	cmp	r0, #0
   83d44:	f47f acb5 	bne.w	836b2 <_vfiprintf_r+0xce>
   83d48:	2101      	movs	r1, #1
   83d4a:	2020      	movs	r0, #32
   83d4c:	e4b1      	b.n	836b2 <_vfiprintf_r+0xce>
   83d4e:	f046 0601 	orr.w	r6, r6, #1
   83d52:	f898 3000 	ldrb.w	r3, [r8]
   83d56:	e4ac      	b.n	836b2 <_vfiprintf_r+0xce>
   83d58:	9406      	str	r4, [sp, #24]
   83d5a:	2900      	cmp	r1, #0
   83d5c:	f040 832a 	bne.w	843b4 <_vfiprintf_r+0xdd0>
   83d60:	06b2      	lsls	r2, r6, #26
   83d62:	4892      	ldr	r0, [pc, #584]	; (83fac <_vfiprintf_r+0x9c8>)
   83d64:	d4bd      	bmi.n	83ce2 <_vfiprintf_r+0x6fe>
   83d66:	9904      	ldr	r1, [sp, #16]
   83d68:	06f7      	lsls	r7, r6, #27
   83d6a:	460a      	mov	r2, r1
   83d6c:	f100 819d 	bmi.w	840aa <_vfiprintf_r+0xac6>
   83d70:	0675      	lsls	r5, r6, #25
   83d72:	f140 819a 	bpl.w	840aa <_vfiprintf_r+0xac6>
   83d76:	3204      	adds	r2, #4
   83d78:	880c      	ldrh	r4, [r1, #0]
   83d7a:	9204      	str	r2, [sp, #16]
   83d7c:	2500      	movs	r5, #0
   83d7e:	e7b9      	b.n	83cf4 <_vfiprintf_r+0x710>
   83d80:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   83d84:	f898 3000 	ldrb.w	r3, [r8]
   83d88:	e493      	b.n	836b2 <_vfiprintf_r+0xce>
   83d8a:	f898 3000 	ldrb.w	r3, [r8]
   83d8e:	2b6c      	cmp	r3, #108	; 0x6c
   83d90:	bf03      	ittte	eq
   83d92:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   83d96:	f046 0620 	orreq.w	r6, r6, #32
   83d9a:	f108 0801 	addeq.w	r8, r8, #1
   83d9e:	f046 0610 	orrne.w	r6, r6, #16
   83da2:	e486      	b.n	836b2 <_vfiprintf_r+0xce>
   83da4:	2900      	cmp	r1, #0
   83da6:	f040 8302 	bne.w	843ae <_vfiprintf_r+0xdca>
   83daa:	06b4      	lsls	r4, r6, #26
   83dac:	f140 8220 	bpl.w	841f0 <_vfiprintf_r+0xc0c>
   83db0:	9a04      	ldr	r2, [sp, #16]
   83db2:	4613      	mov	r3, r2
   83db4:	3304      	adds	r3, #4
   83db6:	9304      	str	r3, [sp, #16]
   83db8:	9b02      	ldr	r3, [sp, #8]
   83dba:	6811      	ldr	r1, [r2, #0]
   83dbc:	17dd      	asrs	r5, r3, #31
   83dbe:	461a      	mov	r2, r3
   83dc0:	462b      	mov	r3, r5
   83dc2:	e9c1 2300 	strd	r2, r3, [r1]
   83dc6:	e43e      	b.n	83646 <_vfiprintf_r+0x62>
   83dc8:	9406      	str	r4, [sp, #24]
   83dca:	2900      	cmp	r1, #0
   83dcc:	f43f ae51 	beq.w	83a72 <_vfiprintf_r+0x48e>
   83dd0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   83dd4:	e64d      	b.n	83a72 <_vfiprintf_r+0x48e>
   83dd6:	9406      	str	r4, [sp, #24]
   83dd8:	2900      	cmp	r1, #0
   83dda:	f040 82e5 	bne.w	843a8 <_vfiprintf_r+0xdc4>
   83dde:	2b00      	cmp	r3, #0
   83de0:	f000 8094 	beq.w	83f0c <_vfiprintf_r+0x928>
   83de4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   83de8:	f04f 0300 	mov.w	r3, #0
   83dec:	2501      	movs	r5, #1
   83dee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83df2:	9503      	str	r5, [sp, #12]
   83df4:	af10      	add	r7, sp, #64	; 0x40
   83df6:	e79f      	b.n	83d38 <_vfiprintf_r+0x754>
   83df8:	aa0d      	add	r2, sp, #52	; 0x34
   83dfa:	9900      	ldr	r1, [sp, #0]
   83dfc:	4648      	mov	r0, r9
   83dfe:	9309      	str	r3, [sp, #36]	; 0x24
   83e00:	f7ff fbb4 	bl	8356c <__sprint_r.part.0>
   83e04:	2800      	cmp	r0, #0
   83e06:	f040 8088 	bne.w	83f1a <_vfiprintf_r+0x936>
   83e0a:	980e      	ldr	r0, [sp, #56]	; 0x38
   83e0c:	46d4      	mov	ip, sl
   83e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e10:	f100 0e01 	add.w	lr, r0, #1
   83e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83e16:	e53a      	b.n	8388e <_vfiprintf_r+0x2aa>
   83e18:	aa0d      	add	r2, sp, #52	; 0x34
   83e1a:	9900      	ldr	r1, [sp, #0]
   83e1c:	9805      	ldr	r0, [sp, #20]
   83e1e:	f7ff fba5 	bl	8356c <__sprint_r.part.0>
   83e22:	2800      	cmp	r0, #0
   83e24:	d179      	bne.n	83f1a <_vfiprintf_r+0x936>
   83e26:	46d3      	mov	fp, sl
   83e28:	980e      	ldr	r0, [sp, #56]	; 0x38
   83e2a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83e30:	f100 0e01 	add.w	lr, r0, #1
   83e34:	2b00      	cmp	r3, #0
   83e36:	f43f ad59 	beq.w	838ec <_vfiprintf_r+0x308>
   83e3a:	3201      	adds	r2, #1
   83e3c:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   83e40:	2301      	movs	r3, #1
   83e42:	f1be 0f07 	cmp.w	lr, #7
   83e46:	920f      	str	r2, [sp, #60]	; 0x3c
   83e48:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83e4c:	e88b 000a 	stmia.w	fp, {r1, r3}
   83e50:	f340 80c0 	ble.w	83fd4 <_vfiprintf_r+0x9f0>
   83e54:	2a00      	cmp	r2, #0
   83e56:	f040 814d 	bne.w	840f4 <_vfiprintf_r+0xb10>
   83e5a:	9907      	ldr	r1, [sp, #28]
   83e5c:	2900      	cmp	r1, #0
   83e5e:	f040 80bf 	bne.w	83fe0 <_vfiprintf_r+0x9fc>
   83e62:	469e      	mov	lr, r3
   83e64:	4610      	mov	r0, r2
   83e66:	46d3      	mov	fp, sl
   83e68:	9b08      	ldr	r3, [sp, #32]
   83e6a:	2b80      	cmp	r3, #128	; 0x80
   83e6c:	f43f ad59 	beq.w	83922 <_vfiprintf_r+0x33e>
   83e70:	9b01      	ldr	r3, [sp, #4]
   83e72:	9903      	ldr	r1, [sp, #12]
   83e74:	1a5c      	subs	r4, r3, r1
   83e76:	2c00      	cmp	r4, #0
   83e78:	f77f ad9c 	ble.w	839b4 <_vfiprintf_r+0x3d0>
   83e7c:	2c10      	cmp	r4, #16
   83e7e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 83fb0 <_vfiprintf_r+0x9cc>
   83e82:	dd25      	ble.n	83ed0 <_vfiprintf_r+0x8ec>
   83e84:	46dc      	mov	ip, fp
   83e86:	2310      	movs	r3, #16
   83e88:	46c3      	mov	fp, r8
   83e8a:	46a8      	mov	r8, r5
   83e8c:	464d      	mov	r5, r9
   83e8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83e92:	e007      	b.n	83ea4 <_vfiprintf_r+0x8c0>
   83e94:	f100 0e02 	add.w	lr, r0, #2
   83e98:	4608      	mov	r0, r1
   83e9a:	f10c 0c08 	add.w	ip, ip, #8
   83e9e:	3c10      	subs	r4, #16
   83ea0:	2c10      	cmp	r4, #16
   83ea2:	dd11      	ble.n	83ec8 <_vfiprintf_r+0x8e4>
   83ea4:	1c41      	adds	r1, r0, #1
   83ea6:	3210      	adds	r2, #16
   83ea8:	2907      	cmp	r1, #7
   83eaa:	920f      	str	r2, [sp, #60]	; 0x3c
   83eac:	f8cc 5000 	str.w	r5, [ip]
   83eb0:	f8cc 3004 	str.w	r3, [ip, #4]
   83eb4:	910e      	str	r1, [sp, #56]	; 0x38
   83eb6:	dded      	ble.n	83e94 <_vfiprintf_r+0x8b0>
   83eb8:	b9d2      	cbnz	r2, 83ef0 <_vfiprintf_r+0x90c>
   83eba:	3c10      	subs	r4, #16
   83ebc:	2c10      	cmp	r4, #16
   83ebe:	f04f 0e01 	mov.w	lr, #1
   83ec2:	4610      	mov	r0, r2
   83ec4:	46d4      	mov	ip, sl
   83ec6:	dced      	bgt.n	83ea4 <_vfiprintf_r+0x8c0>
   83ec8:	46a9      	mov	r9, r5
   83eca:	4645      	mov	r5, r8
   83ecc:	46d8      	mov	r8, fp
   83ece:	46e3      	mov	fp, ip
   83ed0:	4422      	add	r2, r4
   83ed2:	f1be 0f07 	cmp.w	lr, #7
   83ed6:	920f      	str	r2, [sp, #60]	; 0x3c
   83ed8:	f8cb 9000 	str.w	r9, [fp]
   83edc:	f8cb 4004 	str.w	r4, [fp, #4]
   83ee0:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83ee4:	dc2e      	bgt.n	83f44 <_vfiprintf_r+0x960>
   83ee6:	f10b 0b08 	add.w	fp, fp, #8
   83eea:	f10e 0e01 	add.w	lr, lr, #1
   83eee:	e561      	b.n	839b4 <_vfiprintf_r+0x3d0>
   83ef0:	aa0d      	add	r2, sp, #52	; 0x34
   83ef2:	9900      	ldr	r1, [sp, #0]
   83ef4:	4648      	mov	r0, r9
   83ef6:	9301      	str	r3, [sp, #4]
   83ef8:	f7ff fb38 	bl	8356c <__sprint_r.part.0>
   83efc:	b968      	cbnz	r0, 83f1a <_vfiprintf_r+0x936>
   83efe:	980e      	ldr	r0, [sp, #56]	; 0x38
   83f00:	46d4      	mov	ip, sl
   83f02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83f04:	f100 0e01 	add.w	lr, r0, #1
   83f08:	9b01      	ldr	r3, [sp, #4]
   83f0a:	e7c8      	b.n	83e9e <_vfiprintf_r+0x8ba>
   83f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   83f0e:	b123      	cbz	r3, 83f1a <_vfiprintf_r+0x936>
   83f10:	9805      	ldr	r0, [sp, #20]
   83f12:	aa0d      	add	r2, sp, #52	; 0x34
   83f14:	9900      	ldr	r1, [sp, #0]
   83f16:	f7ff fb29 	bl	8356c <__sprint_r.part.0>
   83f1a:	9b00      	ldr	r3, [sp, #0]
   83f1c:	899b      	ldrh	r3, [r3, #12]
   83f1e:	065a      	lsls	r2, r3, #25
   83f20:	f100 817b 	bmi.w	8421a <_vfiprintf_r+0xc36>
   83f24:	9802      	ldr	r0, [sp, #8]
   83f26:	b02b      	add	sp, #172	; 0xac
   83f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f2c:	aa0d      	add	r2, sp, #52	; 0x34
   83f2e:	9900      	ldr	r1, [sp, #0]
   83f30:	4648      	mov	r0, r9
   83f32:	f7ff fb1b 	bl	8356c <__sprint_r.part.0>
   83f36:	2800      	cmp	r0, #0
   83f38:	d1ef      	bne.n	83f1a <_vfiprintf_r+0x936>
   83f3a:	990e      	ldr	r1, [sp, #56]	; 0x38
   83f3c:	46d3      	mov	fp, sl
   83f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83f40:	1c48      	adds	r0, r1, #1
   83f42:	e55e      	b.n	83a02 <_vfiprintf_r+0x41e>
   83f44:	2a00      	cmp	r2, #0
   83f46:	f040 80fa 	bne.w	8413e <_vfiprintf_r+0xb5a>
   83f4a:	46d3      	mov	fp, sl
   83f4c:	9a03      	ldr	r2, [sp, #12]
   83f4e:	2301      	movs	r3, #1
   83f50:	921b      	str	r2, [sp, #108]	; 0x6c
   83f52:	920f      	str	r2, [sp, #60]	; 0x3c
   83f54:	971a      	str	r7, [sp, #104]	; 0x68
   83f56:	930e      	str	r3, [sp, #56]	; 0x38
   83f58:	f10b 0b08 	add.w	fp, fp, #8
   83f5c:	0771      	lsls	r1, r6, #29
   83f5e:	d504      	bpl.n	83f6a <_vfiprintf_r+0x986>
   83f60:	9b06      	ldr	r3, [sp, #24]
   83f62:	1b5c      	subs	r4, r3, r5
   83f64:	2c00      	cmp	r4, #0
   83f66:	f73f ad3d 	bgt.w	839e4 <_vfiprintf_r+0x400>
   83f6a:	9b02      	ldr	r3, [sp, #8]
   83f6c:	9906      	ldr	r1, [sp, #24]
   83f6e:	42a9      	cmp	r1, r5
   83f70:	bfac      	ite	ge
   83f72:	185b      	addge	r3, r3, r1
   83f74:	195b      	addlt	r3, r3, r5
   83f76:	9302      	str	r3, [sp, #8]
   83f78:	2a00      	cmp	r2, #0
   83f7a:	f040 80ad 	bne.w	840d8 <_vfiprintf_r+0xaf4>
   83f7e:	2300      	movs	r3, #0
   83f80:	930e      	str	r3, [sp, #56]	; 0x38
   83f82:	46d3      	mov	fp, sl
   83f84:	f7ff bb5f 	b.w	83646 <_vfiprintf_r+0x62>
   83f88:	aa0d      	add	r2, sp, #52	; 0x34
   83f8a:	9900      	ldr	r1, [sp, #0]
   83f8c:	4648      	mov	r0, r9
   83f8e:	9307      	str	r3, [sp, #28]
   83f90:	f7ff faec 	bl	8356c <__sprint_r.part.0>
   83f94:	2800      	cmp	r0, #0
   83f96:	d1c0      	bne.n	83f1a <_vfiprintf_r+0x936>
   83f98:	980e      	ldr	r0, [sp, #56]	; 0x38
   83f9a:	46d6      	mov	lr, sl
   83f9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83f9e:	f100 0c01 	add.w	ip, r0, #1
   83fa2:	9b07      	ldr	r3, [sp, #28]
   83fa4:	e4d4      	b.n	83950 <_vfiprintf_r+0x36c>
   83fa6:	bf00      	nop
   83fa8:	000861d0 	.word	0x000861d0
   83fac:	000861e4 	.word	0x000861e4
   83fb0:	000861c0 	.word	0x000861c0
   83fb4:	2a00      	cmp	r2, #0
   83fb6:	f47f af2f 	bne.w	83e18 <_vfiprintf_r+0x834>
   83fba:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83fbe:	2b00      	cmp	r3, #0
   83fc0:	f000 80f3 	beq.w	841aa <_vfiprintf_r+0xbc6>
   83fc4:	2301      	movs	r3, #1
   83fc6:	461a      	mov	r2, r3
   83fc8:	469e      	mov	lr, r3
   83fca:	46d3      	mov	fp, sl
   83fcc:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   83fd0:	931b      	str	r3, [sp, #108]	; 0x6c
   83fd2:	911a      	str	r1, [sp, #104]	; 0x68
   83fd4:	4670      	mov	r0, lr
   83fd6:	f10b 0b08 	add.w	fp, fp, #8
   83fda:	f10e 0e01 	add.w	lr, lr, #1
   83fde:	e485      	b.n	838ec <_vfiprintf_r+0x308>
   83fe0:	469e      	mov	lr, r3
   83fe2:	46d3      	mov	fp, sl
   83fe4:	a90c      	add	r1, sp, #48	; 0x30
   83fe6:	2202      	movs	r2, #2
   83fe8:	911a      	str	r1, [sp, #104]	; 0x68
   83fea:	921b      	str	r2, [sp, #108]	; 0x6c
   83fec:	4670      	mov	r0, lr
   83fee:	f10b 0b08 	add.w	fp, fp, #8
   83ff2:	f10e 0e01 	add.w	lr, lr, #1
   83ff6:	e737      	b.n	83e68 <_vfiprintf_r+0x884>
   83ff8:	9b01      	ldr	r3, [sp, #4]
   83ffa:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   83ffe:	2b00      	cmp	r3, #0
   84000:	f2c0 811b 	blt.w	8423a <_vfiprintf_r+0xc56>
   84004:	ea54 0305 	orrs.w	r3, r4, r5
   84008:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8400c:	f43f ac07 	beq.w	8381e <_vfiprintf_r+0x23a>
   84010:	4657      	mov	r7, sl
   84012:	0923      	lsrs	r3, r4, #4
   84014:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84018:	0929      	lsrs	r1, r5, #4
   8401a:	f004 020f 	and.w	r2, r4, #15
   8401e:	460d      	mov	r5, r1
   84020:	461c      	mov	r4, r3
   84022:	5c83      	ldrb	r3, [r0, r2]
   84024:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84028:	ea54 0305 	orrs.w	r3, r4, r5
   8402c:	d1f1      	bne.n	84012 <_vfiprintf_r+0xa2e>
   8402e:	ebc7 030a 	rsb	r3, r7, sl
   84032:	9303      	str	r3, [sp, #12]
   84034:	f7ff bbfc 	b.w	83830 <_vfiprintf_r+0x24c>
   84038:	aa0d      	add	r2, sp, #52	; 0x34
   8403a:	9900      	ldr	r1, [sp, #0]
   8403c:	9805      	ldr	r0, [sp, #20]
   8403e:	f7ff fa95 	bl	8356c <__sprint_r.part.0>
   84042:	2800      	cmp	r0, #0
   84044:	f47f af69 	bne.w	83f1a <_vfiprintf_r+0x936>
   84048:	46d3      	mov	fp, sl
   8404a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8404c:	e786      	b.n	83f5c <_vfiprintf_r+0x978>
   8404e:	f016 0210 	ands.w	r2, r6, #16
   84052:	f000 80b5 	beq.w	841c0 <_vfiprintf_r+0xbdc>
   84056:	9904      	ldr	r1, [sp, #16]
   84058:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8405c:	460a      	mov	r2, r1
   8405e:	680c      	ldr	r4, [r1, #0]
   84060:	9901      	ldr	r1, [sp, #4]
   84062:	3204      	adds	r2, #4
   84064:	2900      	cmp	r1, #0
   84066:	f04f 0500 	mov.w	r5, #0
   8406a:	f2c0 8152 	blt.w	84312 <_vfiprintf_r+0xd2e>
   8406e:	ea54 0105 	orrs.w	r1, r4, r5
   84072:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84076:	9204      	str	r2, [sp, #16]
   84078:	f43f ad5d 	beq.w	83b36 <_vfiprintf_r+0x552>
   8407c:	4699      	mov	r9, r3
   8407e:	e562      	b.n	83b46 <_vfiprintf_r+0x562>
   84080:	9a04      	ldr	r2, [sp, #16]
   84082:	06f7      	lsls	r7, r6, #27
   84084:	4613      	mov	r3, r2
   84086:	d409      	bmi.n	8409c <_vfiprintf_r+0xab8>
   84088:	0675      	lsls	r5, r6, #25
   8408a:	d507      	bpl.n	8409c <_vfiprintf_r+0xab8>
   8408c:	f9b2 4000 	ldrsh.w	r4, [r2]
   84090:	3304      	adds	r3, #4
   84092:	17e5      	asrs	r5, r4, #31
   84094:	9304      	str	r3, [sp, #16]
   84096:	4622      	mov	r2, r4
   84098:	462b      	mov	r3, r5
   8409a:	e4f7      	b.n	83a8c <_vfiprintf_r+0x4a8>
   8409c:	681c      	ldr	r4, [r3, #0]
   8409e:	3304      	adds	r3, #4
   840a0:	17e5      	asrs	r5, r4, #31
   840a2:	9304      	str	r3, [sp, #16]
   840a4:	4622      	mov	r2, r4
   840a6:	462b      	mov	r3, r5
   840a8:	e4f0      	b.n	83a8c <_vfiprintf_r+0x4a8>
   840aa:	6814      	ldr	r4, [r2, #0]
   840ac:	3204      	adds	r2, #4
   840ae:	9204      	str	r2, [sp, #16]
   840b0:	2500      	movs	r5, #0
   840b2:	e61f      	b.n	83cf4 <_vfiprintf_r+0x710>
   840b4:	f04f 0900 	mov.w	r9, #0
   840b8:	ea54 0305 	orrs.w	r3, r4, r5
   840bc:	f47f acf7 	bne.w	83aae <_vfiprintf_r+0x4ca>
   840c0:	e5d8      	b.n	83c74 <_vfiprintf_r+0x690>
   840c2:	aa0d      	add	r2, sp, #52	; 0x34
   840c4:	9900      	ldr	r1, [sp, #0]
   840c6:	9805      	ldr	r0, [sp, #20]
   840c8:	f7ff fa50 	bl	8356c <__sprint_r.part.0>
   840cc:	2800      	cmp	r0, #0
   840ce:	f47f af24 	bne.w	83f1a <_vfiprintf_r+0x936>
   840d2:	46d3      	mov	fp, sl
   840d4:	f7ff bb51 	b.w	8377a <_vfiprintf_r+0x196>
   840d8:	aa0d      	add	r2, sp, #52	; 0x34
   840da:	9900      	ldr	r1, [sp, #0]
   840dc:	9805      	ldr	r0, [sp, #20]
   840de:	f7ff fa45 	bl	8356c <__sprint_r.part.0>
   840e2:	2800      	cmp	r0, #0
   840e4:	f43f af4b 	beq.w	83f7e <_vfiprintf_r+0x99a>
   840e8:	e717      	b.n	83f1a <_vfiprintf_r+0x936>
   840ea:	2400      	movs	r4, #0
   840ec:	2500      	movs	r5, #0
   840ee:	f04f 0900 	mov.w	r9, #0
   840f2:	e78d      	b.n	84010 <_vfiprintf_r+0xa2c>
   840f4:	aa0d      	add	r2, sp, #52	; 0x34
   840f6:	9900      	ldr	r1, [sp, #0]
   840f8:	9805      	ldr	r0, [sp, #20]
   840fa:	f7ff fa37 	bl	8356c <__sprint_r.part.0>
   840fe:	2800      	cmp	r0, #0
   84100:	f47f af0b 	bne.w	83f1a <_vfiprintf_r+0x936>
   84104:	980e      	ldr	r0, [sp, #56]	; 0x38
   84106:	46d3      	mov	fp, sl
   84108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8410a:	f100 0e01 	add.w	lr, r0, #1
   8410e:	f7ff bbed 	b.w	838ec <_vfiprintf_r+0x308>
   84112:	aa0d      	add	r2, sp, #52	; 0x34
   84114:	9900      	ldr	r1, [sp, #0]
   84116:	9805      	ldr	r0, [sp, #20]
   84118:	f7ff fa28 	bl	8356c <__sprint_r.part.0>
   8411c:	2800      	cmp	r0, #0
   8411e:	f47f aefc 	bne.w	83f1a <_vfiprintf_r+0x936>
   84122:	980e      	ldr	r0, [sp, #56]	; 0x38
   84124:	46d3      	mov	fp, sl
   84126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84128:	f100 0e01 	add.w	lr, r0, #1
   8412c:	e69c      	b.n	83e68 <_vfiprintf_r+0x884>
   8412e:	2a00      	cmp	r2, #0
   84130:	f040 80c8 	bne.w	842c4 <_vfiprintf_r+0xce0>
   84134:	f04f 0e01 	mov.w	lr, #1
   84138:	4610      	mov	r0, r2
   8413a:	46d3      	mov	fp, sl
   8413c:	e698      	b.n	83e70 <_vfiprintf_r+0x88c>
   8413e:	aa0d      	add	r2, sp, #52	; 0x34
   84140:	9900      	ldr	r1, [sp, #0]
   84142:	9805      	ldr	r0, [sp, #20]
   84144:	f7ff fa12 	bl	8356c <__sprint_r.part.0>
   84148:	2800      	cmp	r0, #0
   8414a:	f47f aee6 	bne.w	83f1a <_vfiprintf_r+0x936>
   8414e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84150:	46d3      	mov	fp, sl
   84152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84154:	f103 0e01 	add.w	lr, r3, #1
   84158:	e42c      	b.n	839b4 <_vfiprintf_r+0x3d0>
   8415a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   8415e:	f04f 0300 	mov.w	r3, #0
   84162:	2230      	movs	r2, #48	; 0x30
   84164:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84168:	9a01      	ldr	r2, [sp, #4]
   8416a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8416e:	2a00      	cmp	r2, #0
   84170:	f046 0302 	orr.w	r3, r6, #2
   84174:	f2c0 80bb 	blt.w	842ee <_vfiprintf_r+0xd0a>
   84178:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8417c:	f046 0602 	orr.w	r6, r6, #2
   84180:	f04f 0900 	mov.w	r9, #0
   84184:	e744      	b.n	84010 <_vfiprintf_r+0xa2c>
   84186:	f04f 0900 	mov.w	r9, #0
   8418a:	488c      	ldr	r0, [pc, #560]	; (843bc <_vfiprintf_r+0xdd8>)
   8418c:	e740      	b.n	84010 <_vfiprintf_r+0xa2c>
   8418e:	9b01      	ldr	r3, [sp, #4]
   84190:	4264      	negs	r4, r4
   84192:	f04f 092d 	mov.w	r9, #45	; 0x2d
   84196:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   8419a:	2b00      	cmp	r3, #0
   8419c:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   841a0:	f6ff ac85 	blt.w	83aae <_vfiprintf_r+0x4ca>
   841a4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   841a8:	e481      	b.n	83aae <_vfiprintf_r+0x4ca>
   841aa:	9b07      	ldr	r3, [sp, #28]
   841ac:	2b00      	cmp	r3, #0
   841ae:	d063      	beq.n	84278 <_vfiprintf_r+0xc94>
   841b0:	ab0c      	add	r3, sp, #48	; 0x30
   841b2:	2202      	movs	r2, #2
   841b4:	931a      	str	r3, [sp, #104]	; 0x68
   841b6:	921b      	str	r2, [sp, #108]	; 0x6c
   841b8:	f04f 0e01 	mov.w	lr, #1
   841bc:	46d3      	mov	fp, sl
   841be:	e715      	b.n	83fec <_vfiprintf_r+0xa08>
   841c0:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   841c4:	d03b      	beq.n	8423e <_vfiprintf_r+0xc5a>
   841c6:	9904      	ldr	r1, [sp, #16]
   841c8:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   841cc:	460b      	mov	r3, r1
   841ce:	880c      	ldrh	r4, [r1, #0]
   841d0:	9901      	ldr	r1, [sp, #4]
   841d2:	3304      	adds	r3, #4
   841d4:	2900      	cmp	r1, #0
   841d6:	f04f 0500 	mov.w	r5, #0
   841da:	f2c0 808c 	blt.w	842f6 <_vfiprintf_r+0xd12>
   841de:	ea54 0105 	orrs.w	r1, r4, r5
   841e2:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   841e6:	9304      	str	r3, [sp, #16]
   841e8:	f43f aca5 	beq.w	83b36 <_vfiprintf_r+0x552>
   841ec:	4691      	mov	r9, r2
   841ee:	e4aa      	b.n	83b46 <_vfiprintf_r+0x562>
   841f0:	06f0      	lsls	r0, r6, #27
   841f2:	d40a      	bmi.n	8420a <_vfiprintf_r+0xc26>
   841f4:	0671      	lsls	r1, r6, #25
   841f6:	d508      	bpl.n	8420a <_vfiprintf_r+0xc26>
   841f8:	9a04      	ldr	r2, [sp, #16]
   841fa:	6813      	ldr	r3, [r2, #0]
   841fc:	3204      	adds	r2, #4
   841fe:	9204      	str	r2, [sp, #16]
   84200:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84204:	801a      	strh	r2, [r3, #0]
   84206:	f7ff ba1e 	b.w	83646 <_vfiprintf_r+0x62>
   8420a:	9a04      	ldr	r2, [sp, #16]
   8420c:	6813      	ldr	r3, [r2, #0]
   8420e:	3204      	adds	r2, #4
   84210:	9204      	str	r2, [sp, #16]
   84212:	9a02      	ldr	r2, [sp, #8]
   84214:	601a      	str	r2, [r3, #0]
   84216:	f7ff ba16 	b.w	83646 <_vfiprintf_r+0x62>
   8421a:	f04f 30ff 	mov.w	r0, #4294967295
   8421e:	f7ff bac9 	b.w	837b4 <_vfiprintf_r+0x1d0>
   84222:	4616      	mov	r6, r2
   84224:	4865      	ldr	r0, [pc, #404]	; (843bc <_vfiprintf_r+0xdd8>)
   84226:	ea54 0205 	orrs.w	r2, r4, r5
   8422a:	9304      	str	r3, [sp, #16]
   8422c:	f04f 0900 	mov.w	r9, #0
   84230:	f47f aeee 	bne.w	84010 <_vfiprintf_r+0xa2c>
   84234:	2400      	movs	r4, #0
   84236:	2500      	movs	r5, #0
   84238:	e6ea      	b.n	84010 <_vfiprintf_r+0xa2c>
   8423a:	9b04      	ldr	r3, [sp, #16]
   8423c:	e7f3      	b.n	84226 <_vfiprintf_r+0xc42>
   8423e:	9a04      	ldr	r2, [sp, #16]
   84240:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84244:	4613      	mov	r3, r2
   84246:	6814      	ldr	r4, [r2, #0]
   84248:	9a01      	ldr	r2, [sp, #4]
   8424a:	3304      	adds	r3, #4
   8424c:	2a00      	cmp	r2, #0
   8424e:	f04f 0500 	mov.w	r5, #0
   84252:	db50      	blt.n	842f6 <_vfiprintf_r+0xd12>
   84254:	ea54 0205 	orrs.w	r2, r4, r5
   84258:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8425c:	9304      	str	r3, [sp, #16]
   8425e:	f47f ac72 	bne.w	83b46 <_vfiprintf_r+0x562>
   84262:	e468      	b.n	83b36 <_vfiprintf_r+0x552>
   84264:	aa0d      	add	r2, sp, #52	; 0x34
   84266:	9900      	ldr	r1, [sp, #0]
   84268:	9805      	ldr	r0, [sp, #20]
   8426a:	f7ff f97f 	bl	8356c <__sprint_r.part.0>
   8426e:	2800      	cmp	r0, #0
   84270:	f47f ae53 	bne.w	83f1a <_vfiprintf_r+0x936>
   84274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84276:	e678      	b.n	83f6a <_vfiprintf_r+0x986>
   84278:	4610      	mov	r0, r2
   8427a:	f04f 0e01 	mov.w	lr, #1
   8427e:	46d3      	mov	fp, sl
   84280:	e5f6      	b.n	83e70 <_vfiprintf_r+0x88c>
   84282:	9904      	ldr	r1, [sp, #16]
   84284:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84288:	460a      	mov	r2, r1
   8428a:	880c      	ldrh	r4, [r1, #0]
   8428c:	9901      	ldr	r1, [sp, #4]
   8428e:	3204      	adds	r2, #4
   84290:	2900      	cmp	r1, #0
   84292:	f04f 0500 	mov.w	r5, #0
   84296:	db55      	blt.n	84344 <_vfiprintf_r+0xd60>
   84298:	ea54 0105 	orrs.w	r1, r4, r5
   8429c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   842a0:	9204      	str	r2, [sp, #16]
   842a2:	4699      	mov	r9, r3
   842a4:	f47f ac03 	bne.w	83aae <_vfiprintf_r+0x4ca>
   842a8:	e4df      	b.n	83c6a <_vfiprintf_r+0x686>
   842aa:	9304      	str	r3, [sp, #16]
   842ac:	e704      	b.n	840b8 <_vfiprintf_r+0xad4>
   842ae:	4638      	mov	r0, r7
   842b0:	9404      	str	r4, [sp, #16]
   842b2:	f7ff f8f9 	bl	834a8 <strlen>
   842b6:	2300      	movs	r3, #0
   842b8:	9003      	str	r0, [sp, #12]
   842ba:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   842be:	9301      	str	r3, [sp, #4]
   842c0:	f7ff bab6 	b.w	83830 <_vfiprintf_r+0x24c>
   842c4:	aa0d      	add	r2, sp, #52	; 0x34
   842c6:	9900      	ldr	r1, [sp, #0]
   842c8:	9805      	ldr	r0, [sp, #20]
   842ca:	f7ff f94f 	bl	8356c <__sprint_r.part.0>
   842ce:	2800      	cmp	r0, #0
   842d0:	f47f ae23 	bne.w	83f1a <_vfiprintf_r+0x936>
   842d4:	980e      	ldr	r0, [sp, #56]	; 0x38
   842d6:	46d3      	mov	fp, sl
   842d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842da:	f100 0e01 	add.w	lr, r0, #1
   842de:	e5c7      	b.n	83e70 <_vfiprintf_r+0x88c>
   842e0:	980e      	ldr	r0, [sp, #56]	; 0x38
   842e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   842e4:	3001      	adds	r0, #1
   842e6:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 843c4 <_vfiprintf_r+0xde0>
   842ea:	f7ff baec 	b.w	838c6 <_vfiprintf_r+0x2e2>
   842ee:	461e      	mov	r6, r3
   842f0:	f04f 0900 	mov.w	r9, #0
   842f4:	e68c      	b.n	84010 <_vfiprintf_r+0xa2c>
   842f6:	9304      	str	r3, [sp, #16]
   842f8:	e423      	b.n	83b42 <_vfiprintf_r+0x55e>
   842fa:	f04f 0900 	mov.w	r9, #0
   842fe:	e799      	b.n	84234 <_vfiprintf_r+0xc50>
   84300:	2b06      	cmp	r3, #6
   84302:	bf28      	it	cs
   84304:	2306      	movcs	r3, #6
   84306:	9303      	str	r3, [sp, #12]
   84308:	9404      	str	r4, [sp, #16]
   8430a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   8430e:	4f2c      	ldr	r7, [pc, #176]	; (843c0 <_vfiprintf_r+0xddc>)
   84310:	e512      	b.n	83d38 <_vfiprintf_r+0x754>
   84312:	9204      	str	r2, [sp, #16]
   84314:	e415      	b.n	83b42 <_vfiprintf_r+0x55e>
   84316:	980e      	ldr	r0, [sp, #56]	; 0x38
   84318:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 843c4 <_vfiprintf_r+0xde0>
   8431c:	3001      	adds	r0, #1
   8431e:	f7ff bb88 	b.w	83a32 <_vfiprintf_r+0x44e>
   84322:	46f4      	mov	ip, lr
   84324:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 843c8 <_vfiprintf_r+0xde4>
   84328:	f7ff bb2d 	b.w	83986 <_vfiprintf_r+0x3a2>
   8432c:	2200      	movs	r2, #0
   8432e:	9201      	str	r2, [sp, #4]
   84330:	f7ff b9c1 	b.w	836b6 <_vfiprintf_r+0xd2>
   84334:	9b01      	ldr	r3, [sp, #4]
   84336:	9404      	str	r4, [sp, #16]
   84338:	9303      	str	r3, [sp, #12]
   8433a:	9001      	str	r0, [sp, #4]
   8433c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84340:	f7ff ba76 	b.w	83830 <_vfiprintf_r+0x24c>
   84344:	9204      	str	r2, [sp, #16]
   84346:	4699      	mov	r9, r3
   84348:	e6b6      	b.n	840b8 <_vfiprintf_r+0xad4>
   8434a:	9a04      	ldr	r2, [sp, #16]
   8434c:	6813      	ldr	r3, [r2, #0]
   8434e:	3204      	adds	r2, #4
   84350:	2b00      	cmp	r3, #0
   84352:	9301      	str	r3, [sp, #4]
   84354:	9204      	str	r2, [sp, #16]
   84356:	f898 3001 	ldrb.w	r3, [r8, #1]
   8435a:	46a8      	mov	r8, r5
   8435c:	f6bf a9a9 	bge.w	836b2 <_vfiprintf_r+0xce>
   84360:	f04f 32ff 	mov.w	r2, #4294967295
   84364:	9201      	str	r2, [sp, #4]
   84366:	f7ff b9a4 	b.w	836b2 <_vfiprintf_r+0xce>
   8436a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8436e:	e45f      	b.n	83c30 <_vfiprintf_r+0x64c>
   84370:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84374:	f7ff bbc4 	b.w	83b00 <_vfiprintf_r+0x51c>
   84378:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8437c:	f7ff bb77 	b.w	83a6e <_vfiprintf_r+0x48a>
   84380:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84384:	e487      	b.n	83c96 <_vfiprintf_r+0x6b2>
   84386:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8438a:	e4a7      	b.n	83cdc <_vfiprintf_r+0x6f8>
   8438c:	4699      	mov	r9, r3
   8438e:	07f3      	lsls	r3, r6, #31
   84390:	d505      	bpl.n	8439e <_vfiprintf_r+0xdba>
   84392:	af2a      	add	r7, sp, #168	; 0xa8
   84394:	2330      	movs	r3, #48	; 0x30
   84396:	f807 3d41 	strb.w	r3, [r7, #-65]!
   8439a:	f7ff bba2 	b.w	83ae2 <_vfiprintf_r+0x4fe>
   8439e:	9b01      	ldr	r3, [sp, #4]
   843a0:	4657      	mov	r7, sl
   843a2:	9303      	str	r3, [sp, #12]
   843a4:	f7ff ba44 	b.w	83830 <_vfiprintf_r+0x24c>
   843a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   843ac:	e517      	b.n	83dde <_vfiprintf_r+0x7fa>
   843ae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   843b2:	e4fa      	b.n	83daa <_vfiprintf_r+0x7c6>
   843b4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   843b8:	e4d2      	b.n	83d60 <_vfiprintf_r+0x77c>
   843ba:	bf00      	nop
   843bc:	000861e4 	.word	0x000861e4
   843c0:	000861f8 	.word	0x000861f8
   843c4:	00086200 	.word	0x00086200
   843c8:	000861c0 	.word	0x000861c0

000843cc <__sbprintf>:
   843cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   843ce:	460c      	mov	r4, r1
   843d0:	8989      	ldrh	r1, [r1, #12]
   843d2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   843d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   843d8:	f021 0102 	bic.w	r1, r1, #2
   843dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   843de:	f8ad 100c 	strh.w	r1, [sp, #12]
   843e2:	69e1      	ldr	r1, [r4, #28]
   843e4:	89e7      	ldrh	r7, [r4, #14]
   843e6:	9519      	str	r5, [sp, #100]	; 0x64
   843e8:	2500      	movs	r5, #0
   843ea:	9107      	str	r1, [sp, #28]
   843ec:	9609      	str	r6, [sp, #36]	; 0x24
   843ee:	9506      	str	r5, [sp, #24]
   843f0:	ae1a      	add	r6, sp, #104	; 0x68
   843f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   843f6:	4669      	mov	r1, sp
   843f8:	9600      	str	r6, [sp, #0]
   843fa:	9604      	str	r6, [sp, #16]
   843fc:	9502      	str	r5, [sp, #8]
   843fe:	9505      	str	r5, [sp, #20]
   84400:	f8ad 700e 	strh.w	r7, [sp, #14]
   84404:	4606      	mov	r6, r0
   84406:	f7ff f8ed 	bl	835e4 <_vfiprintf_r>
   8440a:	1e05      	subs	r5, r0, #0
   8440c:	db07      	blt.n	8441e <__sbprintf+0x52>
   8440e:	4630      	mov	r0, r6
   84410:	4669      	mov	r1, sp
   84412:	f000 f929 	bl	84668 <_fflush_r>
   84416:	2800      	cmp	r0, #0
   84418:	bf18      	it	ne
   8441a:	f04f 35ff 	movne.w	r5, #4294967295
   8441e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84422:	065b      	lsls	r3, r3, #25
   84424:	d503      	bpl.n	8442e <__sbprintf+0x62>
   84426:	89a3      	ldrh	r3, [r4, #12]
   84428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8442c:	81a3      	strh	r3, [r4, #12]
   8442e:	4628      	mov	r0, r5
   84430:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84434:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84436:	bf00      	nop

00084438 <__swsetup_r>:
   84438:	b538      	push	{r3, r4, r5, lr}
   8443a:	4b30      	ldr	r3, [pc, #192]	; (844fc <__swsetup_r+0xc4>)
   8443c:	4605      	mov	r5, r0
   8443e:	6818      	ldr	r0, [r3, #0]
   84440:	460c      	mov	r4, r1
   84442:	b110      	cbz	r0, 8444a <__swsetup_r+0x12>
   84444:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84446:	2b00      	cmp	r3, #0
   84448:	d038      	beq.n	844bc <__swsetup_r+0x84>
   8444a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8444e:	b293      	uxth	r3, r2
   84450:	0718      	lsls	r0, r3, #28
   84452:	d50c      	bpl.n	8446e <__swsetup_r+0x36>
   84454:	6920      	ldr	r0, [r4, #16]
   84456:	b1a8      	cbz	r0, 84484 <__swsetup_r+0x4c>
   84458:	f013 0201 	ands.w	r2, r3, #1
   8445c:	d01e      	beq.n	8449c <__swsetup_r+0x64>
   8445e:	6963      	ldr	r3, [r4, #20]
   84460:	2200      	movs	r2, #0
   84462:	425b      	negs	r3, r3
   84464:	61a3      	str	r3, [r4, #24]
   84466:	60a2      	str	r2, [r4, #8]
   84468:	b1f0      	cbz	r0, 844a8 <__swsetup_r+0x70>
   8446a:	2000      	movs	r0, #0
   8446c:	bd38      	pop	{r3, r4, r5, pc}
   8446e:	06d9      	lsls	r1, r3, #27
   84470:	d53b      	bpl.n	844ea <__swsetup_r+0xb2>
   84472:	0758      	lsls	r0, r3, #29
   84474:	d425      	bmi.n	844c2 <__swsetup_r+0x8a>
   84476:	6920      	ldr	r0, [r4, #16]
   84478:	f042 0308 	orr.w	r3, r2, #8
   8447c:	81a3      	strh	r3, [r4, #12]
   8447e:	b29b      	uxth	r3, r3
   84480:	2800      	cmp	r0, #0
   84482:	d1e9      	bne.n	84458 <__swsetup_r+0x20>
   84484:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84488:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8448c:	d0e4      	beq.n	84458 <__swsetup_r+0x20>
   8448e:	4628      	mov	r0, r5
   84490:	4621      	mov	r1, r4
   84492:	f000 fd13 	bl	84ebc <__smakebuf_r>
   84496:	89a3      	ldrh	r3, [r4, #12]
   84498:	6920      	ldr	r0, [r4, #16]
   8449a:	e7dd      	b.n	84458 <__swsetup_r+0x20>
   8449c:	0799      	lsls	r1, r3, #30
   8449e:	bf58      	it	pl
   844a0:	6962      	ldrpl	r2, [r4, #20]
   844a2:	60a2      	str	r2, [r4, #8]
   844a4:	2800      	cmp	r0, #0
   844a6:	d1e0      	bne.n	8446a <__swsetup_r+0x32>
   844a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   844ac:	061a      	lsls	r2, r3, #24
   844ae:	d5dd      	bpl.n	8446c <__swsetup_r+0x34>
   844b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   844b4:	81a3      	strh	r3, [r4, #12]
   844b6:	f04f 30ff 	mov.w	r0, #4294967295
   844ba:	bd38      	pop	{r3, r4, r5, pc}
   844bc:	f000 f968 	bl	84790 <__sinit>
   844c0:	e7c3      	b.n	8444a <__swsetup_r+0x12>
   844c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   844c4:	b151      	cbz	r1, 844dc <__swsetup_r+0xa4>
   844c6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   844ca:	4299      	cmp	r1, r3
   844cc:	d004      	beq.n	844d8 <__swsetup_r+0xa0>
   844ce:	4628      	mov	r0, r5
   844d0:	f000 fa26 	bl	84920 <_free_r>
   844d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   844d8:	2300      	movs	r3, #0
   844da:	6323      	str	r3, [r4, #48]	; 0x30
   844dc:	6920      	ldr	r0, [r4, #16]
   844de:	2300      	movs	r3, #0
   844e0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   844e4:	e884 0009 	stmia.w	r4, {r0, r3}
   844e8:	e7c6      	b.n	84478 <__swsetup_r+0x40>
   844ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   844ee:	2309      	movs	r3, #9
   844f0:	602b      	str	r3, [r5, #0]
   844f2:	f04f 30ff 	mov.w	r0, #4294967295
   844f6:	81a2      	strh	r2, [r4, #12]
   844f8:	bd38      	pop	{r3, r4, r5, pc}
   844fa:	bf00      	nop
   844fc:	20070568 	.word	0x20070568

00084500 <register_fini>:
   84500:	4b02      	ldr	r3, [pc, #8]	; (8450c <register_fini+0xc>)
   84502:	b113      	cbz	r3, 8450a <register_fini+0xa>
   84504:	4802      	ldr	r0, [pc, #8]	; (84510 <register_fini+0x10>)
   84506:	f000 b805 	b.w	84514 <atexit>
   8450a:	4770      	bx	lr
   8450c:	00000000 	.word	0x00000000
   84510:	000847a5 	.word	0x000847a5

00084514 <atexit>:
   84514:	2300      	movs	r3, #0
   84516:	4601      	mov	r1, r0
   84518:	461a      	mov	r2, r3
   8451a:	4618      	mov	r0, r3
   8451c:	f001 bb58 	b.w	85bd0 <__register_exitproc>

00084520 <__sflush_r>:
   84520:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84528:	b29a      	uxth	r2, r3
   8452a:	460d      	mov	r5, r1
   8452c:	0711      	lsls	r1, r2, #28
   8452e:	4680      	mov	r8, r0
   84530:	d43c      	bmi.n	845ac <__sflush_r+0x8c>
   84532:	686a      	ldr	r2, [r5, #4]
   84534:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84538:	2a00      	cmp	r2, #0
   8453a:	81ab      	strh	r3, [r5, #12]
   8453c:	dd73      	ble.n	84626 <__sflush_r+0x106>
   8453e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84540:	2c00      	cmp	r4, #0
   84542:	d04b      	beq.n	845dc <__sflush_r+0xbc>
   84544:	b29b      	uxth	r3, r3
   84546:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   8454a:	2100      	movs	r1, #0
   8454c:	b292      	uxth	r2, r2
   8454e:	f8d8 6000 	ldr.w	r6, [r8]
   84552:	f8c8 1000 	str.w	r1, [r8]
   84556:	2a00      	cmp	r2, #0
   84558:	d069      	beq.n	8462e <__sflush_r+0x10e>
   8455a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8455c:	075f      	lsls	r7, r3, #29
   8455e:	d505      	bpl.n	8456c <__sflush_r+0x4c>
   84560:	6869      	ldr	r1, [r5, #4]
   84562:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84564:	1a52      	subs	r2, r2, r1
   84566:	b10b      	cbz	r3, 8456c <__sflush_r+0x4c>
   84568:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8456a:	1ad2      	subs	r2, r2, r3
   8456c:	2300      	movs	r3, #0
   8456e:	69e9      	ldr	r1, [r5, #28]
   84570:	4640      	mov	r0, r8
   84572:	47a0      	blx	r4
   84574:	1c44      	adds	r4, r0, #1
   84576:	d03c      	beq.n	845f2 <__sflush_r+0xd2>
   84578:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8457c:	6929      	ldr	r1, [r5, #16]
   8457e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84582:	2200      	movs	r2, #0
   84584:	81ab      	strh	r3, [r5, #12]
   84586:	04db      	lsls	r3, r3, #19
   84588:	e885 0006 	stmia.w	r5, {r1, r2}
   8458c:	d449      	bmi.n	84622 <__sflush_r+0x102>
   8458e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84590:	f8c8 6000 	str.w	r6, [r8]
   84594:	b311      	cbz	r1, 845dc <__sflush_r+0xbc>
   84596:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8459a:	4299      	cmp	r1, r3
   8459c:	d002      	beq.n	845a4 <__sflush_r+0x84>
   8459e:	4640      	mov	r0, r8
   845a0:	f000 f9be 	bl	84920 <_free_r>
   845a4:	2000      	movs	r0, #0
   845a6:	6328      	str	r0, [r5, #48]	; 0x30
   845a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845ac:	692e      	ldr	r6, [r5, #16]
   845ae:	b1ae      	cbz	r6, 845dc <__sflush_r+0xbc>
   845b0:	0790      	lsls	r0, r2, #30
   845b2:	682c      	ldr	r4, [r5, #0]
   845b4:	bf0c      	ite	eq
   845b6:	696b      	ldreq	r3, [r5, #20]
   845b8:	2300      	movne	r3, #0
   845ba:	602e      	str	r6, [r5, #0]
   845bc:	1ba4      	subs	r4, r4, r6
   845be:	60ab      	str	r3, [r5, #8]
   845c0:	e00a      	b.n	845d8 <__sflush_r+0xb8>
   845c2:	4623      	mov	r3, r4
   845c4:	4632      	mov	r2, r6
   845c6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   845c8:	69e9      	ldr	r1, [r5, #28]
   845ca:	4640      	mov	r0, r8
   845cc:	47b8      	blx	r7
   845ce:	2800      	cmp	r0, #0
   845d0:	eba4 0400 	sub.w	r4, r4, r0
   845d4:	4406      	add	r6, r0
   845d6:	dd04      	ble.n	845e2 <__sflush_r+0xc2>
   845d8:	2c00      	cmp	r4, #0
   845da:	dcf2      	bgt.n	845c2 <__sflush_r+0xa2>
   845dc:	2000      	movs	r0, #0
   845de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845e2:	89ab      	ldrh	r3, [r5, #12]
   845e4:	f04f 30ff 	mov.w	r0, #4294967295
   845e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   845ec:	81ab      	strh	r3, [r5, #12]
   845ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   845f2:	f8d8 2000 	ldr.w	r2, [r8]
   845f6:	2a1d      	cmp	r2, #29
   845f8:	d8f3      	bhi.n	845e2 <__sflush_r+0xc2>
   845fa:	4b1a      	ldr	r3, [pc, #104]	; (84664 <__sflush_r+0x144>)
   845fc:	40d3      	lsrs	r3, r2
   845fe:	f003 0301 	and.w	r3, r3, #1
   84602:	f083 0401 	eor.w	r4, r3, #1
   84606:	2b00      	cmp	r3, #0
   84608:	d0eb      	beq.n	845e2 <__sflush_r+0xc2>
   8460a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8460e:	6929      	ldr	r1, [r5, #16]
   84610:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84614:	6029      	str	r1, [r5, #0]
   84616:	04d9      	lsls	r1, r3, #19
   84618:	606c      	str	r4, [r5, #4]
   8461a:	81ab      	strh	r3, [r5, #12]
   8461c:	d5b7      	bpl.n	8458e <__sflush_r+0x6e>
   8461e:	2a00      	cmp	r2, #0
   84620:	d1b5      	bne.n	8458e <__sflush_r+0x6e>
   84622:	6528      	str	r0, [r5, #80]	; 0x50
   84624:	e7b3      	b.n	8458e <__sflush_r+0x6e>
   84626:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84628:	2a00      	cmp	r2, #0
   8462a:	dc88      	bgt.n	8453e <__sflush_r+0x1e>
   8462c:	e7d6      	b.n	845dc <__sflush_r+0xbc>
   8462e:	2301      	movs	r3, #1
   84630:	69e9      	ldr	r1, [r5, #28]
   84632:	4640      	mov	r0, r8
   84634:	47a0      	blx	r4
   84636:	1c43      	adds	r3, r0, #1
   84638:	4602      	mov	r2, r0
   8463a:	d002      	beq.n	84642 <__sflush_r+0x122>
   8463c:	89ab      	ldrh	r3, [r5, #12]
   8463e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84640:	e78c      	b.n	8455c <__sflush_r+0x3c>
   84642:	f8d8 3000 	ldr.w	r3, [r8]
   84646:	2b00      	cmp	r3, #0
   84648:	d0f8      	beq.n	8463c <__sflush_r+0x11c>
   8464a:	2b1d      	cmp	r3, #29
   8464c:	d001      	beq.n	84652 <__sflush_r+0x132>
   8464e:	2b16      	cmp	r3, #22
   84650:	d102      	bne.n	84658 <__sflush_r+0x138>
   84652:	f8c8 6000 	str.w	r6, [r8]
   84656:	e7c1      	b.n	845dc <__sflush_r+0xbc>
   84658:	89ab      	ldrh	r3, [r5, #12]
   8465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8465e:	81ab      	strh	r3, [r5, #12]
   84660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84664:	20400001 	.word	0x20400001

00084668 <_fflush_r>:
   84668:	b510      	push	{r4, lr}
   8466a:	4604      	mov	r4, r0
   8466c:	b082      	sub	sp, #8
   8466e:	b108      	cbz	r0, 84674 <_fflush_r+0xc>
   84670:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84672:	b153      	cbz	r3, 8468a <_fflush_r+0x22>
   84674:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84678:	b908      	cbnz	r0, 8467e <_fflush_r+0x16>
   8467a:	b002      	add	sp, #8
   8467c:	bd10      	pop	{r4, pc}
   8467e:	4620      	mov	r0, r4
   84680:	b002      	add	sp, #8
   84682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84686:	f7ff bf4b 	b.w	84520 <__sflush_r>
   8468a:	9101      	str	r1, [sp, #4]
   8468c:	f000 f880 	bl	84790 <__sinit>
   84690:	9901      	ldr	r1, [sp, #4]
   84692:	e7ef      	b.n	84674 <_fflush_r+0xc>

00084694 <_cleanup_r>:
   84694:	4901      	ldr	r1, [pc, #4]	; (8469c <_cleanup_r+0x8>)
   84696:	f000 bbaf 	b.w	84df8 <_fwalk_reent>
   8469a:	bf00      	nop
   8469c:	00085c99 	.word	0x00085c99

000846a0 <__sinit.part.1>:
   846a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   846a4:	4607      	mov	r7, r0
   846a6:	4835      	ldr	r0, [pc, #212]	; (8477c <__sinit.part.1+0xdc>)
   846a8:	687d      	ldr	r5, [r7, #4]
   846aa:	2400      	movs	r4, #0
   846ac:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   846b0:	2304      	movs	r3, #4
   846b2:	2103      	movs	r1, #3
   846b4:	63f8      	str	r0, [r7, #60]	; 0x3c
   846b6:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   846ba:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   846be:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   846c2:	b083      	sub	sp, #12
   846c4:	602c      	str	r4, [r5, #0]
   846c6:	606c      	str	r4, [r5, #4]
   846c8:	60ac      	str	r4, [r5, #8]
   846ca:	666c      	str	r4, [r5, #100]	; 0x64
   846cc:	81ec      	strh	r4, [r5, #14]
   846ce:	612c      	str	r4, [r5, #16]
   846d0:	616c      	str	r4, [r5, #20]
   846d2:	61ac      	str	r4, [r5, #24]
   846d4:	81ab      	strh	r3, [r5, #12]
   846d6:	4621      	mov	r1, r4
   846d8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   846dc:	2208      	movs	r2, #8
   846de:	f7fe fde5 	bl	832ac <memset>
   846e2:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84780 <__sinit.part.1+0xe0>
   846e6:	68be      	ldr	r6, [r7, #8]
   846e8:	f8df a098 	ldr.w	sl, [pc, #152]	; 84784 <__sinit.part.1+0xe4>
   846ec:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84788 <__sinit.part.1+0xe8>
   846f0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8478c <__sinit.part.1+0xec>
   846f4:	2301      	movs	r3, #1
   846f6:	2209      	movs	r2, #9
   846f8:	f8c5 b020 	str.w	fp, [r5, #32]
   846fc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84700:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84704:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84708:	61ed      	str	r5, [r5, #28]
   8470a:	4621      	mov	r1, r4
   8470c:	81f3      	strh	r3, [r6, #14]
   8470e:	81b2      	strh	r2, [r6, #12]
   84710:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84714:	6034      	str	r4, [r6, #0]
   84716:	6074      	str	r4, [r6, #4]
   84718:	60b4      	str	r4, [r6, #8]
   8471a:	6674      	str	r4, [r6, #100]	; 0x64
   8471c:	6134      	str	r4, [r6, #16]
   8471e:	6174      	str	r4, [r6, #20]
   84720:	61b4      	str	r4, [r6, #24]
   84722:	2208      	movs	r2, #8
   84724:	9301      	str	r3, [sp, #4]
   84726:	f7fe fdc1 	bl	832ac <memset>
   8472a:	68fd      	ldr	r5, [r7, #12]
   8472c:	2012      	movs	r0, #18
   8472e:	2202      	movs	r2, #2
   84730:	61f6      	str	r6, [r6, #28]
   84732:	f8c6 b020 	str.w	fp, [r6, #32]
   84736:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8473a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8473e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84742:	4621      	mov	r1, r4
   84744:	81a8      	strh	r0, [r5, #12]
   84746:	81ea      	strh	r2, [r5, #14]
   84748:	602c      	str	r4, [r5, #0]
   8474a:	606c      	str	r4, [r5, #4]
   8474c:	60ac      	str	r4, [r5, #8]
   8474e:	666c      	str	r4, [r5, #100]	; 0x64
   84750:	612c      	str	r4, [r5, #16]
   84752:	616c      	str	r4, [r5, #20]
   84754:	61ac      	str	r4, [r5, #24]
   84756:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8475a:	2208      	movs	r2, #8
   8475c:	f7fe fda6 	bl	832ac <memset>
   84760:	9b01      	ldr	r3, [sp, #4]
   84762:	61ed      	str	r5, [r5, #28]
   84764:	f8c5 b020 	str.w	fp, [r5, #32]
   84768:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8476c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84770:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84774:	63bb      	str	r3, [r7, #56]	; 0x38
   84776:	b003      	add	sp, #12
   84778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8477c:	00084695 	.word	0x00084695
   84780:	00085a01 	.word	0x00085a01
   84784:	00085a25 	.word	0x00085a25
   84788:	00085a61 	.word	0x00085a61
   8478c:	00085a81 	.word	0x00085a81

00084790 <__sinit>:
   84790:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84792:	b103      	cbz	r3, 84796 <__sinit+0x6>
   84794:	4770      	bx	lr
   84796:	f7ff bf83 	b.w	846a0 <__sinit.part.1>
   8479a:	bf00      	nop

0008479c <__sfp_lock_acquire>:
   8479c:	4770      	bx	lr
   8479e:	bf00      	nop

000847a0 <__sfp_lock_release>:
   847a0:	4770      	bx	lr
   847a2:	bf00      	nop

000847a4 <__libc_fini_array>:
   847a4:	b538      	push	{r3, r4, r5, lr}
   847a6:	4d07      	ldr	r5, [pc, #28]	; (847c4 <__libc_fini_array+0x20>)
   847a8:	4c07      	ldr	r4, [pc, #28]	; (847c8 <__libc_fini_array+0x24>)
   847aa:	1b2c      	subs	r4, r5, r4
   847ac:	10a4      	asrs	r4, r4, #2
   847ae:	d005      	beq.n	847bc <__libc_fini_array+0x18>
   847b0:	3c01      	subs	r4, #1
   847b2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   847b6:	4798      	blx	r3
   847b8:	2c00      	cmp	r4, #0
   847ba:	d1f9      	bne.n	847b0 <__libc_fini_array+0xc>
   847bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   847c0:	f001 bd30 	b.w	86224 <_fini>
   847c4:	00086234 	.word	0x00086234
   847c8:	00086230 	.word	0x00086230

000847cc <__fputwc>:
   847cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   847d0:	b082      	sub	sp, #8
   847d2:	4606      	mov	r6, r0
   847d4:	460f      	mov	r7, r1
   847d6:	4614      	mov	r4, r2
   847d8:	f000 fb3a 	bl	84e50 <__locale_mb_cur_max>
   847dc:	2801      	cmp	r0, #1
   847de:	d032      	beq.n	84846 <__fputwc+0x7a>
   847e0:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   847e4:	463a      	mov	r2, r7
   847e6:	a901      	add	r1, sp, #4
   847e8:	4630      	mov	r0, r6
   847ea:	f001 f9a3 	bl	85b34 <_wcrtomb_r>
   847ee:	f1b0 3fff 	cmp.w	r0, #4294967295
   847f2:	4680      	mov	r8, r0
   847f4:	d020      	beq.n	84838 <__fputwc+0x6c>
   847f6:	b370      	cbz	r0, 84856 <__fputwc+0x8a>
   847f8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   847fc:	2500      	movs	r5, #0
   847fe:	e008      	b.n	84812 <__fputwc+0x46>
   84800:	6823      	ldr	r3, [r4, #0]
   84802:	1c5a      	adds	r2, r3, #1
   84804:	6022      	str	r2, [r4, #0]
   84806:	7019      	strb	r1, [r3, #0]
   84808:	3501      	adds	r5, #1
   8480a:	4545      	cmp	r5, r8
   8480c:	d223      	bcs.n	84856 <__fputwc+0x8a>
   8480e:	ab01      	add	r3, sp, #4
   84810:	5d59      	ldrb	r1, [r3, r5]
   84812:	68a3      	ldr	r3, [r4, #8]
   84814:	3b01      	subs	r3, #1
   84816:	2b00      	cmp	r3, #0
   84818:	60a3      	str	r3, [r4, #8]
   8481a:	daf1      	bge.n	84800 <__fputwc+0x34>
   8481c:	69a2      	ldr	r2, [r4, #24]
   8481e:	4293      	cmp	r3, r2
   84820:	db01      	blt.n	84826 <__fputwc+0x5a>
   84822:	290a      	cmp	r1, #10
   84824:	d1ec      	bne.n	84800 <__fputwc+0x34>
   84826:	4622      	mov	r2, r4
   84828:	4630      	mov	r0, r6
   8482a:	f001 f92d 	bl	85a88 <__swbuf_r>
   8482e:	1c43      	adds	r3, r0, #1
   84830:	d1ea      	bne.n	84808 <__fputwc+0x3c>
   84832:	b002      	add	sp, #8
   84834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84838:	89a3      	ldrh	r3, [r4, #12]
   8483a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8483e:	81a3      	strh	r3, [r4, #12]
   84840:	b002      	add	sp, #8
   84842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84846:	1e7b      	subs	r3, r7, #1
   84848:	2bfe      	cmp	r3, #254	; 0xfe
   8484a:	d8c9      	bhi.n	847e0 <__fputwc+0x14>
   8484c:	b2f9      	uxtb	r1, r7
   8484e:	4680      	mov	r8, r0
   84850:	f88d 1004 	strb.w	r1, [sp, #4]
   84854:	e7d2      	b.n	847fc <__fputwc+0x30>
   84856:	4638      	mov	r0, r7
   84858:	b002      	add	sp, #8
   8485a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8485e:	bf00      	nop

00084860 <_fputwc_r>:
   84860:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84864:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84868:	d10a      	bne.n	84880 <_fputwc_r+0x20>
   8486a:	b410      	push	{r4}
   8486c:	6e54      	ldr	r4, [r2, #100]	; 0x64
   8486e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84872:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84876:	6654      	str	r4, [r2, #100]	; 0x64
   84878:	8193      	strh	r3, [r2, #12]
   8487a:	bc10      	pop	{r4}
   8487c:	f7ff bfa6 	b.w	847cc <__fputwc>
   84880:	f7ff bfa4 	b.w	847cc <__fputwc>

00084884 <_malloc_trim_r>:
   84884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84886:	460c      	mov	r4, r1
   84888:	4f22      	ldr	r7, [pc, #136]	; (84914 <_malloc_trim_r+0x90>)
   8488a:	4606      	mov	r6, r0
   8488c:	f000 feb8 	bl	85600 <__malloc_lock>
   84890:	68bb      	ldr	r3, [r7, #8]
   84892:	685d      	ldr	r5, [r3, #4]
   84894:	f025 0503 	bic.w	r5, r5, #3
   84898:	1b29      	subs	r1, r5, r4
   8489a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8489e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   848a2:	f021 010f 	bic.w	r1, r1, #15
   848a6:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   848aa:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   848ae:	db07      	blt.n	848c0 <_malloc_trim_r+0x3c>
   848b0:	2100      	movs	r1, #0
   848b2:	4630      	mov	r0, r6
   848b4:	f001 f892 	bl	859dc <_sbrk_r>
   848b8:	68bb      	ldr	r3, [r7, #8]
   848ba:	442b      	add	r3, r5
   848bc:	4298      	cmp	r0, r3
   848be:	d004      	beq.n	848ca <_malloc_trim_r+0x46>
   848c0:	4630      	mov	r0, r6
   848c2:	f000 fe9f 	bl	85604 <__malloc_unlock>
   848c6:	2000      	movs	r0, #0
   848c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848ca:	4261      	negs	r1, r4
   848cc:	4630      	mov	r0, r6
   848ce:	f001 f885 	bl	859dc <_sbrk_r>
   848d2:	3001      	adds	r0, #1
   848d4:	d00d      	beq.n	848f2 <_malloc_trim_r+0x6e>
   848d6:	4b10      	ldr	r3, [pc, #64]	; (84918 <_malloc_trim_r+0x94>)
   848d8:	68ba      	ldr	r2, [r7, #8]
   848da:	6819      	ldr	r1, [r3, #0]
   848dc:	1b2d      	subs	r5, r5, r4
   848de:	f045 0501 	orr.w	r5, r5, #1
   848e2:	4630      	mov	r0, r6
   848e4:	1b09      	subs	r1, r1, r4
   848e6:	6055      	str	r5, [r2, #4]
   848e8:	6019      	str	r1, [r3, #0]
   848ea:	f000 fe8b 	bl	85604 <__malloc_unlock>
   848ee:	2001      	movs	r0, #1
   848f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848f2:	2100      	movs	r1, #0
   848f4:	4630      	mov	r0, r6
   848f6:	f001 f871 	bl	859dc <_sbrk_r>
   848fa:	68ba      	ldr	r2, [r7, #8]
   848fc:	1a83      	subs	r3, r0, r2
   848fe:	2b0f      	cmp	r3, #15
   84900:	ddde      	ble.n	848c0 <_malloc_trim_r+0x3c>
   84902:	4c06      	ldr	r4, [pc, #24]	; (8491c <_malloc_trim_r+0x98>)
   84904:	4904      	ldr	r1, [pc, #16]	; (84918 <_malloc_trim_r+0x94>)
   84906:	6824      	ldr	r4, [r4, #0]
   84908:	f043 0301 	orr.w	r3, r3, #1
   8490c:	1b00      	subs	r0, r0, r4
   8490e:	6053      	str	r3, [r2, #4]
   84910:	6008      	str	r0, [r1, #0]
   84912:	e7d5      	b.n	848c0 <_malloc_trim_r+0x3c>
   84914:	20070590 	.word	0x20070590
   84918:	20078c34 	.word	0x20078c34
   8491c:	2007099c 	.word	0x2007099c

00084920 <_free_r>:
   84920:	2900      	cmp	r1, #0
   84922:	d045      	beq.n	849b0 <_free_r+0x90>
   84924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84928:	460d      	mov	r5, r1
   8492a:	4680      	mov	r8, r0
   8492c:	f000 fe68 	bl	85600 <__malloc_lock>
   84930:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84934:	496a      	ldr	r1, [pc, #424]	; (84ae0 <_free_r+0x1c0>)
   84936:	f1a5 0408 	sub.w	r4, r5, #8
   8493a:	f027 0301 	bic.w	r3, r7, #1
   8493e:	18e2      	adds	r2, r4, r3
   84940:	688e      	ldr	r6, [r1, #8]
   84942:	6850      	ldr	r0, [r2, #4]
   84944:	42b2      	cmp	r2, r6
   84946:	f020 0003 	bic.w	r0, r0, #3
   8494a:	d062      	beq.n	84a12 <_free_r+0xf2>
   8494c:	07fe      	lsls	r6, r7, #31
   8494e:	6050      	str	r0, [r2, #4]
   84950:	d40b      	bmi.n	8496a <_free_r+0x4a>
   84952:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84956:	f101 0e08 	add.w	lr, r1, #8
   8495a:	1be4      	subs	r4, r4, r7
   8495c:	68a5      	ldr	r5, [r4, #8]
   8495e:	443b      	add	r3, r7
   84960:	4575      	cmp	r5, lr
   84962:	d06f      	beq.n	84a44 <_free_r+0x124>
   84964:	68e7      	ldr	r7, [r4, #12]
   84966:	60ef      	str	r7, [r5, #12]
   84968:	60bd      	str	r5, [r7, #8]
   8496a:	1815      	adds	r5, r2, r0
   8496c:	686d      	ldr	r5, [r5, #4]
   8496e:	07ed      	lsls	r5, r5, #31
   84970:	d542      	bpl.n	849f8 <_free_r+0xd8>
   84972:	f043 0201 	orr.w	r2, r3, #1
   84976:	6062      	str	r2, [r4, #4]
   84978:	50e3      	str	r3, [r4, r3]
   8497a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8497e:	d218      	bcs.n	849b2 <_free_r+0x92>
   84980:	08db      	lsrs	r3, r3, #3
   84982:	6848      	ldr	r0, [r1, #4]
   84984:	109d      	asrs	r5, r3, #2
   84986:	2201      	movs	r2, #1
   84988:	3301      	adds	r3, #1
   8498a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8498e:	fa02 f505 	lsl.w	r5, r2, r5
   84992:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   84996:	4328      	orrs	r0, r5
   84998:	3a08      	subs	r2, #8
   8499a:	60e2      	str	r2, [r4, #12]
   8499c:	60a7      	str	r7, [r4, #8]
   8499e:	6048      	str	r0, [r1, #4]
   849a0:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   849a4:	60fc      	str	r4, [r7, #12]
   849a6:	4640      	mov	r0, r8
   849a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   849ac:	f000 be2a 	b.w	85604 <__malloc_unlock>
   849b0:	4770      	bx	lr
   849b2:	0a5a      	lsrs	r2, r3, #9
   849b4:	2a04      	cmp	r2, #4
   849b6:	d853      	bhi.n	84a60 <_free_r+0x140>
   849b8:	099a      	lsrs	r2, r3, #6
   849ba:	f102 0739 	add.w	r7, r2, #57	; 0x39
   849be:	007f      	lsls	r7, r7, #1
   849c0:	f102 0538 	add.w	r5, r2, #56	; 0x38
   849c4:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   849c8:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   849cc:	3808      	subs	r0, #8
   849ce:	4290      	cmp	r0, r2
   849d0:	4943      	ldr	r1, [pc, #268]	; (84ae0 <_free_r+0x1c0>)
   849d2:	d04d      	beq.n	84a70 <_free_r+0x150>
   849d4:	6851      	ldr	r1, [r2, #4]
   849d6:	f021 0103 	bic.w	r1, r1, #3
   849da:	428b      	cmp	r3, r1
   849dc:	d202      	bcs.n	849e4 <_free_r+0xc4>
   849de:	6892      	ldr	r2, [r2, #8]
   849e0:	4290      	cmp	r0, r2
   849e2:	d1f7      	bne.n	849d4 <_free_r+0xb4>
   849e4:	68d0      	ldr	r0, [r2, #12]
   849e6:	60e0      	str	r0, [r4, #12]
   849e8:	60a2      	str	r2, [r4, #8]
   849ea:	6084      	str	r4, [r0, #8]
   849ec:	60d4      	str	r4, [r2, #12]
   849ee:	4640      	mov	r0, r8
   849f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   849f4:	f000 be06 	b.w	85604 <__malloc_unlock>
   849f8:	6895      	ldr	r5, [r2, #8]
   849fa:	4f3a      	ldr	r7, [pc, #232]	; (84ae4 <_free_r+0x1c4>)
   849fc:	4403      	add	r3, r0
   849fe:	42bd      	cmp	r5, r7
   84a00:	d03f      	beq.n	84a82 <_free_r+0x162>
   84a02:	68d0      	ldr	r0, [r2, #12]
   84a04:	f043 0201 	orr.w	r2, r3, #1
   84a08:	60e8      	str	r0, [r5, #12]
   84a0a:	6085      	str	r5, [r0, #8]
   84a0c:	6062      	str	r2, [r4, #4]
   84a0e:	50e3      	str	r3, [r4, r3]
   84a10:	e7b3      	b.n	8497a <_free_r+0x5a>
   84a12:	07ff      	lsls	r7, r7, #31
   84a14:	4403      	add	r3, r0
   84a16:	d407      	bmi.n	84a28 <_free_r+0x108>
   84a18:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84a1c:	1b64      	subs	r4, r4, r5
   84a1e:	68e2      	ldr	r2, [r4, #12]
   84a20:	68a0      	ldr	r0, [r4, #8]
   84a22:	442b      	add	r3, r5
   84a24:	60c2      	str	r2, [r0, #12]
   84a26:	6090      	str	r0, [r2, #8]
   84a28:	4a2f      	ldr	r2, [pc, #188]	; (84ae8 <_free_r+0x1c8>)
   84a2a:	f043 0001 	orr.w	r0, r3, #1
   84a2e:	6812      	ldr	r2, [r2, #0]
   84a30:	6060      	str	r0, [r4, #4]
   84a32:	4293      	cmp	r3, r2
   84a34:	608c      	str	r4, [r1, #8]
   84a36:	d3b6      	bcc.n	849a6 <_free_r+0x86>
   84a38:	4b2c      	ldr	r3, [pc, #176]	; (84aec <_free_r+0x1cc>)
   84a3a:	4640      	mov	r0, r8
   84a3c:	6819      	ldr	r1, [r3, #0]
   84a3e:	f7ff ff21 	bl	84884 <_malloc_trim_r>
   84a42:	e7b0      	b.n	849a6 <_free_r+0x86>
   84a44:	1811      	adds	r1, r2, r0
   84a46:	6849      	ldr	r1, [r1, #4]
   84a48:	07c9      	lsls	r1, r1, #31
   84a4a:	d444      	bmi.n	84ad6 <_free_r+0x1b6>
   84a4c:	6891      	ldr	r1, [r2, #8]
   84a4e:	4403      	add	r3, r0
   84a50:	68d2      	ldr	r2, [r2, #12]
   84a52:	f043 0001 	orr.w	r0, r3, #1
   84a56:	60ca      	str	r2, [r1, #12]
   84a58:	6091      	str	r1, [r2, #8]
   84a5a:	6060      	str	r0, [r4, #4]
   84a5c:	50e3      	str	r3, [r4, r3]
   84a5e:	e7a2      	b.n	849a6 <_free_r+0x86>
   84a60:	2a14      	cmp	r2, #20
   84a62:	d817      	bhi.n	84a94 <_free_r+0x174>
   84a64:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84a68:	007f      	lsls	r7, r7, #1
   84a6a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   84a6e:	e7a9      	b.n	849c4 <_free_r+0xa4>
   84a70:	10aa      	asrs	r2, r5, #2
   84a72:	684b      	ldr	r3, [r1, #4]
   84a74:	2501      	movs	r5, #1
   84a76:	fa05 f202 	lsl.w	r2, r5, r2
   84a7a:	4313      	orrs	r3, r2
   84a7c:	604b      	str	r3, [r1, #4]
   84a7e:	4602      	mov	r2, r0
   84a80:	e7b1      	b.n	849e6 <_free_r+0xc6>
   84a82:	f043 0201 	orr.w	r2, r3, #1
   84a86:	614c      	str	r4, [r1, #20]
   84a88:	610c      	str	r4, [r1, #16]
   84a8a:	60e5      	str	r5, [r4, #12]
   84a8c:	60a5      	str	r5, [r4, #8]
   84a8e:	6062      	str	r2, [r4, #4]
   84a90:	50e3      	str	r3, [r4, r3]
   84a92:	e788      	b.n	849a6 <_free_r+0x86>
   84a94:	2a54      	cmp	r2, #84	; 0x54
   84a96:	d806      	bhi.n	84aa6 <_free_r+0x186>
   84a98:	0b1a      	lsrs	r2, r3, #12
   84a9a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84a9e:	007f      	lsls	r7, r7, #1
   84aa0:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   84aa4:	e78e      	b.n	849c4 <_free_r+0xa4>
   84aa6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84aaa:	d806      	bhi.n	84aba <_free_r+0x19a>
   84aac:	0bda      	lsrs	r2, r3, #15
   84aae:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84ab2:	007f      	lsls	r7, r7, #1
   84ab4:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84ab8:	e784      	b.n	849c4 <_free_r+0xa4>
   84aba:	f240 5054 	movw	r0, #1364	; 0x554
   84abe:	4282      	cmp	r2, r0
   84ac0:	d806      	bhi.n	84ad0 <_free_r+0x1b0>
   84ac2:	0c9a      	lsrs	r2, r3, #18
   84ac4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84ac8:	007f      	lsls	r7, r7, #1
   84aca:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84ace:	e779      	b.n	849c4 <_free_r+0xa4>
   84ad0:	27fe      	movs	r7, #254	; 0xfe
   84ad2:	257e      	movs	r5, #126	; 0x7e
   84ad4:	e776      	b.n	849c4 <_free_r+0xa4>
   84ad6:	f043 0201 	orr.w	r2, r3, #1
   84ada:	6062      	str	r2, [r4, #4]
   84adc:	50e3      	str	r3, [r4, r3]
   84ade:	e762      	b.n	849a6 <_free_r+0x86>
   84ae0:	20070590 	.word	0x20070590
   84ae4:	20070598 	.word	0x20070598
   84ae8:	20070998 	.word	0x20070998
   84aec:	20078c30 	.word	0x20078c30

00084af0 <__sfvwrite_r>:
   84af0:	6893      	ldr	r3, [r2, #8]
   84af2:	2b00      	cmp	r3, #0
   84af4:	f000 80ab 	beq.w	84c4e <__sfvwrite_r+0x15e>
   84af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84afc:	898b      	ldrh	r3, [r1, #12]
   84afe:	b085      	sub	sp, #20
   84b00:	460c      	mov	r4, r1
   84b02:	0719      	lsls	r1, r3, #28
   84b04:	9002      	str	r0, [sp, #8]
   84b06:	4616      	mov	r6, r2
   84b08:	d528      	bpl.n	84b5c <__sfvwrite_r+0x6c>
   84b0a:	6922      	ldr	r2, [r4, #16]
   84b0c:	b332      	cbz	r2, 84b5c <__sfvwrite_r+0x6c>
   84b0e:	f003 0802 	and.w	r8, r3, #2
   84b12:	fa1f f088 	uxth.w	r0, r8
   84b16:	6835      	ldr	r5, [r6, #0]
   84b18:	b378      	cbz	r0, 84b7a <__sfvwrite_r+0x8a>
   84b1a:	f04f 0900 	mov.w	r9, #0
   84b1e:	46c8      	mov	r8, r9
   84b20:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 84df4 <__sfvwrite_r+0x304>
   84b24:	f1b8 0f00 	cmp.w	r8, #0
   84b28:	f000 808b 	beq.w	84c42 <__sfvwrite_r+0x152>
   84b2c:	45d0      	cmp	r8, sl
   84b2e:	4643      	mov	r3, r8
   84b30:	464a      	mov	r2, r9
   84b32:	bf28      	it	cs
   84b34:	4653      	movcs	r3, sl
   84b36:	69e1      	ldr	r1, [r4, #28]
   84b38:	9802      	ldr	r0, [sp, #8]
   84b3a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84b3c:	47b8      	blx	r7
   84b3e:	2800      	cmp	r0, #0
   84b40:	f340 80a5 	ble.w	84c8e <__sfvwrite_r+0x19e>
   84b44:	68b3      	ldr	r3, [r6, #8]
   84b46:	4481      	add	r9, r0
   84b48:	1a1b      	subs	r3, r3, r0
   84b4a:	ebc0 0808 	rsb	r8, r0, r8
   84b4e:	60b3      	str	r3, [r6, #8]
   84b50:	2b00      	cmp	r3, #0
   84b52:	d1e7      	bne.n	84b24 <__sfvwrite_r+0x34>
   84b54:	2000      	movs	r0, #0
   84b56:	b005      	add	sp, #20
   84b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b5c:	4621      	mov	r1, r4
   84b5e:	9802      	ldr	r0, [sp, #8]
   84b60:	f7ff fc6a 	bl	84438 <__swsetup_r>
   84b64:	2800      	cmp	r0, #0
   84b66:	f040 813c 	bne.w	84de2 <__sfvwrite_r+0x2f2>
   84b6a:	89a3      	ldrh	r3, [r4, #12]
   84b6c:	6835      	ldr	r5, [r6, #0]
   84b6e:	f003 0802 	and.w	r8, r3, #2
   84b72:	fa1f f088 	uxth.w	r0, r8
   84b76:	2800      	cmp	r0, #0
   84b78:	d1cf      	bne.n	84b1a <__sfvwrite_r+0x2a>
   84b7a:	f013 0901 	ands.w	r9, r3, #1
   84b7e:	f040 8090 	bne.w	84ca2 <__sfvwrite_r+0x1b2>
   84b82:	464f      	mov	r7, r9
   84b84:	9601      	str	r6, [sp, #4]
   84b86:	2f00      	cmp	r7, #0
   84b88:	d056      	beq.n	84c38 <__sfvwrite_r+0x148>
   84b8a:	059a      	lsls	r2, r3, #22
   84b8c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   84b90:	d55f      	bpl.n	84c52 <__sfvwrite_r+0x162>
   84b92:	4547      	cmp	r7, r8
   84b94:	46c2      	mov	sl, r8
   84b96:	f0c0 80bf 	bcc.w	84d18 <__sfvwrite_r+0x228>
   84b9a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84b9e:	f000 80bd 	beq.w	84d1c <__sfvwrite_r+0x22c>
   84ba2:	6962      	ldr	r2, [r4, #20]
   84ba4:	6820      	ldr	r0, [r4, #0]
   84ba6:	6921      	ldr	r1, [r4, #16]
   84ba8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   84bac:	ebc1 0a00 	rsb	sl, r1, r0
   84bb0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   84bb4:	f10a 0001 	add.w	r0, sl, #1
   84bb8:	ea4f 0868 	mov.w	r8, r8, asr #1
   84bbc:	4438      	add	r0, r7
   84bbe:	4540      	cmp	r0, r8
   84bc0:	4642      	mov	r2, r8
   84bc2:	bf84      	itt	hi
   84bc4:	4680      	movhi	r8, r0
   84bc6:	4642      	movhi	r2, r8
   84bc8:	055b      	lsls	r3, r3, #21
   84bca:	f140 80f2 	bpl.w	84db2 <__sfvwrite_r+0x2c2>
   84bce:	4611      	mov	r1, r2
   84bd0:	9802      	ldr	r0, [sp, #8]
   84bd2:	f000 f9bf 	bl	84f54 <_malloc_r>
   84bd6:	4683      	mov	fp, r0
   84bd8:	2800      	cmp	r0, #0
   84bda:	f000 8105 	beq.w	84de8 <__sfvwrite_r+0x2f8>
   84bde:	4652      	mov	r2, sl
   84be0:	6921      	ldr	r1, [r4, #16]
   84be2:	f7fe faed 	bl	831c0 <memcpy>
   84be6:	89a3      	ldrh	r3, [r4, #12]
   84be8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   84bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84bf0:	81a3      	strh	r3, [r4, #12]
   84bf2:	ebca 0308 	rsb	r3, sl, r8
   84bf6:	eb0b 000a 	add.w	r0, fp, sl
   84bfa:	f8c4 8014 	str.w	r8, [r4, #20]
   84bfe:	46ba      	mov	sl, r7
   84c00:	46b8      	mov	r8, r7
   84c02:	f8c4 b010 	str.w	fp, [r4, #16]
   84c06:	6020      	str	r0, [r4, #0]
   84c08:	60a3      	str	r3, [r4, #8]
   84c0a:	4652      	mov	r2, sl
   84c0c:	4649      	mov	r1, r9
   84c0e:	f000 fc93 	bl	85538 <memmove>
   84c12:	68a0      	ldr	r0, [r4, #8]
   84c14:	6823      	ldr	r3, [r4, #0]
   84c16:	ebc8 0000 	rsb	r0, r8, r0
   84c1a:	60a0      	str	r0, [r4, #8]
   84c1c:	4638      	mov	r0, r7
   84c1e:	4453      	add	r3, sl
   84c20:	6023      	str	r3, [r4, #0]
   84c22:	9a01      	ldr	r2, [sp, #4]
   84c24:	4481      	add	r9, r0
   84c26:	6893      	ldr	r3, [r2, #8]
   84c28:	1a3f      	subs	r7, r7, r0
   84c2a:	1a1b      	subs	r3, r3, r0
   84c2c:	6093      	str	r3, [r2, #8]
   84c2e:	2b00      	cmp	r3, #0
   84c30:	d090      	beq.n	84b54 <__sfvwrite_r+0x64>
   84c32:	89a3      	ldrh	r3, [r4, #12]
   84c34:	2f00      	cmp	r7, #0
   84c36:	d1a8      	bne.n	84b8a <__sfvwrite_r+0x9a>
   84c38:	f8d5 9000 	ldr.w	r9, [r5]
   84c3c:	686f      	ldr	r7, [r5, #4]
   84c3e:	3508      	adds	r5, #8
   84c40:	e7a1      	b.n	84b86 <__sfvwrite_r+0x96>
   84c42:	f8d5 9000 	ldr.w	r9, [r5]
   84c46:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84c4a:	3508      	adds	r5, #8
   84c4c:	e76a      	b.n	84b24 <__sfvwrite_r+0x34>
   84c4e:	2000      	movs	r0, #0
   84c50:	4770      	bx	lr
   84c52:	6820      	ldr	r0, [r4, #0]
   84c54:	6923      	ldr	r3, [r4, #16]
   84c56:	4298      	cmp	r0, r3
   84c58:	d803      	bhi.n	84c62 <__sfvwrite_r+0x172>
   84c5a:	6962      	ldr	r2, [r4, #20]
   84c5c:	4297      	cmp	r7, r2
   84c5e:	f080 8083 	bcs.w	84d68 <__sfvwrite_r+0x278>
   84c62:	45b8      	cmp	r8, r7
   84c64:	bf28      	it	cs
   84c66:	46b8      	movcs	r8, r7
   84c68:	4649      	mov	r1, r9
   84c6a:	4642      	mov	r2, r8
   84c6c:	f000 fc64 	bl	85538 <memmove>
   84c70:	68a3      	ldr	r3, [r4, #8]
   84c72:	6822      	ldr	r2, [r4, #0]
   84c74:	ebc8 0303 	rsb	r3, r8, r3
   84c78:	4442      	add	r2, r8
   84c7a:	60a3      	str	r3, [r4, #8]
   84c7c:	6022      	str	r2, [r4, #0]
   84c7e:	2b00      	cmp	r3, #0
   84c80:	d148      	bne.n	84d14 <__sfvwrite_r+0x224>
   84c82:	4621      	mov	r1, r4
   84c84:	9802      	ldr	r0, [sp, #8]
   84c86:	f7ff fcef 	bl	84668 <_fflush_r>
   84c8a:	2800      	cmp	r0, #0
   84c8c:	d042      	beq.n	84d14 <__sfvwrite_r+0x224>
   84c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84c96:	f04f 30ff 	mov.w	r0, #4294967295
   84c9a:	81a3      	strh	r3, [r4, #12]
   84c9c:	b005      	add	sp, #20
   84c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ca2:	4680      	mov	r8, r0
   84ca4:	4682      	mov	sl, r0
   84ca6:	4681      	mov	r9, r0
   84ca8:	9001      	str	r0, [sp, #4]
   84caa:	f1b9 0f00 	cmp.w	r9, #0
   84cae:	d029      	beq.n	84d04 <__sfvwrite_r+0x214>
   84cb0:	9b01      	ldr	r3, [sp, #4]
   84cb2:	2b00      	cmp	r3, #0
   84cb4:	d04b      	beq.n	84d4e <__sfvwrite_r+0x25e>
   84cb6:	45c8      	cmp	r8, r9
   84cb8:	46c3      	mov	fp, r8
   84cba:	bf28      	it	cs
   84cbc:	46cb      	movcs	fp, r9
   84cbe:	6820      	ldr	r0, [r4, #0]
   84cc0:	6923      	ldr	r3, [r4, #16]
   84cc2:	465f      	mov	r7, fp
   84cc4:	4298      	cmp	r0, r3
   84cc6:	6962      	ldr	r2, [r4, #20]
   84cc8:	d903      	bls.n	84cd2 <__sfvwrite_r+0x1e2>
   84cca:	68a3      	ldr	r3, [r4, #8]
   84ccc:	4413      	add	r3, r2
   84cce:	459b      	cmp	fp, r3
   84cd0:	dc5c      	bgt.n	84d8c <__sfvwrite_r+0x29c>
   84cd2:	4593      	cmp	fp, r2
   84cd4:	db24      	blt.n	84d20 <__sfvwrite_r+0x230>
   84cd6:	4613      	mov	r3, r2
   84cd8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84cda:	4652      	mov	r2, sl
   84cdc:	69e1      	ldr	r1, [r4, #28]
   84cde:	9802      	ldr	r0, [sp, #8]
   84ce0:	47b8      	blx	r7
   84ce2:	1e07      	subs	r7, r0, #0
   84ce4:	ddd3      	ble.n	84c8e <__sfvwrite_r+0x19e>
   84ce6:	ebb8 0807 	subs.w	r8, r8, r7
   84cea:	d027      	beq.n	84d3c <__sfvwrite_r+0x24c>
   84cec:	68b3      	ldr	r3, [r6, #8]
   84cee:	44ba      	add	sl, r7
   84cf0:	1bdb      	subs	r3, r3, r7
   84cf2:	ebc7 0909 	rsb	r9, r7, r9
   84cf6:	60b3      	str	r3, [r6, #8]
   84cf8:	2b00      	cmp	r3, #0
   84cfa:	f43f af2b 	beq.w	84b54 <__sfvwrite_r+0x64>
   84cfe:	f1b9 0f00 	cmp.w	r9, #0
   84d02:	d1d5      	bne.n	84cb0 <__sfvwrite_r+0x1c0>
   84d04:	2300      	movs	r3, #0
   84d06:	f8d5 a000 	ldr.w	sl, [r5]
   84d0a:	f8d5 9004 	ldr.w	r9, [r5, #4]
   84d0e:	9301      	str	r3, [sp, #4]
   84d10:	3508      	adds	r5, #8
   84d12:	e7ca      	b.n	84caa <__sfvwrite_r+0x1ba>
   84d14:	4640      	mov	r0, r8
   84d16:	e784      	b.n	84c22 <__sfvwrite_r+0x132>
   84d18:	46b8      	mov	r8, r7
   84d1a:	46ba      	mov	sl, r7
   84d1c:	6820      	ldr	r0, [r4, #0]
   84d1e:	e774      	b.n	84c0a <__sfvwrite_r+0x11a>
   84d20:	465a      	mov	r2, fp
   84d22:	4651      	mov	r1, sl
   84d24:	f000 fc08 	bl	85538 <memmove>
   84d28:	68a2      	ldr	r2, [r4, #8]
   84d2a:	6823      	ldr	r3, [r4, #0]
   84d2c:	ebcb 0202 	rsb	r2, fp, r2
   84d30:	445b      	add	r3, fp
   84d32:	ebb8 0807 	subs.w	r8, r8, r7
   84d36:	60a2      	str	r2, [r4, #8]
   84d38:	6023      	str	r3, [r4, #0]
   84d3a:	d1d7      	bne.n	84cec <__sfvwrite_r+0x1fc>
   84d3c:	4621      	mov	r1, r4
   84d3e:	9802      	ldr	r0, [sp, #8]
   84d40:	f7ff fc92 	bl	84668 <_fflush_r>
   84d44:	2800      	cmp	r0, #0
   84d46:	d1a2      	bne.n	84c8e <__sfvwrite_r+0x19e>
   84d48:	f8cd 8004 	str.w	r8, [sp, #4]
   84d4c:	e7ce      	b.n	84cec <__sfvwrite_r+0x1fc>
   84d4e:	464a      	mov	r2, r9
   84d50:	210a      	movs	r1, #10
   84d52:	4650      	mov	r0, sl
   84d54:	f000 fbaa 	bl	854ac <memchr>
   84d58:	2800      	cmp	r0, #0
   84d5a:	d03d      	beq.n	84dd8 <__sfvwrite_r+0x2e8>
   84d5c:	3001      	adds	r0, #1
   84d5e:	2301      	movs	r3, #1
   84d60:	ebca 0800 	rsb	r8, sl, r0
   84d64:	9301      	str	r3, [sp, #4]
   84d66:	e7a6      	b.n	84cb6 <__sfvwrite_r+0x1c6>
   84d68:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   84d6c:	42bb      	cmp	r3, r7
   84d6e:	bf28      	it	cs
   84d70:	463b      	movcs	r3, r7
   84d72:	fb93 f3f2 	sdiv	r3, r3, r2
   84d76:	69e1      	ldr	r1, [r4, #28]
   84d78:	fb02 f303 	mul.w	r3, r2, r3
   84d7c:	9802      	ldr	r0, [sp, #8]
   84d7e:	464a      	mov	r2, r9
   84d80:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84d82:	47b0      	blx	r6
   84d84:	2800      	cmp	r0, #0
   84d86:	f73f af4c 	bgt.w	84c22 <__sfvwrite_r+0x132>
   84d8a:	e780      	b.n	84c8e <__sfvwrite_r+0x19e>
   84d8c:	461a      	mov	r2, r3
   84d8e:	4651      	mov	r1, sl
   84d90:	9303      	str	r3, [sp, #12]
   84d92:	f000 fbd1 	bl	85538 <memmove>
   84d96:	6822      	ldr	r2, [r4, #0]
   84d98:	9b03      	ldr	r3, [sp, #12]
   84d9a:	4621      	mov	r1, r4
   84d9c:	441a      	add	r2, r3
   84d9e:	6022      	str	r2, [r4, #0]
   84da0:	9802      	ldr	r0, [sp, #8]
   84da2:	f7ff fc61 	bl	84668 <_fflush_r>
   84da6:	9b03      	ldr	r3, [sp, #12]
   84da8:	2800      	cmp	r0, #0
   84daa:	f47f af70 	bne.w	84c8e <__sfvwrite_r+0x19e>
   84dae:	461f      	mov	r7, r3
   84db0:	e799      	b.n	84ce6 <__sfvwrite_r+0x1f6>
   84db2:	9802      	ldr	r0, [sp, #8]
   84db4:	f000 fc28 	bl	85608 <_realloc_r>
   84db8:	4683      	mov	fp, r0
   84dba:	2800      	cmp	r0, #0
   84dbc:	f47f af19 	bne.w	84bf2 <__sfvwrite_r+0x102>
   84dc0:	9d02      	ldr	r5, [sp, #8]
   84dc2:	6921      	ldr	r1, [r4, #16]
   84dc4:	4628      	mov	r0, r5
   84dc6:	f7ff fdab 	bl	84920 <_free_r>
   84dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84dce:	220c      	movs	r2, #12
   84dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84dd4:	602a      	str	r2, [r5, #0]
   84dd6:	e75c      	b.n	84c92 <__sfvwrite_r+0x1a2>
   84dd8:	2301      	movs	r3, #1
   84dda:	f109 0801 	add.w	r8, r9, #1
   84dde:	9301      	str	r3, [sp, #4]
   84de0:	e769      	b.n	84cb6 <__sfvwrite_r+0x1c6>
   84de2:	f04f 30ff 	mov.w	r0, #4294967295
   84de6:	e6b6      	b.n	84b56 <__sfvwrite_r+0x66>
   84de8:	9a02      	ldr	r2, [sp, #8]
   84dea:	230c      	movs	r3, #12
   84dec:	6013      	str	r3, [r2, #0]
   84dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84df2:	e74e      	b.n	84c92 <__sfvwrite_r+0x1a2>
   84df4:	7ffffc00 	.word	0x7ffffc00

00084df8 <_fwalk_reent>:
   84df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84dfc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   84e00:	d01e      	beq.n	84e40 <_fwalk_reent+0x48>
   84e02:	4688      	mov	r8, r1
   84e04:	4607      	mov	r7, r0
   84e06:	f04f 0900 	mov.w	r9, #0
   84e0a:	6875      	ldr	r5, [r6, #4]
   84e0c:	68b4      	ldr	r4, [r6, #8]
   84e0e:	3d01      	subs	r5, #1
   84e10:	d410      	bmi.n	84e34 <_fwalk_reent+0x3c>
   84e12:	89a3      	ldrh	r3, [r4, #12]
   84e14:	3d01      	subs	r5, #1
   84e16:	2b01      	cmp	r3, #1
   84e18:	d908      	bls.n	84e2c <_fwalk_reent+0x34>
   84e1a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84e1e:	3301      	adds	r3, #1
   84e20:	d004      	beq.n	84e2c <_fwalk_reent+0x34>
   84e22:	4621      	mov	r1, r4
   84e24:	4638      	mov	r0, r7
   84e26:	47c0      	blx	r8
   84e28:	ea49 0900 	orr.w	r9, r9, r0
   84e2c:	1c6b      	adds	r3, r5, #1
   84e2e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84e32:	d1ee      	bne.n	84e12 <_fwalk_reent+0x1a>
   84e34:	6836      	ldr	r6, [r6, #0]
   84e36:	2e00      	cmp	r6, #0
   84e38:	d1e7      	bne.n	84e0a <_fwalk_reent+0x12>
   84e3a:	4648      	mov	r0, r9
   84e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84e40:	46b1      	mov	r9, r6
   84e42:	4648      	mov	r0, r9
   84e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084e48 <__locale_charset>:
   84e48:	4800      	ldr	r0, [pc, #0]	; (84e4c <__locale_charset+0x4>)
   84e4a:	4770      	bx	lr
   84e4c:	2007056c 	.word	0x2007056c

00084e50 <__locale_mb_cur_max>:
   84e50:	4b01      	ldr	r3, [pc, #4]	; (84e58 <__locale_mb_cur_max+0x8>)
   84e52:	6818      	ldr	r0, [r3, #0]
   84e54:	4770      	bx	lr
   84e56:	bf00      	nop
   84e58:	2007058c 	.word	0x2007058c

00084e5c <__swhatbuf_r>:
   84e5c:	b570      	push	{r4, r5, r6, lr}
   84e5e:	460e      	mov	r6, r1
   84e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e64:	b090      	sub	sp, #64	; 0x40
   84e66:	2900      	cmp	r1, #0
   84e68:	4614      	mov	r4, r2
   84e6a:	461d      	mov	r5, r3
   84e6c:	db14      	blt.n	84e98 <__swhatbuf_r+0x3c>
   84e6e:	aa01      	add	r2, sp, #4
   84e70:	f000 ff54 	bl	85d1c <_fstat_r>
   84e74:	2800      	cmp	r0, #0
   84e76:	db0f      	blt.n	84e98 <__swhatbuf_r+0x3c>
   84e78:	9a02      	ldr	r2, [sp, #8]
   84e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84e7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   84e82:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84e86:	fab2 f282 	clz	r2, r2
   84e8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84e8e:	0952      	lsrs	r2, r2, #5
   84e90:	602a      	str	r2, [r5, #0]
   84e92:	6023      	str	r3, [r4, #0]
   84e94:	b010      	add	sp, #64	; 0x40
   84e96:	bd70      	pop	{r4, r5, r6, pc}
   84e98:	89b2      	ldrh	r2, [r6, #12]
   84e9a:	2000      	movs	r0, #0
   84e9c:	f002 0280 	and.w	r2, r2, #128	; 0x80
   84ea0:	b292      	uxth	r2, r2
   84ea2:	6028      	str	r0, [r5, #0]
   84ea4:	b11a      	cbz	r2, 84eae <__swhatbuf_r+0x52>
   84ea6:	2340      	movs	r3, #64	; 0x40
   84ea8:	6023      	str	r3, [r4, #0]
   84eaa:	b010      	add	sp, #64	; 0x40
   84eac:	bd70      	pop	{r4, r5, r6, pc}
   84eae:	4610      	mov	r0, r2
   84eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84eb4:	6023      	str	r3, [r4, #0]
   84eb6:	b010      	add	sp, #64	; 0x40
   84eb8:	bd70      	pop	{r4, r5, r6, pc}
   84eba:	bf00      	nop

00084ebc <__smakebuf_r>:
   84ebc:	898a      	ldrh	r2, [r1, #12]
   84ebe:	460b      	mov	r3, r1
   84ec0:	0792      	lsls	r2, r2, #30
   84ec2:	d506      	bpl.n	84ed2 <__smakebuf_r+0x16>
   84ec4:	f101 0243 	add.w	r2, r1, #67	; 0x43
   84ec8:	2101      	movs	r1, #1
   84eca:	601a      	str	r2, [r3, #0]
   84ecc:	611a      	str	r2, [r3, #16]
   84ece:	6159      	str	r1, [r3, #20]
   84ed0:	4770      	bx	lr
   84ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
   84ed4:	b083      	sub	sp, #12
   84ed6:	ab01      	add	r3, sp, #4
   84ed8:	466a      	mov	r2, sp
   84eda:	460c      	mov	r4, r1
   84edc:	4605      	mov	r5, r0
   84ede:	f7ff ffbd 	bl	84e5c <__swhatbuf_r>
   84ee2:	9900      	ldr	r1, [sp, #0]
   84ee4:	4606      	mov	r6, r0
   84ee6:	4628      	mov	r0, r5
   84ee8:	f000 f834 	bl	84f54 <_malloc_r>
   84eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ef0:	b1d0      	cbz	r0, 84f28 <__smakebuf_r+0x6c>
   84ef2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   84ef6:	4f12      	ldr	r7, [pc, #72]	; (84f40 <__smakebuf_r+0x84>)
   84ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84efc:	63ef      	str	r7, [r5, #60]	; 0x3c
   84efe:	81a3      	strh	r3, [r4, #12]
   84f00:	6020      	str	r0, [r4, #0]
   84f02:	6120      	str	r0, [r4, #16]
   84f04:	6161      	str	r1, [r4, #20]
   84f06:	b91a      	cbnz	r2, 84f10 <__smakebuf_r+0x54>
   84f08:	4333      	orrs	r3, r6
   84f0a:	81a3      	strh	r3, [r4, #12]
   84f0c:	b003      	add	sp, #12
   84f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f10:	4628      	mov	r0, r5
   84f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f16:	f000 ff15 	bl	85d44 <_isatty_r>
   84f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84f1e:	2800      	cmp	r0, #0
   84f20:	d0f2      	beq.n	84f08 <__smakebuf_r+0x4c>
   84f22:	f043 0301 	orr.w	r3, r3, #1
   84f26:	e7ef      	b.n	84f08 <__smakebuf_r+0x4c>
   84f28:	059a      	lsls	r2, r3, #22
   84f2a:	d4ef      	bmi.n	84f0c <__smakebuf_r+0x50>
   84f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84f30:	f043 0302 	orr.w	r3, r3, #2
   84f34:	2101      	movs	r1, #1
   84f36:	81a3      	strh	r3, [r4, #12]
   84f38:	6022      	str	r2, [r4, #0]
   84f3a:	6122      	str	r2, [r4, #16]
   84f3c:	6161      	str	r1, [r4, #20]
   84f3e:	e7e5      	b.n	84f0c <__smakebuf_r+0x50>
   84f40:	00084695 	.word	0x00084695

00084f44 <malloc>:
   84f44:	4b02      	ldr	r3, [pc, #8]	; (84f50 <malloc+0xc>)
   84f46:	4601      	mov	r1, r0
   84f48:	6818      	ldr	r0, [r3, #0]
   84f4a:	f000 b803 	b.w	84f54 <_malloc_r>
   84f4e:	bf00      	nop
   84f50:	20070568 	.word	0x20070568

00084f54 <_malloc_r>:
   84f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84f58:	f101 050b 	add.w	r5, r1, #11
   84f5c:	2d16      	cmp	r5, #22
   84f5e:	b083      	sub	sp, #12
   84f60:	4606      	mov	r6, r0
   84f62:	f240 80a0 	bls.w	850a6 <_malloc_r+0x152>
   84f66:	f035 0507 	bics.w	r5, r5, #7
   84f6a:	f100 80c0 	bmi.w	850ee <_malloc_r+0x19a>
   84f6e:	42a9      	cmp	r1, r5
   84f70:	f200 80bd 	bhi.w	850ee <_malloc_r+0x19a>
   84f74:	f000 fb44 	bl	85600 <__malloc_lock>
   84f78:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84f7c:	f0c0 8290 	bcc.w	854a0 <_malloc_r+0x54c>
   84f80:	0a6b      	lsrs	r3, r5, #9
   84f82:	f000 80bb 	beq.w	850fc <_malloc_r+0x1a8>
   84f86:	2b04      	cmp	r3, #4
   84f88:	f200 8177 	bhi.w	8527a <_malloc_r+0x326>
   84f8c:	09a8      	lsrs	r0, r5, #6
   84f8e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   84f92:	ea4f 014e 	mov.w	r1, lr, lsl #1
   84f96:	3038      	adds	r0, #56	; 0x38
   84f98:	4fbe      	ldr	r7, [pc, #760]	; (85294 <_malloc_r+0x340>)
   84f9a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84f9e:	684c      	ldr	r4, [r1, #4]
   84fa0:	3908      	subs	r1, #8
   84fa2:	42a1      	cmp	r1, r4
   84fa4:	d107      	bne.n	84fb6 <_malloc_r+0x62>
   84fa6:	e0ae      	b.n	85106 <_malloc_r+0x1b2>
   84fa8:	2a00      	cmp	r2, #0
   84faa:	f280 80ae 	bge.w	8510a <_malloc_r+0x1b6>
   84fae:	68e4      	ldr	r4, [r4, #12]
   84fb0:	42a1      	cmp	r1, r4
   84fb2:	f000 80a8 	beq.w	85106 <_malloc_r+0x1b2>
   84fb6:	6863      	ldr	r3, [r4, #4]
   84fb8:	f023 0303 	bic.w	r3, r3, #3
   84fbc:	1b5a      	subs	r2, r3, r5
   84fbe:	2a0f      	cmp	r2, #15
   84fc0:	ddf2      	ble.n	84fa8 <_malloc_r+0x54>
   84fc2:	49b4      	ldr	r1, [pc, #720]	; (85294 <_malloc_r+0x340>)
   84fc4:	693c      	ldr	r4, [r7, #16]
   84fc6:	f101 0e08 	add.w	lr, r1, #8
   84fca:	4574      	cmp	r4, lr
   84fcc:	f000 81a8 	beq.w	85320 <_malloc_r+0x3cc>
   84fd0:	6863      	ldr	r3, [r4, #4]
   84fd2:	f023 0303 	bic.w	r3, r3, #3
   84fd6:	1b5a      	subs	r2, r3, r5
   84fd8:	2a0f      	cmp	r2, #15
   84fda:	f300 818e 	bgt.w	852fa <_malloc_r+0x3a6>
   84fde:	2a00      	cmp	r2, #0
   84fe0:	f8c1 e014 	str.w	lr, [r1, #20]
   84fe4:	f8c1 e010 	str.w	lr, [r1, #16]
   84fe8:	f280 8093 	bge.w	85112 <_malloc_r+0x1be>
   84fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84ff0:	f080 815c 	bcs.w	852ac <_malloc_r+0x358>
   84ff4:	08db      	lsrs	r3, r3, #3
   84ff6:	684a      	ldr	r2, [r1, #4]
   84ff8:	ea4f 09a3 	mov.w	r9, r3, asr #2
   84ffc:	f04f 0c01 	mov.w	ip, #1
   85000:	3301      	adds	r3, #1
   85002:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   85006:	fa0c f909 	lsl.w	r9, ip, r9
   8500a:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   8500e:	ea49 0202 	orr.w	r2, r9, r2
   85012:	f1ac 0c08 	sub.w	ip, ip, #8
   85016:	f8c4 c00c 	str.w	ip, [r4, #12]
   8501a:	f8c4 8008 	str.w	r8, [r4, #8]
   8501e:	604a      	str	r2, [r1, #4]
   85020:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85024:	f8c8 400c 	str.w	r4, [r8, #12]
   85028:	1083      	asrs	r3, r0, #2
   8502a:	2401      	movs	r4, #1
   8502c:	409c      	lsls	r4, r3
   8502e:	4294      	cmp	r4, r2
   85030:	d87c      	bhi.n	8512c <_malloc_r+0x1d8>
   85032:	4214      	tst	r4, r2
   85034:	d106      	bne.n	85044 <_malloc_r+0xf0>
   85036:	f020 0003 	bic.w	r0, r0, #3
   8503a:	0064      	lsls	r4, r4, #1
   8503c:	4214      	tst	r4, r2
   8503e:	f100 0004 	add.w	r0, r0, #4
   85042:	d0fa      	beq.n	8503a <_malloc_r+0xe6>
   85044:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85048:	46cc      	mov	ip, r9
   8504a:	4680      	mov	r8, r0
   8504c:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85050:	458c      	cmp	ip, r1
   85052:	d107      	bne.n	85064 <_malloc_r+0x110>
   85054:	e166      	b.n	85324 <_malloc_r+0x3d0>
   85056:	2a00      	cmp	r2, #0
   85058:	f280 8174 	bge.w	85344 <_malloc_r+0x3f0>
   8505c:	68c9      	ldr	r1, [r1, #12]
   8505e:	458c      	cmp	ip, r1
   85060:	f000 8160 	beq.w	85324 <_malloc_r+0x3d0>
   85064:	684b      	ldr	r3, [r1, #4]
   85066:	f023 0303 	bic.w	r3, r3, #3
   8506a:	1b5a      	subs	r2, r3, r5
   8506c:	2a0f      	cmp	r2, #15
   8506e:	ddf2      	ble.n	85056 <_malloc_r+0x102>
   85070:	460c      	mov	r4, r1
   85072:	68cb      	ldr	r3, [r1, #12]
   85074:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85078:	f045 0801 	orr.w	r8, r5, #1
   8507c:	f8c1 8004 	str.w	r8, [r1, #4]
   85080:	440d      	add	r5, r1
   85082:	f042 0101 	orr.w	r1, r2, #1
   85086:	f8cc 300c 	str.w	r3, [ip, #12]
   8508a:	4630      	mov	r0, r6
   8508c:	f8c3 c008 	str.w	ip, [r3, #8]
   85090:	617d      	str	r5, [r7, #20]
   85092:	613d      	str	r5, [r7, #16]
   85094:	f8c5 e00c 	str.w	lr, [r5, #12]
   85098:	f8c5 e008 	str.w	lr, [r5, #8]
   8509c:	6069      	str	r1, [r5, #4]
   8509e:	50aa      	str	r2, [r5, r2]
   850a0:	f000 fab0 	bl	85604 <__malloc_unlock>
   850a4:	e01f      	b.n	850e6 <_malloc_r+0x192>
   850a6:	2910      	cmp	r1, #16
   850a8:	d821      	bhi.n	850ee <_malloc_r+0x19a>
   850aa:	f000 faa9 	bl	85600 <__malloc_lock>
   850ae:	2510      	movs	r5, #16
   850b0:	2306      	movs	r3, #6
   850b2:	2002      	movs	r0, #2
   850b4:	4f77      	ldr	r7, [pc, #476]	; (85294 <_malloc_r+0x340>)
   850b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   850ba:	685c      	ldr	r4, [r3, #4]
   850bc:	f1a3 0208 	sub.w	r2, r3, #8
   850c0:	4294      	cmp	r4, r2
   850c2:	f000 8138 	beq.w	85336 <_malloc_r+0x3e2>
   850c6:	6863      	ldr	r3, [r4, #4]
   850c8:	68e1      	ldr	r1, [r4, #12]
   850ca:	f023 0303 	bic.w	r3, r3, #3
   850ce:	4423      	add	r3, r4
   850d0:	685a      	ldr	r2, [r3, #4]
   850d2:	68a5      	ldr	r5, [r4, #8]
   850d4:	f042 0201 	orr.w	r2, r2, #1
   850d8:	60e9      	str	r1, [r5, #12]
   850da:	4630      	mov	r0, r6
   850dc:	608d      	str	r5, [r1, #8]
   850de:	605a      	str	r2, [r3, #4]
   850e0:	f000 fa90 	bl	85604 <__malloc_unlock>
   850e4:	3408      	adds	r4, #8
   850e6:	4620      	mov	r0, r4
   850e8:	b003      	add	sp, #12
   850ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850ee:	2400      	movs	r4, #0
   850f0:	4620      	mov	r0, r4
   850f2:	230c      	movs	r3, #12
   850f4:	6033      	str	r3, [r6, #0]
   850f6:	b003      	add	sp, #12
   850f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   850fc:	2180      	movs	r1, #128	; 0x80
   850fe:	f04f 0e40 	mov.w	lr, #64	; 0x40
   85102:	203f      	movs	r0, #63	; 0x3f
   85104:	e748      	b.n	84f98 <_malloc_r+0x44>
   85106:	4670      	mov	r0, lr
   85108:	e75b      	b.n	84fc2 <_malloc_r+0x6e>
   8510a:	4423      	add	r3, r4
   8510c:	685a      	ldr	r2, [r3, #4]
   8510e:	68e1      	ldr	r1, [r4, #12]
   85110:	e7df      	b.n	850d2 <_malloc_r+0x17e>
   85112:	4423      	add	r3, r4
   85114:	685a      	ldr	r2, [r3, #4]
   85116:	4630      	mov	r0, r6
   85118:	f042 0201 	orr.w	r2, r2, #1
   8511c:	605a      	str	r2, [r3, #4]
   8511e:	3408      	adds	r4, #8
   85120:	f000 fa70 	bl	85604 <__malloc_unlock>
   85124:	4620      	mov	r0, r4
   85126:	b003      	add	sp, #12
   85128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8512c:	68bc      	ldr	r4, [r7, #8]
   8512e:	6863      	ldr	r3, [r4, #4]
   85130:	f023 0803 	bic.w	r8, r3, #3
   85134:	45a8      	cmp	r8, r5
   85136:	d304      	bcc.n	85142 <_malloc_r+0x1ee>
   85138:	ebc5 0308 	rsb	r3, r5, r8
   8513c:	2b0f      	cmp	r3, #15
   8513e:	f300 808c 	bgt.w	8525a <_malloc_r+0x306>
   85142:	4b55      	ldr	r3, [pc, #340]	; (85298 <_malloc_r+0x344>)
   85144:	f8df 9160 	ldr.w	r9, [pc, #352]	; 852a8 <_malloc_r+0x354>
   85148:	681a      	ldr	r2, [r3, #0]
   8514a:	f8d9 3000 	ldr.w	r3, [r9]
   8514e:	442a      	add	r2, r5
   85150:	3301      	adds	r3, #1
   85152:	eb04 0a08 	add.w	sl, r4, r8
   85156:	f000 8160 	beq.w	8541a <_malloc_r+0x4c6>
   8515a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8515e:	320f      	adds	r2, #15
   85160:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85164:	f022 020f 	bic.w	r2, r2, #15
   85168:	4611      	mov	r1, r2
   8516a:	4630      	mov	r0, r6
   8516c:	9201      	str	r2, [sp, #4]
   8516e:	f000 fc35 	bl	859dc <_sbrk_r>
   85172:	f1b0 3fff 	cmp.w	r0, #4294967295
   85176:	4683      	mov	fp, r0
   85178:	9a01      	ldr	r2, [sp, #4]
   8517a:	f000 8158 	beq.w	8542e <_malloc_r+0x4da>
   8517e:	4582      	cmp	sl, r0
   85180:	f200 80fc 	bhi.w	8537c <_malloc_r+0x428>
   85184:	4b45      	ldr	r3, [pc, #276]	; (8529c <_malloc_r+0x348>)
   85186:	45da      	cmp	sl, fp
   85188:	6819      	ldr	r1, [r3, #0]
   8518a:	4411      	add	r1, r2
   8518c:	6019      	str	r1, [r3, #0]
   8518e:	f000 8153 	beq.w	85438 <_malloc_r+0x4e4>
   85192:	f8d9 0000 	ldr.w	r0, [r9]
   85196:	f8df e110 	ldr.w	lr, [pc, #272]	; 852a8 <_malloc_r+0x354>
   8519a:	3001      	adds	r0, #1
   8519c:	bf1b      	ittet	ne
   8519e:	ebca 0a0b 	rsbne	sl, sl, fp
   851a2:	4451      	addne	r1, sl
   851a4:	f8ce b000 	streq.w	fp, [lr]
   851a8:	6019      	strne	r1, [r3, #0]
   851aa:	f01b 0107 	ands.w	r1, fp, #7
   851ae:	f000 8117 	beq.w	853e0 <_malloc_r+0x48c>
   851b2:	f1c1 0008 	rsb	r0, r1, #8
   851b6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   851ba:	4483      	add	fp, r0
   851bc:	3108      	adds	r1, #8
   851be:	445a      	add	r2, fp
   851c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
   851c4:	ebc2 0901 	rsb	r9, r2, r1
   851c8:	4649      	mov	r1, r9
   851ca:	4630      	mov	r0, r6
   851cc:	9301      	str	r3, [sp, #4]
   851ce:	f000 fc05 	bl	859dc <_sbrk_r>
   851d2:	1c43      	adds	r3, r0, #1
   851d4:	9b01      	ldr	r3, [sp, #4]
   851d6:	f000 813f 	beq.w	85458 <_malloc_r+0x504>
   851da:	ebcb 0200 	rsb	r2, fp, r0
   851de:	444a      	add	r2, r9
   851e0:	f042 0201 	orr.w	r2, r2, #1
   851e4:	6819      	ldr	r1, [r3, #0]
   851e6:	42bc      	cmp	r4, r7
   851e8:	4449      	add	r1, r9
   851ea:	f8c7 b008 	str.w	fp, [r7, #8]
   851ee:	6019      	str	r1, [r3, #0]
   851f0:	f8cb 2004 	str.w	r2, [fp, #4]
   851f4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8529c <_malloc_r+0x348>
   851f8:	d016      	beq.n	85228 <_malloc_r+0x2d4>
   851fa:	f1b8 0f0f 	cmp.w	r8, #15
   851fe:	f240 80fd 	bls.w	853fc <_malloc_r+0x4a8>
   85202:	6862      	ldr	r2, [r4, #4]
   85204:	f1a8 030c 	sub.w	r3, r8, #12
   85208:	f023 0307 	bic.w	r3, r3, #7
   8520c:	f002 0201 	and.w	r2, r2, #1
   85210:	18e0      	adds	r0, r4, r3
   85212:	f04f 0e05 	mov.w	lr, #5
   85216:	431a      	orrs	r2, r3
   85218:	2b0f      	cmp	r3, #15
   8521a:	6062      	str	r2, [r4, #4]
   8521c:	f8c0 e004 	str.w	lr, [r0, #4]
   85220:	f8c0 e008 	str.w	lr, [r0, #8]
   85224:	f200 811c 	bhi.w	85460 <_malloc_r+0x50c>
   85228:	4b1d      	ldr	r3, [pc, #116]	; (852a0 <_malloc_r+0x34c>)
   8522a:	68bc      	ldr	r4, [r7, #8]
   8522c:	681a      	ldr	r2, [r3, #0]
   8522e:	4291      	cmp	r1, r2
   85230:	bf88      	it	hi
   85232:	6019      	strhi	r1, [r3, #0]
   85234:	4b1b      	ldr	r3, [pc, #108]	; (852a4 <_malloc_r+0x350>)
   85236:	681a      	ldr	r2, [r3, #0]
   85238:	4291      	cmp	r1, r2
   8523a:	6862      	ldr	r2, [r4, #4]
   8523c:	bf88      	it	hi
   8523e:	6019      	strhi	r1, [r3, #0]
   85240:	f022 0203 	bic.w	r2, r2, #3
   85244:	4295      	cmp	r5, r2
   85246:	eba2 0305 	sub.w	r3, r2, r5
   8524a:	d801      	bhi.n	85250 <_malloc_r+0x2fc>
   8524c:	2b0f      	cmp	r3, #15
   8524e:	dc04      	bgt.n	8525a <_malloc_r+0x306>
   85250:	4630      	mov	r0, r6
   85252:	f000 f9d7 	bl	85604 <__malloc_unlock>
   85256:	2400      	movs	r4, #0
   85258:	e745      	b.n	850e6 <_malloc_r+0x192>
   8525a:	f045 0201 	orr.w	r2, r5, #1
   8525e:	f043 0301 	orr.w	r3, r3, #1
   85262:	4425      	add	r5, r4
   85264:	6062      	str	r2, [r4, #4]
   85266:	4630      	mov	r0, r6
   85268:	60bd      	str	r5, [r7, #8]
   8526a:	3408      	adds	r4, #8
   8526c:	606b      	str	r3, [r5, #4]
   8526e:	f000 f9c9 	bl	85604 <__malloc_unlock>
   85272:	4620      	mov	r0, r4
   85274:	b003      	add	sp, #12
   85276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8527a:	2b14      	cmp	r3, #20
   8527c:	d971      	bls.n	85362 <_malloc_r+0x40e>
   8527e:	2b54      	cmp	r3, #84	; 0x54
   85280:	f200 80a4 	bhi.w	853cc <_malloc_r+0x478>
   85284:	0b28      	lsrs	r0, r5, #12
   85286:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   8528a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8528e:	306e      	adds	r0, #110	; 0x6e
   85290:	e682      	b.n	84f98 <_malloc_r+0x44>
   85292:	bf00      	nop
   85294:	20070590 	.word	0x20070590
   85298:	20078c30 	.word	0x20078c30
   8529c:	20078c34 	.word	0x20078c34
   852a0:	20078c2c 	.word	0x20078c2c
   852a4:	20078c28 	.word	0x20078c28
   852a8:	2007099c 	.word	0x2007099c
   852ac:	0a5a      	lsrs	r2, r3, #9
   852ae:	2a04      	cmp	r2, #4
   852b0:	d95e      	bls.n	85370 <_malloc_r+0x41c>
   852b2:	2a14      	cmp	r2, #20
   852b4:	f200 80b3 	bhi.w	8541e <_malloc_r+0x4ca>
   852b8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   852bc:	0049      	lsls	r1, r1, #1
   852be:	325b      	adds	r2, #91	; 0x5b
   852c0:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   852c4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   852c8:	f1ac 0c08 	sub.w	ip, ip, #8
   852cc:	458c      	cmp	ip, r1
   852ce:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 854a8 <_malloc_r+0x554>
   852d2:	f000 8088 	beq.w	853e6 <_malloc_r+0x492>
   852d6:	684a      	ldr	r2, [r1, #4]
   852d8:	f022 0203 	bic.w	r2, r2, #3
   852dc:	4293      	cmp	r3, r2
   852de:	d202      	bcs.n	852e6 <_malloc_r+0x392>
   852e0:	6889      	ldr	r1, [r1, #8]
   852e2:	458c      	cmp	ip, r1
   852e4:	d1f7      	bne.n	852d6 <_malloc_r+0x382>
   852e6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   852ea:	687a      	ldr	r2, [r7, #4]
   852ec:	f8c4 c00c 	str.w	ip, [r4, #12]
   852f0:	60a1      	str	r1, [r4, #8]
   852f2:	f8cc 4008 	str.w	r4, [ip, #8]
   852f6:	60cc      	str	r4, [r1, #12]
   852f8:	e696      	b.n	85028 <_malloc_r+0xd4>
   852fa:	f045 0701 	orr.w	r7, r5, #1
   852fe:	f042 0301 	orr.w	r3, r2, #1
   85302:	4425      	add	r5, r4
   85304:	6067      	str	r7, [r4, #4]
   85306:	4630      	mov	r0, r6
   85308:	614d      	str	r5, [r1, #20]
   8530a:	610d      	str	r5, [r1, #16]
   8530c:	f8c5 e00c 	str.w	lr, [r5, #12]
   85310:	f8c5 e008 	str.w	lr, [r5, #8]
   85314:	606b      	str	r3, [r5, #4]
   85316:	50aa      	str	r2, [r5, r2]
   85318:	3408      	adds	r4, #8
   8531a:	f000 f973 	bl	85604 <__malloc_unlock>
   8531e:	e6e2      	b.n	850e6 <_malloc_r+0x192>
   85320:	684a      	ldr	r2, [r1, #4]
   85322:	e681      	b.n	85028 <_malloc_r+0xd4>
   85324:	f108 0801 	add.w	r8, r8, #1
   85328:	f018 0f03 	tst.w	r8, #3
   8532c:	f10c 0c08 	add.w	ip, ip, #8
   85330:	f47f ae8c 	bne.w	8504c <_malloc_r+0xf8>
   85334:	e030      	b.n	85398 <_malloc_r+0x444>
   85336:	68dc      	ldr	r4, [r3, #12]
   85338:	42a3      	cmp	r3, r4
   8533a:	bf08      	it	eq
   8533c:	3002      	addeq	r0, #2
   8533e:	f43f ae40 	beq.w	84fc2 <_malloc_r+0x6e>
   85342:	e6c0      	b.n	850c6 <_malloc_r+0x172>
   85344:	460c      	mov	r4, r1
   85346:	440b      	add	r3, r1
   85348:	685a      	ldr	r2, [r3, #4]
   8534a:	68c9      	ldr	r1, [r1, #12]
   8534c:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85350:	f042 0201 	orr.w	r2, r2, #1
   85354:	605a      	str	r2, [r3, #4]
   85356:	4630      	mov	r0, r6
   85358:	60e9      	str	r1, [r5, #12]
   8535a:	608d      	str	r5, [r1, #8]
   8535c:	f000 f952 	bl	85604 <__malloc_unlock>
   85360:	e6c1      	b.n	850e6 <_malloc_r+0x192>
   85362:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85366:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   8536a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8536e:	e613      	b.n	84f98 <_malloc_r+0x44>
   85370:	099a      	lsrs	r2, r3, #6
   85372:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85376:	0049      	lsls	r1, r1, #1
   85378:	3238      	adds	r2, #56	; 0x38
   8537a:	e7a1      	b.n	852c0 <_malloc_r+0x36c>
   8537c:	42bc      	cmp	r4, r7
   8537e:	4b4a      	ldr	r3, [pc, #296]	; (854a8 <_malloc_r+0x554>)
   85380:	f43f af00 	beq.w	85184 <_malloc_r+0x230>
   85384:	689c      	ldr	r4, [r3, #8]
   85386:	6862      	ldr	r2, [r4, #4]
   85388:	f022 0203 	bic.w	r2, r2, #3
   8538c:	e75a      	b.n	85244 <_malloc_r+0x2f0>
   8538e:	f859 3908 	ldr.w	r3, [r9], #-8
   85392:	4599      	cmp	r9, r3
   85394:	f040 8082 	bne.w	8549c <_malloc_r+0x548>
   85398:	f010 0f03 	tst.w	r0, #3
   8539c:	f100 30ff 	add.w	r0, r0, #4294967295
   853a0:	d1f5      	bne.n	8538e <_malloc_r+0x43a>
   853a2:	687b      	ldr	r3, [r7, #4]
   853a4:	ea23 0304 	bic.w	r3, r3, r4
   853a8:	607b      	str	r3, [r7, #4]
   853aa:	0064      	lsls	r4, r4, #1
   853ac:	429c      	cmp	r4, r3
   853ae:	f63f aebd 	bhi.w	8512c <_malloc_r+0x1d8>
   853b2:	2c00      	cmp	r4, #0
   853b4:	f43f aeba 	beq.w	8512c <_malloc_r+0x1d8>
   853b8:	421c      	tst	r4, r3
   853ba:	4640      	mov	r0, r8
   853bc:	f47f ae42 	bne.w	85044 <_malloc_r+0xf0>
   853c0:	0064      	lsls	r4, r4, #1
   853c2:	421c      	tst	r4, r3
   853c4:	f100 0004 	add.w	r0, r0, #4
   853c8:	d0fa      	beq.n	853c0 <_malloc_r+0x46c>
   853ca:	e63b      	b.n	85044 <_malloc_r+0xf0>
   853cc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   853d0:	d818      	bhi.n	85404 <_malloc_r+0x4b0>
   853d2:	0be8      	lsrs	r0, r5, #15
   853d4:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   853d8:	ea4f 014e 	mov.w	r1, lr, lsl #1
   853dc:	3077      	adds	r0, #119	; 0x77
   853de:	e5db      	b.n	84f98 <_malloc_r+0x44>
   853e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   853e4:	e6eb      	b.n	851be <_malloc_r+0x26a>
   853e6:	2101      	movs	r1, #1
   853e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   853ec:	1092      	asrs	r2, r2, #2
   853ee:	fa01 f202 	lsl.w	r2, r1, r2
   853f2:	431a      	orrs	r2, r3
   853f4:	f8c8 2004 	str.w	r2, [r8, #4]
   853f8:	4661      	mov	r1, ip
   853fa:	e777      	b.n	852ec <_malloc_r+0x398>
   853fc:	2301      	movs	r3, #1
   853fe:	f8cb 3004 	str.w	r3, [fp, #4]
   85402:	e725      	b.n	85250 <_malloc_r+0x2fc>
   85404:	f240 5254 	movw	r2, #1364	; 0x554
   85408:	4293      	cmp	r3, r2
   8540a:	d820      	bhi.n	8544e <_malloc_r+0x4fa>
   8540c:	0ca8      	lsrs	r0, r5, #18
   8540e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85412:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85416:	307c      	adds	r0, #124	; 0x7c
   85418:	e5be      	b.n	84f98 <_malloc_r+0x44>
   8541a:	3210      	adds	r2, #16
   8541c:	e6a4      	b.n	85168 <_malloc_r+0x214>
   8541e:	2a54      	cmp	r2, #84	; 0x54
   85420:	d826      	bhi.n	85470 <_malloc_r+0x51c>
   85422:	0b1a      	lsrs	r2, r3, #12
   85424:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85428:	0049      	lsls	r1, r1, #1
   8542a:	326e      	adds	r2, #110	; 0x6e
   8542c:	e748      	b.n	852c0 <_malloc_r+0x36c>
   8542e:	68bc      	ldr	r4, [r7, #8]
   85430:	6862      	ldr	r2, [r4, #4]
   85432:	f022 0203 	bic.w	r2, r2, #3
   85436:	e705      	b.n	85244 <_malloc_r+0x2f0>
   85438:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8543c:	2800      	cmp	r0, #0
   8543e:	f47f aea8 	bne.w	85192 <_malloc_r+0x23e>
   85442:	4442      	add	r2, r8
   85444:	68bb      	ldr	r3, [r7, #8]
   85446:	f042 0201 	orr.w	r2, r2, #1
   8544a:	605a      	str	r2, [r3, #4]
   8544c:	e6ec      	b.n	85228 <_malloc_r+0x2d4>
   8544e:	21fe      	movs	r1, #254	; 0xfe
   85450:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85454:	207e      	movs	r0, #126	; 0x7e
   85456:	e59f      	b.n	84f98 <_malloc_r+0x44>
   85458:	2201      	movs	r2, #1
   8545a:	f04f 0900 	mov.w	r9, #0
   8545e:	e6c1      	b.n	851e4 <_malloc_r+0x290>
   85460:	f104 0108 	add.w	r1, r4, #8
   85464:	4630      	mov	r0, r6
   85466:	f7ff fa5b 	bl	84920 <_free_r>
   8546a:	f8d9 1000 	ldr.w	r1, [r9]
   8546e:	e6db      	b.n	85228 <_malloc_r+0x2d4>
   85470:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85474:	d805      	bhi.n	85482 <_malloc_r+0x52e>
   85476:	0bda      	lsrs	r2, r3, #15
   85478:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8547c:	0049      	lsls	r1, r1, #1
   8547e:	3277      	adds	r2, #119	; 0x77
   85480:	e71e      	b.n	852c0 <_malloc_r+0x36c>
   85482:	f240 5154 	movw	r1, #1364	; 0x554
   85486:	428a      	cmp	r2, r1
   85488:	d805      	bhi.n	85496 <_malloc_r+0x542>
   8548a:	0c9a      	lsrs	r2, r3, #18
   8548c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85490:	0049      	lsls	r1, r1, #1
   85492:	327c      	adds	r2, #124	; 0x7c
   85494:	e714      	b.n	852c0 <_malloc_r+0x36c>
   85496:	21fe      	movs	r1, #254	; 0xfe
   85498:	227e      	movs	r2, #126	; 0x7e
   8549a:	e711      	b.n	852c0 <_malloc_r+0x36c>
   8549c:	687b      	ldr	r3, [r7, #4]
   8549e:	e784      	b.n	853aa <_malloc_r+0x456>
   854a0:	08e8      	lsrs	r0, r5, #3
   854a2:	1c43      	adds	r3, r0, #1
   854a4:	005b      	lsls	r3, r3, #1
   854a6:	e605      	b.n	850b4 <_malloc_r+0x160>
   854a8:	20070590 	.word	0x20070590

000854ac <memchr>:
   854ac:	0783      	lsls	r3, r0, #30
   854ae:	b470      	push	{r4, r5, r6}
   854b0:	b2cd      	uxtb	r5, r1
   854b2:	d03d      	beq.n	85530 <memchr+0x84>
   854b4:	1e53      	subs	r3, r2, #1
   854b6:	b302      	cbz	r2, 854fa <memchr+0x4e>
   854b8:	7802      	ldrb	r2, [r0, #0]
   854ba:	42aa      	cmp	r2, r5
   854bc:	d01e      	beq.n	854fc <memchr+0x50>
   854be:	1c42      	adds	r2, r0, #1
   854c0:	e004      	b.n	854cc <memchr+0x20>
   854c2:	b1d3      	cbz	r3, 854fa <memchr+0x4e>
   854c4:	7804      	ldrb	r4, [r0, #0]
   854c6:	3b01      	subs	r3, #1
   854c8:	42ac      	cmp	r4, r5
   854ca:	d017      	beq.n	854fc <memchr+0x50>
   854cc:	f012 0f03 	tst.w	r2, #3
   854d0:	4610      	mov	r0, r2
   854d2:	f102 0201 	add.w	r2, r2, #1
   854d6:	d1f4      	bne.n	854c2 <memchr+0x16>
   854d8:	2b03      	cmp	r3, #3
   854da:	d811      	bhi.n	85500 <memchr+0x54>
   854dc:	b353      	cbz	r3, 85534 <memchr+0x88>
   854de:	7802      	ldrb	r2, [r0, #0]
   854e0:	42aa      	cmp	r2, r5
   854e2:	d00b      	beq.n	854fc <memchr+0x50>
   854e4:	4403      	add	r3, r0
   854e6:	1c42      	adds	r2, r0, #1
   854e8:	e002      	b.n	854f0 <memchr+0x44>
   854ea:	7801      	ldrb	r1, [r0, #0]
   854ec:	42a9      	cmp	r1, r5
   854ee:	d005      	beq.n	854fc <memchr+0x50>
   854f0:	4293      	cmp	r3, r2
   854f2:	4610      	mov	r0, r2
   854f4:	f102 0201 	add.w	r2, r2, #1
   854f8:	d1f7      	bne.n	854ea <memchr+0x3e>
   854fa:	2000      	movs	r0, #0
   854fc:	bc70      	pop	{r4, r5, r6}
   854fe:	4770      	bx	lr
   85500:	4604      	mov	r4, r0
   85502:	020e      	lsls	r6, r1, #8
   85504:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85508:	432e      	orrs	r6, r5
   8550a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8550e:	6822      	ldr	r2, [r4, #0]
   85510:	4620      	mov	r0, r4
   85512:	4072      	eors	r2, r6
   85514:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85518:	ea21 0202 	bic.w	r2, r1, r2
   8551c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85520:	f104 0404 	add.w	r4, r4, #4
   85524:	d1db      	bne.n	854de <memchr+0x32>
   85526:	3b04      	subs	r3, #4
   85528:	2b03      	cmp	r3, #3
   8552a:	4620      	mov	r0, r4
   8552c:	d8ef      	bhi.n	8550e <memchr+0x62>
   8552e:	e7d5      	b.n	854dc <memchr+0x30>
   85530:	4613      	mov	r3, r2
   85532:	e7d1      	b.n	854d8 <memchr+0x2c>
   85534:	4618      	mov	r0, r3
   85536:	e7e1      	b.n	854fc <memchr+0x50>

00085538 <memmove>:
   85538:	4288      	cmp	r0, r1
   8553a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8553c:	d90d      	bls.n	8555a <memmove+0x22>
   8553e:	188b      	adds	r3, r1, r2
   85540:	4298      	cmp	r0, r3
   85542:	d20a      	bcs.n	8555a <memmove+0x22>
   85544:	1881      	adds	r1, r0, r2
   85546:	2a00      	cmp	r2, #0
   85548:	d051      	beq.n	855ee <memmove+0xb6>
   8554a:	1a9a      	subs	r2, r3, r2
   8554c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85550:	4293      	cmp	r3, r2
   85552:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85556:	d1f9      	bne.n	8554c <memmove+0x14>
   85558:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8555a:	2a0f      	cmp	r2, #15
   8555c:	d948      	bls.n	855f0 <memmove+0xb8>
   8555e:	ea41 0300 	orr.w	r3, r1, r0
   85562:	079b      	lsls	r3, r3, #30
   85564:	d146      	bne.n	855f4 <memmove+0xbc>
   85566:	4615      	mov	r5, r2
   85568:	f100 0410 	add.w	r4, r0, #16
   8556c:	f101 0310 	add.w	r3, r1, #16
   85570:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85574:	3d10      	subs	r5, #16
   85576:	f844 6c10 	str.w	r6, [r4, #-16]
   8557a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8557e:	2d0f      	cmp	r5, #15
   85580:	f844 6c0c 	str.w	r6, [r4, #-12]
   85584:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85588:	f104 0410 	add.w	r4, r4, #16
   8558c:	f844 6c18 	str.w	r6, [r4, #-24]
   85590:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85594:	f103 0310 	add.w	r3, r3, #16
   85598:	f844 6c14 	str.w	r6, [r4, #-20]
   8559c:	d8e8      	bhi.n	85570 <memmove+0x38>
   8559e:	f1a2 0310 	sub.w	r3, r2, #16
   855a2:	f023 030f 	bic.w	r3, r3, #15
   855a6:	f002 0e0f 	and.w	lr, r2, #15
   855aa:	3310      	adds	r3, #16
   855ac:	f1be 0f03 	cmp.w	lr, #3
   855b0:	4419      	add	r1, r3
   855b2:	4403      	add	r3, r0
   855b4:	d921      	bls.n	855fa <memmove+0xc2>
   855b6:	460e      	mov	r6, r1
   855b8:	4674      	mov	r4, lr
   855ba:	1f1d      	subs	r5, r3, #4
   855bc:	f856 7b04 	ldr.w	r7, [r6], #4
   855c0:	3c04      	subs	r4, #4
   855c2:	2c03      	cmp	r4, #3
   855c4:	f845 7f04 	str.w	r7, [r5, #4]!
   855c8:	d8f8      	bhi.n	855bc <memmove+0x84>
   855ca:	f1ae 0404 	sub.w	r4, lr, #4
   855ce:	f024 0403 	bic.w	r4, r4, #3
   855d2:	3404      	adds	r4, #4
   855d4:	4423      	add	r3, r4
   855d6:	4421      	add	r1, r4
   855d8:	f002 0203 	and.w	r2, r2, #3
   855dc:	b162      	cbz	r2, 855f8 <memmove+0xc0>
   855de:	3b01      	subs	r3, #1
   855e0:	440a      	add	r2, r1
   855e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   855e6:	428a      	cmp	r2, r1
   855e8:	f803 4f01 	strb.w	r4, [r3, #1]!
   855ec:	d1f9      	bne.n	855e2 <memmove+0xaa>
   855ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855f0:	4603      	mov	r3, r0
   855f2:	e7f3      	b.n	855dc <memmove+0xa4>
   855f4:	4603      	mov	r3, r0
   855f6:	e7f2      	b.n	855de <memmove+0xa6>
   855f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   855fa:	4672      	mov	r2, lr
   855fc:	e7ee      	b.n	855dc <memmove+0xa4>
   855fe:	bf00      	nop

00085600 <__malloc_lock>:
   85600:	4770      	bx	lr
   85602:	bf00      	nop

00085604 <__malloc_unlock>:
   85604:	4770      	bx	lr
   85606:	bf00      	nop

00085608 <_realloc_r>:
   85608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8560c:	4617      	mov	r7, r2
   8560e:	b083      	sub	sp, #12
   85610:	2900      	cmp	r1, #0
   85612:	f000 808f 	beq.w	85734 <_realloc_r+0x12c>
   85616:	460d      	mov	r5, r1
   85618:	4681      	mov	r9, r0
   8561a:	f107 040b 	add.w	r4, r7, #11
   8561e:	f7ff ffef 	bl	85600 <__malloc_lock>
   85622:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85626:	2c16      	cmp	r4, #22
   85628:	f02e 0603 	bic.w	r6, lr, #3
   8562c:	f1a5 0808 	sub.w	r8, r5, #8
   85630:	d83c      	bhi.n	856ac <_realloc_r+0xa4>
   85632:	2210      	movs	r2, #16
   85634:	4614      	mov	r4, r2
   85636:	42a7      	cmp	r7, r4
   85638:	d83d      	bhi.n	856b6 <_realloc_r+0xae>
   8563a:	4296      	cmp	r6, r2
   8563c:	da42      	bge.n	856c4 <_realloc_r+0xbc>
   8563e:	4bc6      	ldr	r3, [pc, #792]	; (85958 <_realloc_r+0x350>)
   85640:	eb08 0006 	add.w	r0, r8, r6
   85644:	6899      	ldr	r1, [r3, #8]
   85646:	4288      	cmp	r0, r1
   85648:	6841      	ldr	r1, [r0, #4]
   8564a:	f000 80d7 	beq.w	857fc <_realloc_r+0x1f4>
   8564e:	f021 0301 	bic.w	r3, r1, #1
   85652:	4403      	add	r3, r0
   85654:	685b      	ldr	r3, [r3, #4]
   85656:	07db      	lsls	r3, r3, #31
   85658:	d54c      	bpl.n	856f4 <_realloc_r+0xec>
   8565a:	f01e 0f01 	tst.w	lr, #1
   8565e:	f000 809d 	beq.w	8579c <_realloc_r+0x194>
   85662:	4639      	mov	r1, r7
   85664:	4648      	mov	r0, r9
   85666:	f7ff fc75 	bl	84f54 <_malloc_r>
   8566a:	4607      	mov	r7, r0
   8566c:	2800      	cmp	r0, #0
   8566e:	d03a      	beq.n	856e6 <_realloc_r+0xde>
   85670:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85674:	f1a0 0208 	sub.w	r2, r0, #8
   85678:	f023 0301 	bic.w	r3, r3, #1
   8567c:	4443      	add	r3, r8
   8567e:	429a      	cmp	r2, r3
   85680:	f000 813e 	beq.w	85900 <_realloc_r+0x2f8>
   85684:	1f32      	subs	r2, r6, #4
   85686:	2a24      	cmp	r2, #36	; 0x24
   85688:	f200 812b 	bhi.w	858e2 <_realloc_r+0x2da>
   8568c:	2a13      	cmp	r2, #19
   8568e:	f200 80ff 	bhi.w	85890 <_realloc_r+0x288>
   85692:	4603      	mov	r3, r0
   85694:	462a      	mov	r2, r5
   85696:	6811      	ldr	r1, [r2, #0]
   85698:	6019      	str	r1, [r3, #0]
   8569a:	6851      	ldr	r1, [r2, #4]
   8569c:	6059      	str	r1, [r3, #4]
   8569e:	6892      	ldr	r2, [r2, #8]
   856a0:	609a      	str	r2, [r3, #8]
   856a2:	4629      	mov	r1, r5
   856a4:	4648      	mov	r0, r9
   856a6:	f7ff f93b 	bl	84920 <_free_r>
   856aa:	e01c      	b.n	856e6 <_realloc_r+0xde>
   856ac:	f024 0407 	bic.w	r4, r4, #7
   856b0:	2c00      	cmp	r4, #0
   856b2:	4622      	mov	r2, r4
   856b4:	dabf      	bge.n	85636 <_realloc_r+0x2e>
   856b6:	230c      	movs	r3, #12
   856b8:	2000      	movs	r0, #0
   856ba:	f8c9 3000 	str.w	r3, [r9]
   856be:	b003      	add	sp, #12
   856c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856c4:	462f      	mov	r7, r5
   856c6:	1b33      	subs	r3, r6, r4
   856c8:	2b0f      	cmp	r3, #15
   856ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
   856ce:	d81d      	bhi.n	8570c <_realloc_r+0x104>
   856d0:	f002 0201 	and.w	r2, r2, #1
   856d4:	4332      	orrs	r2, r6
   856d6:	eb08 0106 	add.w	r1, r8, r6
   856da:	f8c8 2004 	str.w	r2, [r8, #4]
   856de:	684b      	ldr	r3, [r1, #4]
   856e0:	f043 0301 	orr.w	r3, r3, #1
   856e4:	604b      	str	r3, [r1, #4]
   856e6:	4648      	mov	r0, r9
   856e8:	f7ff ff8c 	bl	85604 <__malloc_unlock>
   856ec:	4638      	mov	r0, r7
   856ee:	b003      	add	sp, #12
   856f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856f4:	f021 0103 	bic.w	r1, r1, #3
   856f8:	4431      	add	r1, r6
   856fa:	4291      	cmp	r1, r2
   856fc:	db20      	blt.n	85740 <_realloc_r+0x138>
   856fe:	68c3      	ldr	r3, [r0, #12]
   85700:	6882      	ldr	r2, [r0, #8]
   85702:	462f      	mov	r7, r5
   85704:	60d3      	str	r3, [r2, #12]
   85706:	460e      	mov	r6, r1
   85708:	609a      	str	r2, [r3, #8]
   8570a:	e7dc      	b.n	856c6 <_realloc_r+0xbe>
   8570c:	f002 0201 	and.w	r2, r2, #1
   85710:	eb08 0104 	add.w	r1, r8, r4
   85714:	4314      	orrs	r4, r2
   85716:	f043 0201 	orr.w	r2, r3, #1
   8571a:	f8c8 4004 	str.w	r4, [r8, #4]
   8571e:	440b      	add	r3, r1
   85720:	604a      	str	r2, [r1, #4]
   85722:	685a      	ldr	r2, [r3, #4]
   85724:	3108      	adds	r1, #8
   85726:	f042 0201 	orr.w	r2, r2, #1
   8572a:	605a      	str	r2, [r3, #4]
   8572c:	4648      	mov	r0, r9
   8572e:	f7ff f8f7 	bl	84920 <_free_r>
   85732:	e7d8      	b.n	856e6 <_realloc_r+0xde>
   85734:	4611      	mov	r1, r2
   85736:	b003      	add	sp, #12
   85738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8573c:	f7ff bc0a 	b.w	84f54 <_malloc_r>
   85740:	f01e 0f01 	tst.w	lr, #1
   85744:	d18d      	bne.n	85662 <_realloc_r+0x5a>
   85746:	f855 3c08 	ldr.w	r3, [r5, #-8]
   8574a:	ebc3 0a08 	rsb	sl, r3, r8
   8574e:	f8da 3004 	ldr.w	r3, [sl, #4]
   85752:	f023 0c03 	bic.w	ip, r3, #3
   85756:	eb01 0e0c 	add.w	lr, r1, ip
   8575a:	4596      	cmp	lr, r2
   8575c:	db26      	blt.n	857ac <_realloc_r+0x1a4>
   8575e:	4657      	mov	r7, sl
   85760:	68c3      	ldr	r3, [r0, #12]
   85762:	6881      	ldr	r1, [r0, #8]
   85764:	1f32      	subs	r2, r6, #4
   85766:	60cb      	str	r3, [r1, #12]
   85768:	6099      	str	r1, [r3, #8]
   8576a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   8576e:	f8da 300c 	ldr.w	r3, [sl, #12]
   85772:	2a24      	cmp	r2, #36	; 0x24
   85774:	60cb      	str	r3, [r1, #12]
   85776:	6099      	str	r1, [r3, #8]
   85778:	f200 80c9 	bhi.w	8590e <_realloc_r+0x306>
   8577c:	2a13      	cmp	r2, #19
   8577e:	f240 8092 	bls.w	858a6 <_realloc_r+0x29e>
   85782:	682b      	ldr	r3, [r5, #0]
   85784:	2a1b      	cmp	r2, #27
   85786:	f8ca 3008 	str.w	r3, [sl, #8]
   8578a:	686b      	ldr	r3, [r5, #4]
   8578c:	f8ca 300c 	str.w	r3, [sl, #12]
   85790:	f200 80cd 	bhi.w	8592e <_realloc_r+0x326>
   85794:	3508      	adds	r5, #8
   85796:	f10a 0310 	add.w	r3, sl, #16
   8579a:	e085      	b.n	858a8 <_realloc_r+0x2a0>
   8579c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   857a0:	ebc3 0a08 	rsb	sl, r3, r8
   857a4:	f8da 3004 	ldr.w	r3, [sl, #4]
   857a8:	f023 0c03 	bic.w	ip, r3, #3
   857ac:	eb06 030c 	add.w	r3, r6, ip
   857b0:	4293      	cmp	r3, r2
   857b2:	f6ff af56 	blt.w	85662 <_realloc_r+0x5a>
   857b6:	4657      	mov	r7, sl
   857b8:	f8da 100c 	ldr.w	r1, [sl, #12]
   857bc:	f857 0f08 	ldr.w	r0, [r7, #8]!
   857c0:	1f32      	subs	r2, r6, #4
   857c2:	2a24      	cmp	r2, #36	; 0x24
   857c4:	60c1      	str	r1, [r0, #12]
   857c6:	6088      	str	r0, [r1, #8]
   857c8:	f200 80aa 	bhi.w	85920 <_realloc_r+0x318>
   857cc:	2a13      	cmp	r2, #19
   857ce:	f240 80a5 	bls.w	8591c <_realloc_r+0x314>
   857d2:	6829      	ldr	r1, [r5, #0]
   857d4:	2a1b      	cmp	r2, #27
   857d6:	f8ca 1008 	str.w	r1, [sl, #8]
   857da:	6869      	ldr	r1, [r5, #4]
   857dc:	f8ca 100c 	str.w	r1, [sl, #12]
   857e0:	f200 80bc 	bhi.w	8595c <_realloc_r+0x354>
   857e4:	3508      	adds	r5, #8
   857e6:	f10a 0210 	add.w	r2, sl, #16
   857ea:	6829      	ldr	r1, [r5, #0]
   857ec:	461e      	mov	r6, r3
   857ee:	6011      	str	r1, [r2, #0]
   857f0:	6869      	ldr	r1, [r5, #4]
   857f2:	46d0      	mov	r8, sl
   857f4:	6051      	str	r1, [r2, #4]
   857f6:	68ab      	ldr	r3, [r5, #8]
   857f8:	6093      	str	r3, [r2, #8]
   857fa:	e764      	b.n	856c6 <_realloc_r+0xbe>
   857fc:	f021 0b03 	bic.w	fp, r1, #3
   85800:	f104 0010 	add.w	r0, r4, #16
   85804:	44b3      	add	fp, r6
   85806:	4583      	cmp	fp, r0
   85808:	da57      	bge.n	858ba <_realloc_r+0x2b2>
   8580a:	f01e 0f01 	tst.w	lr, #1
   8580e:	f47f af28 	bne.w	85662 <_realloc_r+0x5a>
   85812:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85816:	ebc1 0a08 	rsb	sl, r1, r8
   8581a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8581e:	f021 0c03 	bic.w	ip, r1, #3
   85822:	44e3      	add	fp, ip
   85824:	4558      	cmp	r0, fp
   85826:	dcc1      	bgt.n	857ac <_realloc_r+0x1a4>
   85828:	4657      	mov	r7, sl
   8582a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8582e:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85832:	1f32      	subs	r2, r6, #4
   85834:	2a24      	cmp	r2, #36	; 0x24
   85836:	60c1      	str	r1, [r0, #12]
   85838:	6088      	str	r0, [r1, #8]
   8583a:	f200 80b1 	bhi.w	859a0 <_realloc_r+0x398>
   8583e:	2a13      	cmp	r2, #19
   85840:	f240 80a2 	bls.w	85988 <_realloc_r+0x380>
   85844:	6829      	ldr	r1, [r5, #0]
   85846:	2a1b      	cmp	r2, #27
   85848:	f8ca 1008 	str.w	r1, [sl, #8]
   8584c:	6869      	ldr	r1, [r5, #4]
   8584e:	f8ca 100c 	str.w	r1, [sl, #12]
   85852:	f200 80ac 	bhi.w	859ae <_realloc_r+0x3a6>
   85856:	3508      	adds	r5, #8
   85858:	f10a 0210 	add.w	r2, sl, #16
   8585c:	6829      	ldr	r1, [r5, #0]
   8585e:	6011      	str	r1, [r2, #0]
   85860:	6869      	ldr	r1, [r5, #4]
   85862:	6051      	str	r1, [r2, #4]
   85864:	68a9      	ldr	r1, [r5, #8]
   85866:	6091      	str	r1, [r2, #8]
   85868:	ebc4 020b 	rsb	r2, r4, fp
   8586c:	eb0a 0104 	add.w	r1, sl, r4
   85870:	f042 0201 	orr.w	r2, r2, #1
   85874:	6099      	str	r1, [r3, #8]
   85876:	604a      	str	r2, [r1, #4]
   85878:	f8da 3004 	ldr.w	r3, [sl, #4]
   8587c:	4648      	mov	r0, r9
   8587e:	f003 0301 	and.w	r3, r3, #1
   85882:	431c      	orrs	r4, r3
   85884:	f8ca 4004 	str.w	r4, [sl, #4]
   85888:	f7ff febc 	bl	85604 <__malloc_unlock>
   8588c:	4638      	mov	r0, r7
   8588e:	e72e      	b.n	856ee <_realloc_r+0xe6>
   85890:	682b      	ldr	r3, [r5, #0]
   85892:	2a1b      	cmp	r2, #27
   85894:	6003      	str	r3, [r0, #0]
   85896:	686b      	ldr	r3, [r5, #4]
   85898:	6043      	str	r3, [r0, #4]
   8589a:	d826      	bhi.n	858ea <_realloc_r+0x2e2>
   8589c:	f100 0308 	add.w	r3, r0, #8
   858a0:	f105 0208 	add.w	r2, r5, #8
   858a4:	e6f7      	b.n	85696 <_realloc_r+0x8e>
   858a6:	463b      	mov	r3, r7
   858a8:	682a      	ldr	r2, [r5, #0]
   858aa:	4676      	mov	r6, lr
   858ac:	601a      	str	r2, [r3, #0]
   858ae:	686a      	ldr	r2, [r5, #4]
   858b0:	46d0      	mov	r8, sl
   858b2:	605a      	str	r2, [r3, #4]
   858b4:	68aa      	ldr	r2, [r5, #8]
   858b6:	609a      	str	r2, [r3, #8]
   858b8:	e705      	b.n	856c6 <_realloc_r+0xbe>
   858ba:	ebc4 0b0b 	rsb	fp, r4, fp
   858be:	eb08 0104 	add.w	r1, r8, r4
   858c2:	f04b 0201 	orr.w	r2, fp, #1
   858c6:	6099      	str	r1, [r3, #8]
   858c8:	604a      	str	r2, [r1, #4]
   858ca:	f855 3c04 	ldr.w	r3, [r5, #-4]
   858ce:	4648      	mov	r0, r9
   858d0:	f003 0301 	and.w	r3, r3, #1
   858d4:	431c      	orrs	r4, r3
   858d6:	f845 4c04 	str.w	r4, [r5, #-4]
   858da:	f7ff fe93 	bl	85604 <__malloc_unlock>
   858de:	4628      	mov	r0, r5
   858e0:	e705      	b.n	856ee <_realloc_r+0xe6>
   858e2:	4629      	mov	r1, r5
   858e4:	f7ff fe28 	bl	85538 <memmove>
   858e8:	e6db      	b.n	856a2 <_realloc_r+0x9a>
   858ea:	68ab      	ldr	r3, [r5, #8]
   858ec:	2a24      	cmp	r2, #36	; 0x24
   858ee:	6083      	str	r3, [r0, #8]
   858f0:	68eb      	ldr	r3, [r5, #12]
   858f2:	60c3      	str	r3, [r0, #12]
   858f4:	d027      	beq.n	85946 <_realloc_r+0x33e>
   858f6:	f100 0310 	add.w	r3, r0, #16
   858fa:	f105 0210 	add.w	r2, r5, #16
   858fe:	e6ca      	b.n	85696 <_realloc_r+0x8e>
   85900:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85904:	462f      	mov	r7, r5
   85906:	f023 0303 	bic.w	r3, r3, #3
   8590a:	441e      	add	r6, r3
   8590c:	e6db      	b.n	856c6 <_realloc_r+0xbe>
   8590e:	4629      	mov	r1, r5
   85910:	4638      	mov	r0, r7
   85912:	4676      	mov	r6, lr
   85914:	46d0      	mov	r8, sl
   85916:	f7ff fe0f 	bl	85538 <memmove>
   8591a:	e6d4      	b.n	856c6 <_realloc_r+0xbe>
   8591c:	463a      	mov	r2, r7
   8591e:	e764      	b.n	857ea <_realloc_r+0x1e2>
   85920:	4629      	mov	r1, r5
   85922:	4638      	mov	r0, r7
   85924:	461e      	mov	r6, r3
   85926:	46d0      	mov	r8, sl
   85928:	f7ff fe06 	bl	85538 <memmove>
   8592c:	e6cb      	b.n	856c6 <_realloc_r+0xbe>
   8592e:	68ab      	ldr	r3, [r5, #8]
   85930:	2a24      	cmp	r2, #36	; 0x24
   85932:	f8ca 3010 	str.w	r3, [sl, #16]
   85936:	68eb      	ldr	r3, [r5, #12]
   85938:	f8ca 3014 	str.w	r3, [sl, #20]
   8593c:	d01a      	beq.n	85974 <_realloc_r+0x36c>
   8593e:	3510      	adds	r5, #16
   85940:	f10a 0318 	add.w	r3, sl, #24
   85944:	e7b0      	b.n	858a8 <_realloc_r+0x2a0>
   85946:	692a      	ldr	r2, [r5, #16]
   85948:	f100 0318 	add.w	r3, r0, #24
   8594c:	6102      	str	r2, [r0, #16]
   8594e:	6969      	ldr	r1, [r5, #20]
   85950:	f105 0218 	add.w	r2, r5, #24
   85954:	6141      	str	r1, [r0, #20]
   85956:	e69e      	b.n	85696 <_realloc_r+0x8e>
   85958:	20070590 	.word	0x20070590
   8595c:	68a9      	ldr	r1, [r5, #8]
   8595e:	2a24      	cmp	r2, #36	; 0x24
   85960:	f8ca 1010 	str.w	r1, [sl, #16]
   85964:	68e9      	ldr	r1, [r5, #12]
   85966:	f8ca 1014 	str.w	r1, [sl, #20]
   8596a:	d00f      	beq.n	8598c <_realloc_r+0x384>
   8596c:	3510      	adds	r5, #16
   8596e:	f10a 0218 	add.w	r2, sl, #24
   85972:	e73a      	b.n	857ea <_realloc_r+0x1e2>
   85974:	692a      	ldr	r2, [r5, #16]
   85976:	f10a 0320 	add.w	r3, sl, #32
   8597a:	f8ca 2018 	str.w	r2, [sl, #24]
   8597e:	696a      	ldr	r2, [r5, #20]
   85980:	3518      	adds	r5, #24
   85982:	f8ca 201c 	str.w	r2, [sl, #28]
   85986:	e78f      	b.n	858a8 <_realloc_r+0x2a0>
   85988:	463a      	mov	r2, r7
   8598a:	e767      	b.n	8585c <_realloc_r+0x254>
   8598c:	6929      	ldr	r1, [r5, #16]
   8598e:	f10a 0220 	add.w	r2, sl, #32
   85992:	f8ca 1018 	str.w	r1, [sl, #24]
   85996:	6969      	ldr	r1, [r5, #20]
   85998:	3518      	adds	r5, #24
   8599a:	f8ca 101c 	str.w	r1, [sl, #28]
   8599e:	e724      	b.n	857ea <_realloc_r+0x1e2>
   859a0:	4629      	mov	r1, r5
   859a2:	4638      	mov	r0, r7
   859a4:	9301      	str	r3, [sp, #4]
   859a6:	f7ff fdc7 	bl	85538 <memmove>
   859aa:	9b01      	ldr	r3, [sp, #4]
   859ac:	e75c      	b.n	85868 <_realloc_r+0x260>
   859ae:	68a9      	ldr	r1, [r5, #8]
   859b0:	2a24      	cmp	r2, #36	; 0x24
   859b2:	f8ca 1010 	str.w	r1, [sl, #16]
   859b6:	68e9      	ldr	r1, [r5, #12]
   859b8:	f8ca 1014 	str.w	r1, [sl, #20]
   859bc:	d003      	beq.n	859c6 <_realloc_r+0x3be>
   859be:	3510      	adds	r5, #16
   859c0:	f10a 0218 	add.w	r2, sl, #24
   859c4:	e74a      	b.n	8585c <_realloc_r+0x254>
   859c6:	6929      	ldr	r1, [r5, #16]
   859c8:	f10a 0220 	add.w	r2, sl, #32
   859cc:	f8ca 1018 	str.w	r1, [sl, #24]
   859d0:	6969      	ldr	r1, [r5, #20]
   859d2:	3518      	adds	r5, #24
   859d4:	f8ca 101c 	str.w	r1, [sl, #28]
   859d8:	e740      	b.n	8585c <_realloc_r+0x254>
   859da:	bf00      	nop

000859dc <_sbrk_r>:
   859dc:	b538      	push	{r3, r4, r5, lr}
   859de:	4c07      	ldr	r4, [pc, #28]	; (859fc <_sbrk_r+0x20>)
   859e0:	2300      	movs	r3, #0
   859e2:	4605      	mov	r5, r0
   859e4:	4608      	mov	r0, r1
   859e6:	6023      	str	r3, [r4, #0]
   859e8:	f7fb f80c 	bl	80a04 <_sbrk>
   859ec:	1c43      	adds	r3, r0, #1
   859ee:	d000      	beq.n	859f2 <_sbrk_r+0x16>
   859f0:	bd38      	pop	{r3, r4, r5, pc}
   859f2:	6823      	ldr	r3, [r4, #0]
   859f4:	2b00      	cmp	r3, #0
   859f6:	d0fb      	beq.n	859f0 <_sbrk_r+0x14>
   859f8:	602b      	str	r3, [r5, #0]
   859fa:	bd38      	pop	{r3, r4, r5, pc}
   859fc:	20078c90 	.word	0x20078c90

00085a00 <__sread>:
   85a00:	b510      	push	{r4, lr}
   85a02:	460c      	mov	r4, r1
   85a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a08:	f000 f9c4 	bl	85d94 <_read_r>
   85a0c:	2800      	cmp	r0, #0
   85a0e:	db03      	blt.n	85a18 <__sread+0x18>
   85a10:	6d23      	ldr	r3, [r4, #80]	; 0x50
   85a12:	4403      	add	r3, r0
   85a14:	6523      	str	r3, [r4, #80]	; 0x50
   85a16:	bd10      	pop	{r4, pc}
   85a18:	89a3      	ldrh	r3, [r4, #12]
   85a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   85a1e:	81a3      	strh	r3, [r4, #12]
   85a20:	bd10      	pop	{r4, pc}
   85a22:	bf00      	nop

00085a24 <__swrite>:
   85a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85a28:	460c      	mov	r4, r1
   85a2a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   85a2e:	461f      	mov	r7, r3
   85a30:	05cb      	lsls	r3, r1, #23
   85a32:	4616      	mov	r6, r2
   85a34:	4605      	mov	r5, r0
   85a36:	d507      	bpl.n	85a48 <__swrite+0x24>
   85a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a3c:	2302      	movs	r3, #2
   85a3e:	2200      	movs	r2, #0
   85a40:	f000 f992 	bl	85d68 <_lseek_r>
   85a44:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   85a48:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85a4c:	81a1      	strh	r1, [r4, #12]
   85a4e:	463b      	mov	r3, r7
   85a50:	4632      	mov	r2, r6
   85a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85a56:	4628      	mov	r0, r5
   85a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85a5c:	f000 b8a2 	b.w	85ba4 <_write_r>

00085a60 <__sseek>:
   85a60:	b510      	push	{r4, lr}
   85a62:	460c      	mov	r4, r1
   85a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a68:	f000 f97e 	bl	85d68 <_lseek_r>
   85a6c:	89a3      	ldrh	r3, [r4, #12]
   85a6e:	1c42      	adds	r2, r0, #1
   85a70:	bf0e      	itee	eq
   85a72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85a76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85a7a:	6520      	strne	r0, [r4, #80]	; 0x50
   85a7c:	81a3      	strh	r3, [r4, #12]
   85a7e:	bd10      	pop	{r4, pc}

00085a80 <__sclose>:
   85a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85a84:	f000 b8f6 	b.w	85c74 <_close_r>

00085a88 <__swbuf_r>:
   85a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85a8a:	460e      	mov	r6, r1
   85a8c:	4614      	mov	r4, r2
   85a8e:	4607      	mov	r7, r0
   85a90:	b110      	cbz	r0, 85a98 <__swbuf_r+0x10>
   85a92:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85a94:	2b00      	cmp	r3, #0
   85a96:	d04a      	beq.n	85b2e <__swbuf_r+0xa6>
   85a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85a9c:	69a3      	ldr	r3, [r4, #24]
   85a9e:	b291      	uxth	r1, r2
   85aa0:	0708      	lsls	r0, r1, #28
   85aa2:	60a3      	str	r3, [r4, #8]
   85aa4:	d538      	bpl.n	85b18 <__swbuf_r+0x90>
   85aa6:	6923      	ldr	r3, [r4, #16]
   85aa8:	2b00      	cmp	r3, #0
   85aaa:	d035      	beq.n	85b18 <__swbuf_r+0x90>
   85aac:	0489      	lsls	r1, r1, #18
   85aae:	b2f5      	uxtb	r5, r6
   85ab0:	d515      	bpl.n	85ade <__swbuf_r+0x56>
   85ab2:	6822      	ldr	r2, [r4, #0]
   85ab4:	6961      	ldr	r1, [r4, #20]
   85ab6:	1ad3      	subs	r3, r2, r3
   85ab8:	428b      	cmp	r3, r1
   85aba:	da1c      	bge.n	85af6 <__swbuf_r+0x6e>
   85abc:	3301      	adds	r3, #1
   85abe:	68a1      	ldr	r1, [r4, #8]
   85ac0:	1c50      	adds	r0, r2, #1
   85ac2:	3901      	subs	r1, #1
   85ac4:	60a1      	str	r1, [r4, #8]
   85ac6:	6020      	str	r0, [r4, #0]
   85ac8:	7016      	strb	r6, [r2, #0]
   85aca:	6962      	ldr	r2, [r4, #20]
   85acc:	429a      	cmp	r2, r3
   85ace:	d01a      	beq.n	85b06 <__swbuf_r+0x7e>
   85ad0:	89a3      	ldrh	r3, [r4, #12]
   85ad2:	07db      	lsls	r3, r3, #31
   85ad4:	d501      	bpl.n	85ada <__swbuf_r+0x52>
   85ad6:	2d0a      	cmp	r5, #10
   85ad8:	d015      	beq.n	85b06 <__swbuf_r+0x7e>
   85ada:	4628      	mov	r0, r5
   85adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85ade:	6e61      	ldr	r1, [r4, #100]	; 0x64
   85ae0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85ae4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85ae8:	81a2      	strh	r2, [r4, #12]
   85aea:	6822      	ldr	r2, [r4, #0]
   85aec:	6661      	str	r1, [r4, #100]	; 0x64
   85aee:	6961      	ldr	r1, [r4, #20]
   85af0:	1ad3      	subs	r3, r2, r3
   85af2:	428b      	cmp	r3, r1
   85af4:	dbe2      	blt.n	85abc <__swbuf_r+0x34>
   85af6:	4621      	mov	r1, r4
   85af8:	4638      	mov	r0, r7
   85afa:	f7fe fdb5 	bl	84668 <_fflush_r>
   85afe:	b940      	cbnz	r0, 85b12 <__swbuf_r+0x8a>
   85b00:	6822      	ldr	r2, [r4, #0]
   85b02:	2301      	movs	r3, #1
   85b04:	e7db      	b.n	85abe <__swbuf_r+0x36>
   85b06:	4621      	mov	r1, r4
   85b08:	4638      	mov	r0, r7
   85b0a:	f7fe fdad 	bl	84668 <_fflush_r>
   85b0e:	2800      	cmp	r0, #0
   85b10:	d0e3      	beq.n	85ada <__swbuf_r+0x52>
   85b12:	f04f 30ff 	mov.w	r0, #4294967295
   85b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85b18:	4621      	mov	r1, r4
   85b1a:	4638      	mov	r0, r7
   85b1c:	f7fe fc8c 	bl	84438 <__swsetup_r>
   85b20:	2800      	cmp	r0, #0
   85b22:	d1f6      	bne.n	85b12 <__swbuf_r+0x8a>
   85b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85b28:	6923      	ldr	r3, [r4, #16]
   85b2a:	b291      	uxth	r1, r2
   85b2c:	e7be      	b.n	85aac <__swbuf_r+0x24>
   85b2e:	f7fe fe2f 	bl	84790 <__sinit>
   85b32:	e7b1      	b.n	85a98 <__swbuf_r+0x10>

00085b34 <_wcrtomb_r>:
   85b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b38:	4605      	mov	r5, r0
   85b3a:	b086      	sub	sp, #24
   85b3c:	461e      	mov	r6, r3
   85b3e:	460c      	mov	r4, r1
   85b40:	b1a1      	cbz	r1, 85b6c <_wcrtomb_r+0x38>
   85b42:	4b10      	ldr	r3, [pc, #64]	; (85b84 <_wcrtomb_r+0x50>)
   85b44:	4617      	mov	r7, r2
   85b46:	f8d3 8000 	ldr.w	r8, [r3]
   85b4a:	f7ff f97d 	bl	84e48 <__locale_charset>
   85b4e:	9600      	str	r6, [sp, #0]
   85b50:	4603      	mov	r3, r0
   85b52:	463a      	mov	r2, r7
   85b54:	4621      	mov	r1, r4
   85b56:	4628      	mov	r0, r5
   85b58:	47c0      	blx	r8
   85b5a:	1c43      	adds	r3, r0, #1
   85b5c:	d103      	bne.n	85b66 <_wcrtomb_r+0x32>
   85b5e:	2200      	movs	r2, #0
   85b60:	238a      	movs	r3, #138	; 0x8a
   85b62:	6032      	str	r2, [r6, #0]
   85b64:	602b      	str	r3, [r5, #0]
   85b66:	b006      	add	sp, #24
   85b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85b6c:	4b05      	ldr	r3, [pc, #20]	; (85b84 <_wcrtomb_r+0x50>)
   85b6e:	681f      	ldr	r7, [r3, #0]
   85b70:	f7ff f96a 	bl	84e48 <__locale_charset>
   85b74:	9600      	str	r6, [sp, #0]
   85b76:	4603      	mov	r3, r0
   85b78:	4622      	mov	r2, r4
   85b7a:	a903      	add	r1, sp, #12
   85b7c:	4628      	mov	r0, r5
   85b7e:	47b8      	blx	r7
   85b80:	e7eb      	b.n	85b5a <_wcrtomb_r+0x26>
   85b82:	bf00      	nop
   85b84:	200709a0 	.word	0x200709a0

00085b88 <__ascii_wctomb>:
   85b88:	b121      	cbz	r1, 85b94 <__ascii_wctomb+0xc>
   85b8a:	2aff      	cmp	r2, #255	; 0xff
   85b8c:	d804      	bhi.n	85b98 <__ascii_wctomb+0x10>
   85b8e:	700a      	strb	r2, [r1, #0]
   85b90:	2001      	movs	r0, #1
   85b92:	4770      	bx	lr
   85b94:	4608      	mov	r0, r1
   85b96:	4770      	bx	lr
   85b98:	238a      	movs	r3, #138	; 0x8a
   85b9a:	6003      	str	r3, [r0, #0]
   85b9c:	f04f 30ff 	mov.w	r0, #4294967295
   85ba0:	4770      	bx	lr
   85ba2:	bf00      	nop

00085ba4 <_write_r>:
   85ba4:	b570      	push	{r4, r5, r6, lr}
   85ba6:	460d      	mov	r5, r1
   85ba8:	4c08      	ldr	r4, [pc, #32]	; (85bcc <_write_r+0x28>)
   85baa:	4611      	mov	r1, r2
   85bac:	4606      	mov	r6, r0
   85bae:	461a      	mov	r2, r3
   85bb0:	4628      	mov	r0, r5
   85bb2:	2300      	movs	r3, #0
   85bb4:	6023      	str	r3, [r4, #0]
   85bb6:	f7fc fd1f 	bl	825f8 <_write>
   85bba:	1c43      	adds	r3, r0, #1
   85bbc:	d000      	beq.n	85bc0 <_write_r+0x1c>
   85bbe:	bd70      	pop	{r4, r5, r6, pc}
   85bc0:	6823      	ldr	r3, [r4, #0]
   85bc2:	2b00      	cmp	r3, #0
   85bc4:	d0fb      	beq.n	85bbe <_write_r+0x1a>
   85bc6:	6033      	str	r3, [r6, #0]
   85bc8:	bd70      	pop	{r4, r5, r6, pc}
   85bca:	bf00      	nop
   85bcc:	20078c90 	.word	0x20078c90

00085bd0 <__register_exitproc>:
   85bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85bd4:	4c25      	ldr	r4, [pc, #148]	; (85c6c <__register_exitproc+0x9c>)
   85bd6:	4606      	mov	r6, r0
   85bd8:	6825      	ldr	r5, [r4, #0]
   85bda:	4688      	mov	r8, r1
   85bdc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   85be0:	4692      	mov	sl, r2
   85be2:	4699      	mov	r9, r3
   85be4:	b3c4      	cbz	r4, 85c58 <__register_exitproc+0x88>
   85be6:	6860      	ldr	r0, [r4, #4]
   85be8:	281f      	cmp	r0, #31
   85bea:	dc17      	bgt.n	85c1c <__register_exitproc+0x4c>
   85bec:	1c41      	adds	r1, r0, #1
   85bee:	b176      	cbz	r6, 85c0e <__register_exitproc+0x3e>
   85bf0:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   85bf4:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   85bf8:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   85bfc:	2201      	movs	r2, #1
   85bfe:	4082      	lsls	r2, r0
   85c00:	4315      	orrs	r5, r2
   85c02:	2e02      	cmp	r6, #2
   85c04:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   85c08:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   85c0c:	d01e      	beq.n	85c4c <__register_exitproc+0x7c>
   85c0e:	1c83      	adds	r3, r0, #2
   85c10:	6061      	str	r1, [r4, #4]
   85c12:	2000      	movs	r0, #0
   85c14:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   85c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c1c:	4b14      	ldr	r3, [pc, #80]	; (85c70 <__register_exitproc+0xa0>)
   85c1e:	b303      	cbz	r3, 85c62 <__register_exitproc+0x92>
   85c20:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85c24:	f7ff f98e 	bl	84f44 <malloc>
   85c28:	4604      	mov	r4, r0
   85c2a:	b1d0      	cbz	r0, 85c62 <__register_exitproc+0x92>
   85c2c:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   85c30:	2700      	movs	r7, #0
   85c32:	e884 0088 	stmia.w	r4, {r3, r7}
   85c36:	4638      	mov	r0, r7
   85c38:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85c3c:	2101      	movs	r1, #1
   85c3e:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   85c42:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   85c46:	2e00      	cmp	r6, #0
   85c48:	d0e1      	beq.n	85c0e <__register_exitproc+0x3e>
   85c4a:	e7d1      	b.n	85bf0 <__register_exitproc+0x20>
   85c4c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   85c50:	431a      	orrs	r2, r3
   85c52:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   85c56:	e7da      	b.n	85c0e <__register_exitproc+0x3e>
   85c58:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   85c5c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   85c60:	e7c1      	b.n	85be6 <__register_exitproc+0x16>
   85c62:	f04f 30ff 	mov.w	r0, #4294967295
   85c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85c6a:	bf00      	nop
   85c6c:	000861bc 	.word	0x000861bc
   85c70:	00084f45 	.word	0x00084f45

00085c74 <_close_r>:
   85c74:	b538      	push	{r3, r4, r5, lr}
   85c76:	4c07      	ldr	r4, [pc, #28]	; (85c94 <_close_r+0x20>)
   85c78:	2300      	movs	r3, #0
   85c7a:	4605      	mov	r5, r0
   85c7c:	4608      	mov	r0, r1
   85c7e:	6023      	str	r3, [r4, #0]
   85c80:	f7fa feda 	bl	80a38 <_close>
   85c84:	1c43      	adds	r3, r0, #1
   85c86:	d000      	beq.n	85c8a <_close_r+0x16>
   85c88:	bd38      	pop	{r3, r4, r5, pc}
   85c8a:	6823      	ldr	r3, [r4, #0]
   85c8c:	2b00      	cmp	r3, #0
   85c8e:	d0fb      	beq.n	85c88 <_close_r+0x14>
   85c90:	602b      	str	r3, [r5, #0]
   85c92:	bd38      	pop	{r3, r4, r5, pc}
   85c94:	20078c90 	.word	0x20078c90

00085c98 <_fclose_r>:
   85c98:	2900      	cmp	r1, #0
   85c9a:	d03d      	beq.n	85d18 <_fclose_r+0x80>
   85c9c:	b570      	push	{r4, r5, r6, lr}
   85c9e:	4605      	mov	r5, r0
   85ca0:	460c      	mov	r4, r1
   85ca2:	b108      	cbz	r0, 85ca8 <_fclose_r+0x10>
   85ca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85ca6:	b37b      	cbz	r3, 85d08 <_fclose_r+0x70>
   85ca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85cac:	b90b      	cbnz	r3, 85cb2 <_fclose_r+0x1a>
   85cae:	2000      	movs	r0, #0
   85cb0:	bd70      	pop	{r4, r5, r6, pc}
   85cb2:	4621      	mov	r1, r4
   85cb4:	4628      	mov	r0, r5
   85cb6:	f7fe fc33 	bl	84520 <__sflush_r>
   85cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85cbc:	4606      	mov	r6, r0
   85cbe:	b133      	cbz	r3, 85cce <_fclose_r+0x36>
   85cc0:	69e1      	ldr	r1, [r4, #28]
   85cc2:	4628      	mov	r0, r5
   85cc4:	4798      	blx	r3
   85cc6:	2800      	cmp	r0, #0
   85cc8:	bfb8      	it	lt
   85cca:	f04f 36ff 	movlt.w	r6, #4294967295
   85cce:	89a3      	ldrh	r3, [r4, #12]
   85cd0:	061b      	lsls	r3, r3, #24
   85cd2:	d41c      	bmi.n	85d0e <_fclose_r+0x76>
   85cd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85cd6:	b141      	cbz	r1, 85cea <_fclose_r+0x52>
   85cd8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85cdc:	4299      	cmp	r1, r3
   85cde:	d002      	beq.n	85ce6 <_fclose_r+0x4e>
   85ce0:	4628      	mov	r0, r5
   85ce2:	f7fe fe1d 	bl	84920 <_free_r>
   85ce6:	2300      	movs	r3, #0
   85ce8:	6323      	str	r3, [r4, #48]	; 0x30
   85cea:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85cec:	b121      	cbz	r1, 85cf8 <_fclose_r+0x60>
   85cee:	4628      	mov	r0, r5
   85cf0:	f7fe fe16 	bl	84920 <_free_r>
   85cf4:	2300      	movs	r3, #0
   85cf6:	6463      	str	r3, [r4, #68]	; 0x44
   85cf8:	f7fe fd50 	bl	8479c <__sfp_lock_acquire>
   85cfc:	2300      	movs	r3, #0
   85cfe:	81a3      	strh	r3, [r4, #12]
   85d00:	f7fe fd4e 	bl	847a0 <__sfp_lock_release>
   85d04:	4630      	mov	r0, r6
   85d06:	bd70      	pop	{r4, r5, r6, pc}
   85d08:	f7fe fd42 	bl	84790 <__sinit>
   85d0c:	e7cc      	b.n	85ca8 <_fclose_r+0x10>
   85d0e:	6921      	ldr	r1, [r4, #16]
   85d10:	4628      	mov	r0, r5
   85d12:	f7fe fe05 	bl	84920 <_free_r>
   85d16:	e7dd      	b.n	85cd4 <_fclose_r+0x3c>
   85d18:	2000      	movs	r0, #0
   85d1a:	4770      	bx	lr

00085d1c <_fstat_r>:
   85d1c:	b538      	push	{r3, r4, r5, lr}
   85d1e:	460b      	mov	r3, r1
   85d20:	4c07      	ldr	r4, [pc, #28]	; (85d40 <_fstat_r+0x24>)
   85d22:	4605      	mov	r5, r0
   85d24:	4611      	mov	r1, r2
   85d26:	4618      	mov	r0, r3
   85d28:	2300      	movs	r3, #0
   85d2a:	6023      	str	r3, [r4, #0]
   85d2c:	f7fa fe88 	bl	80a40 <_fstat>
   85d30:	1c43      	adds	r3, r0, #1
   85d32:	d000      	beq.n	85d36 <_fstat_r+0x1a>
   85d34:	bd38      	pop	{r3, r4, r5, pc}
   85d36:	6823      	ldr	r3, [r4, #0]
   85d38:	2b00      	cmp	r3, #0
   85d3a:	d0fb      	beq.n	85d34 <_fstat_r+0x18>
   85d3c:	602b      	str	r3, [r5, #0]
   85d3e:	bd38      	pop	{r3, r4, r5, pc}
   85d40:	20078c90 	.word	0x20078c90

00085d44 <_isatty_r>:
   85d44:	b538      	push	{r3, r4, r5, lr}
   85d46:	4c07      	ldr	r4, [pc, #28]	; (85d64 <_isatty_r+0x20>)
   85d48:	2300      	movs	r3, #0
   85d4a:	4605      	mov	r5, r0
   85d4c:	4608      	mov	r0, r1
   85d4e:	6023      	str	r3, [r4, #0]
   85d50:	f7fa fe7c 	bl	80a4c <_isatty>
   85d54:	1c43      	adds	r3, r0, #1
   85d56:	d000      	beq.n	85d5a <_isatty_r+0x16>
   85d58:	bd38      	pop	{r3, r4, r5, pc}
   85d5a:	6823      	ldr	r3, [r4, #0]
   85d5c:	2b00      	cmp	r3, #0
   85d5e:	d0fb      	beq.n	85d58 <_isatty_r+0x14>
   85d60:	602b      	str	r3, [r5, #0]
   85d62:	bd38      	pop	{r3, r4, r5, pc}
   85d64:	20078c90 	.word	0x20078c90

00085d68 <_lseek_r>:
   85d68:	b570      	push	{r4, r5, r6, lr}
   85d6a:	460d      	mov	r5, r1
   85d6c:	4c08      	ldr	r4, [pc, #32]	; (85d90 <_lseek_r+0x28>)
   85d6e:	4611      	mov	r1, r2
   85d70:	4606      	mov	r6, r0
   85d72:	461a      	mov	r2, r3
   85d74:	4628      	mov	r0, r5
   85d76:	2300      	movs	r3, #0
   85d78:	6023      	str	r3, [r4, #0]
   85d7a:	f7fa fe69 	bl	80a50 <_lseek>
   85d7e:	1c43      	adds	r3, r0, #1
   85d80:	d000      	beq.n	85d84 <_lseek_r+0x1c>
   85d82:	bd70      	pop	{r4, r5, r6, pc}
   85d84:	6823      	ldr	r3, [r4, #0]
   85d86:	2b00      	cmp	r3, #0
   85d88:	d0fb      	beq.n	85d82 <_lseek_r+0x1a>
   85d8a:	6033      	str	r3, [r6, #0]
   85d8c:	bd70      	pop	{r4, r5, r6, pc}
   85d8e:	bf00      	nop
   85d90:	20078c90 	.word	0x20078c90

00085d94 <_read_r>:
   85d94:	b570      	push	{r4, r5, r6, lr}
   85d96:	460d      	mov	r5, r1
   85d98:	4c08      	ldr	r4, [pc, #32]	; (85dbc <_read_r+0x28>)
   85d9a:	4611      	mov	r1, r2
   85d9c:	4606      	mov	r6, r0
   85d9e:	461a      	mov	r2, r3
   85da0:	4628      	mov	r0, r5
   85da2:	2300      	movs	r3, #0
   85da4:	6023      	str	r3, [r4, #0]
   85da6:	f7fa fa81 	bl	802ac <_read>
   85daa:	1c43      	adds	r3, r0, #1
   85dac:	d000      	beq.n	85db0 <_read_r+0x1c>
   85dae:	bd70      	pop	{r4, r5, r6, pc}
   85db0:	6823      	ldr	r3, [r4, #0]
   85db2:	2b00      	cmp	r3, #0
   85db4:	d0fb      	beq.n	85dae <_read_r+0x1a>
   85db6:	6033      	str	r3, [r6, #0]
   85db8:	bd70      	pop	{r4, r5, r6, pc}
   85dba:	bf00      	nop
   85dbc:	20078c90 	.word	0x20078c90

00085dc0 <__aeabi_uldivmod>:
   85dc0:	b953      	cbnz	r3, 85dd8 <__aeabi_uldivmod+0x18>
   85dc2:	b94a      	cbnz	r2, 85dd8 <__aeabi_uldivmod+0x18>
   85dc4:	2900      	cmp	r1, #0
   85dc6:	bf08      	it	eq
   85dc8:	2800      	cmpeq	r0, #0
   85dca:	bf1c      	itt	ne
   85dcc:	f04f 31ff 	movne.w	r1, #4294967295
   85dd0:	f04f 30ff 	movne.w	r0, #4294967295
   85dd4:	f000 b982 	b.w	860dc <__aeabi_idiv0>
   85dd8:	f1ad 0c08 	sub.w	ip, sp, #8
   85ddc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85de0:	f000 f806 	bl	85df0 <__udivmoddi4>
   85de4:	f8dd e004 	ldr.w	lr, [sp, #4]
   85de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85dec:	b004      	add	sp, #16
   85dee:	4770      	bx	lr

00085df0 <__udivmoddi4>:
   85df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85df4:	468c      	mov	ip, r1
   85df6:	460c      	mov	r4, r1
   85df8:	4605      	mov	r5, r0
   85dfa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   85dfc:	2b00      	cmp	r3, #0
   85dfe:	d14f      	bne.n	85ea0 <__udivmoddi4+0xb0>
   85e00:	428a      	cmp	r2, r1
   85e02:	4617      	mov	r7, r2
   85e04:	d96b      	bls.n	85ede <__udivmoddi4+0xee>
   85e06:	fab2 fe82 	clz	lr, r2
   85e0a:	f1be 0f00 	cmp.w	lr, #0
   85e0e:	d00b      	beq.n	85e28 <__udivmoddi4+0x38>
   85e10:	f1ce 0520 	rsb	r5, lr, #32
   85e14:	fa20 f505 	lsr.w	r5, r0, r5
   85e18:	fa01 f30e 	lsl.w	r3, r1, lr
   85e1c:	ea45 0c03 	orr.w	ip, r5, r3
   85e20:	fa02 f70e 	lsl.w	r7, r2, lr
   85e24:	fa00 f50e 	lsl.w	r5, r0, lr
   85e28:	0c39      	lsrs	r1, r7, #16
   85e2a:	fbbc f0f1 	udiv	r0, ip, r1
   85e2e:	b2ba      	uxth	r2, r7
   85e30:	fb01 c310 	mls	r3, r1, r0, ip
   85e34:	fb00 f802 	mul.w	r8, r0, r2
   85e38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85e3c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   85e40:	45a0      	cmp	r8, r4
   85e42:	d909      	bls.n	85e58 <__udivmoddi4+0x68>
   85e44:	19e4      	adds	r4, r4, r7
   85e46:	f100 33ff 	add.w	r3, r0, #4294967295
   85e4a:	f080 8128 	bcs.w	8609e <__udivmoddi4+0x2ae>
   85e4e:	45a0      	cmp	r8, r4
   85e50:	f240 8125 	bls.w	8609e <__udivmoddi4+0x2ae>
   85e54:	3802      	subs	r0, #2
   85e56:	443c      	add	r4, r7
   85e58:	ebc8 0404 	rsb	r4, r8, r4
   85e5c:	fbb4 f3f1 	udiv	r3, r4, r1
   85e60:	fb01 4c13 	mls	ip, r1, r3, r4
   85e64:	fb03 f202 	mul.w	r2, r3, r2
   85e68:	b2ac      	uxth	r4, r5
   85e6a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   85e6e:	428a      	cmp	r2, r1
   85e70:	d909      	bls.n	85e86 <__udivmoddi4+0x96>
   85e72:	19c9      	adds	r1, r1, r7
   85e74:	f103 34ff 	add.w	r4, r3, #4294967295
   85e78:	f080 810f 	bcs.w	8609a <__udivmoddi4+0x2aa>
   85e7c:	428a      	cmp	r2, r1
   85e7e:	f240 810c 	bls.w	8609a <__udivmoddi4+0x2aa>
   85e82:	3b02      	subs	r3, #2
   85e84:	4439      	add	r1, r7
   85e86:	1a8a      	subs	r2, r1, r2
   85e88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   85e8c:	2100      	movs	r1, #0
   85e8e:	2e00      	cmp	r6, #0
   85e90:	d063      	beq.n	85f5a <__udivmoddi4+0x16a>
   85e92:	fa22 f20e 	lsr.w	r2, r2, lr
   85e96:	2300      	movs	r3, #0
   85e98:	e886 000c 	stmia.w	r6, {r2, r3}
   85e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ea0:	428b      	cmp	r3, r1
   85ea2:	d907      	bls.n	85eb4 <__udivmoddi4+0xc4>
   85ea4:	2e00      	cmp	r6, #0
   85ea6:	d056      	beq.n	85f56 <__udivmoddi4+0x166>
   85ea8:	2100      	movs	r1, #0
   85eaa:	e886 0011 	stmia.w	r6, {r0, r4}
   85eae:	4608      	mov	r0, r1
   85eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85eb4:	fab3 f183 	clz	r1, r3
   85eb8:	2900      	cmp	r1, #0
   85eba:	f040 8093 	bne.w	85fe4 <__udivmoddi4+0x1f4>
   85ebe:	42a3      	cmp	r3, r4
   85ec0:	d302      	bcc.n	85ec8 <__udivmoddi4+0xd8>
   85ec2:	4282      	cmp	r2, r0
   85ec4:	f200 80fe 	bhi.w	860c4 <__udivmoddi4+0x2d4>
   85ec8:	1a85      	subs	r5, r0, r2
   85eca:	eb64 0303 	sbc.w	r3, r4, r3
   85ece:	469c      	mov	ip, r3
   85ed0:	2001      	movs	r0, #1
   85ed2:	2e00      	cmp	r6, #0
   85ed4:	d041      	beq.n	85f5a <__udivmoddi4+0x16a>
   85ed6:	e886 1020 	stmia.w	r6, {r5, ip}
   85eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ede:	b912      	cbnz	r2, 85ee6 <__udivmoddi4+0xf6>
   85ee0:	2701      	movs	r7, #1
   85ee2:	fbb7 f7f2 	udiv	r7, r7, r2
   85ee6:	fab7 fe87 	clz	lr, r7
   85eea:	f1be 0f00 	cmp.w	lr, #0
   85eee:	d136      	bne.n	85f5e <__udivmoddi4+0x16e>
   85ef0:	1be4      	subs	r4, r4, r7
   85ef2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85ef6:	fa1f f987 	uxth.w	r9, r7
   85efa:	2101      	movs	r1, #1
   85efc:	fbb4 f3f8 	udiv	r3, r4, r8
   85f00:	fb08 4413 	mls	r4, r8, r3, r4
   85f04:	fb09 f203 	mul.w	r2, r9, r3
   85f08:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85f0c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   85f10:	42a2      	cmp	r2, r4
   85f12:	d907      	bls.n	85f24 <__udivmoddi4+0x134>
   85f14:	19e4      	adds	r4, r4, r7
   85f16:	f103 30ff 	add.w	r0, r3, #4294967295
   85f1a:	d202      	bcs.n	85f22 <__udivmoddi4+0x132>
   85f1c:	42a2      	cmp	r2, r4
   85f1e:	f200 80d3 	bhi.w	860c8 <__udivmoddi4+0x2d8>
   85f22:	4603      	mov	r3, r0
   85f24:	1aa4      	subs	r4, r4, r2
   85f26:	fbb4 f0f8 	udiv	r0, r4, r8
   85f2a:	fb08 4810 	mls	r8, r8, r0, r4
   85f2e:	fb09 f900 	mul.w	r9, r9, r0
   85f32:	b2ac      	uxth	r4, r5
   85f34:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   85f38:	4591      	cmp	r9, r2
   85f3a:	d907      	bls.n	85f4c <__udivmoddi4+0x15c>
   85f3c:	19d2      	adds	r2, r2, r7
   85f3e:	f100 34ff 	add.w	r4, r0, #4294967295
   85f42:	d202      	bcs.n	85f4a <__udivmoddi4+0x15a>
   85f44:	4591      	cmp	r9, r2
   85f46:	f200 80ba 	bhi.w	860be <__udivmoddi4+0x2ce>
   85f4a:	4620      	mov	r0, r4
   85f4c:	ebc9 0202 	rsb	r2, r9, r2
   85f50:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   85f54:	e79b      	b.n	85e8e <__udivmoddi4+0x9e>
   85f56:	4631      	mov	r1, r6
   85f58:	4630      	mov	r0, r6
   85f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85f5e:	fa07 f70e 	lsl.w	r7, r7, lr
   85f62:	f1ce 0c20 	rsb	ip, lr, #32
   85f66:	fa24 f30c 	lsr.w	r3, r4, ip
   85f6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   85f6e:	fbb3 faf8 	udiv	sl, r3, r8
   85f72:	fa1f f987 	uxth.w	r9, r7
   85f76:	fb08 351a 	mls	r5, r8, sl, r3
   85f7a:	fa20 fc0c 	lsr.w	ip, r0, ip
   85f7e:	fa04 f40e 	lsl.w	r4, r4, lr
   85f82:	fb0a fb09 	mul.w	fp, sl, r9
   85f86:	ea4c 0c04 	orr.w	ip, ip, r4
   85f8a:	ea4f 421c 	mov.w	r2, ip, lsr #16
   85f8e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   85f92:	459b      	cmp	fp, r3
   85f94:	fa00 f50e 	lsl.w	r5, r0, lr
   85f98:	d90a      	bls.n	85fb0 <__udivmoddi4+0x1c0>
   85f9a:	19db      	adds	r3, r3, r7
   85f9c:	f10a 32ff 	add.w	r2, sl, #4294967295
   85fa0:	f080 808b 	bcs.w	860ba <__udivmoddi4+0x2ca>
   85fa4:	459b      	cmp	fp, r3
   85fa6:	f240 8088 	bls.w	860ba <__udivmoddi4+0x2ca>
   85faa:	f1aa 0a02 	sub.w	sl, sl, #2
   85fae:	443b      	add	r3, r7
   85fb0:	ebcb 0303 	rsb	r3, fp, r3
   85fb4:	fbb3 f0f8 	udiv	r0, r3, r8
   85fb8:	fb08 3310 	mls	r3, r8, r0, r3
   85fbc:	fb00 f409 	mul.w	r4, r0, r9
   85fc0:	fa1f fc8c 	uxth.w	ip, ip
   85fc4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   85fc8:	429c      	cmp	r4, r3
   85fca:	d907      	bls.n	85fdc <__udivmoddi4+0x1ec>
   85fcc:	19db      	adds	r3, r3, r7
   85fce:	f100 32ff 	add.w	r2, r0, #4294967295
   85fd2:	d26e      	bcs.n	860b2 <__udivmoddi4+0x2c2>
   85fd4:	429c      	cmp	r4, r3
   85fd6:	d96c      	bls.n	860b2 <__udivmoddi4+0x2c2>
   85fd8:	3802      	subs	r0, #2
   85fda:	443b      	add	r3, r7
   85fdc:	1b1c      	subs	r4, r3, r4
   85fde:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   85fe2:	e78b      	b.n	85efc <__udivmoddi4+0x10c>
   85fe4:	f1c1 0e20 	rsb	lr, r1, #32
   85fe8:	408b      	lsls	r3, r1
   85fea:	fa22 fc0e 	lsr.w	ip, r2, lr
   85fee:	ea4c 0c03 	orr.w	ip, ip, r3
   85ff2:	fa24 f70e 	lsr.w	r7, r4, lr
   85ff6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   85ffa:	fbb7 faf9 	udiv	sl, r7, r9
   85ffe:	fa1f f38c 	uxth.w	r3, ip
   86002:	fb09 771a 	mls	r7, r9, sl, r7
   86006:	fa20 f80e 	lsr.w	r8, r0, lr
   8600a:	408c      	lsls	r4, r1
   8600c:	fb0a f503 	mul.w	r5, sl, r3
   86010:	ea48 0404 	orr.w	r4, r8, r4
   86014:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86018:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   8601c:	42bd      	cmp	r5, r7
   8601e:	fa02 f201 	lsl.w	r2, r2, r1
   86022:	fa00 fb01 	lsl.w	fp, r0, r1
   86026:	d909      	bls.n	8603c <__udivmoddi4+0x24c>
   86028:	eb17 070c 	adds.w	r7, r7, ip
   8602c:	f10a 30ff 	add.w	r0, sl, #4294967295
   86030:	d241      	bcs.n	860b6 <__udivmoddi4+0x2c6>
   86032:	42bd      	cmp	r5, r7
   86034:	d93f      	bls.n	860b6 <__udivmoddi4+0x2c6>
   86036:	f1aa 0a02 	sub.w	sl, sl, #2
   8603a:	4467      	add	r7, ip
   8603c:	1b7f      	subs	r7, r7, r5
   8603e:	fbb7 f5f9 	udiv	r5, r7, r9
   86042:	fb09 7715 	mls	r7, r9, r5, r7
   86046:	fb05 f303 	mul.w	r3, r5, r3
   8604a:	b2a4      	uxth	r4, r4
   8604c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86050:	42bb      	cmp	r3, r7
   86052:	d908      	bls.n	86066 <__udivmoddi4+0x276>
   86054:	eb17 070c 	adds.w	r7, r7, ip
   86058:	f105 30ff 	add.w	r0, r5, #4294967295
   8605c:	d227      	bcs.n	860ae <__udivmoddi4+0x2be>
   8605e:	42bb      	cmp	r3, r7
   86060:	d925      	bls.n	860ae <__udivmoddi4+0x2be>
   86062:	3d02      	subs	r5, #2
   86064:	4467      	add	r7, ip
   86066:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8606a:	fba0 8902 	umull	r8, r9, r0, r2
   8606e:	1aff      	subs	r7, r7, r3
   86070:	454f      	cmp	r7, r9
   86072:	4645      	mov	r5, r8
   86074:	464c      	mov	r4, r9
   86076:	d314      	bcc.n	860a2 <__udivmoddi4+0x2b2>
   86078:	d029      	beq.n	860ce <__udivmoddi4+0x2de>
   8607a:	b366      	cbz	r6, 860d6 <__udivmoddi4+0x2e6>
   8607c:	ebbb 0305 	subs.w	r3, fp, r5
   86080:	eb67 0704 	sbc.w	r7, r7, r4
   86084:	fa07 fe0e 	lsl.w	lr, r7, lr
   86088:	40cb      	lsrs	r3, r1
   8608a:	40cf      	lsrs	r7, r1
   8608c:	ea4e 0303 	orr.w	r3, lr, r3
   86090:	e886 0088 	stmia.w	r6, {r3, r7}
   86094:	2100      	movs	r1, #0
   86096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8609a:	4623      	mov	r3, r4
   8609c:	e6f3      	b.n	85e86 <__udivmoddi4+0x96>
   8609e:	4618      	mov	r0, r3
   860a0:	e6da      	b.n	85e58 <__udivmoddi4+0x68>
   860a2:	ebb8 0502 	subs.w	r5, r8, r2
   860a6:	eb69 040c 	sbc.w	r4, r9, ip
   860aa:	3801      	subs	r0, #1
   860ac:	e7e5      	b.n	8607a <__udivmoddi4+0x28a>
   860ae:	4605      	mov	r5, r0
   860b0:	e7d9      	b.n	86066 <__udivmoddi4+0x276>
   860b2:	4610      	mov	r0, r2
   860b4:	e792      	b.n	85fdc <__udivmoddi4+0x1ec>
   860b6:	4682      	mov	sl, r0
   860b8:	e7c0      	b.n	8603c <__udivmoddi4+0x24c>
   860ba:	4692      	mov	sl, r2
   860bc:	e778      	b.n	85fb0 <__udivmoddi4+0x1c0>
   860be:	3802      	subs	r0, #2
   860c0:	443a      	add	r2, r7
   860c2:	e743      	b.n	85f4c <__udivmoddi4+0x15c>
   860c4:	4608      	mov	r0, r1
   860c6:	e704      	b.n	85ed2 <__udivmoddi4+0xe2>
   860c8:	3b02      	subs	r3, #2
   860ca:	443c      	add	r4, r7
   860cc:	e72a      	b.n	85f24 <__udivmoddi4+0x134>
   860ce:	45c3      	cmp	fp, r8
   860d0:	d3e7      	bcc.n	860a2 <__udivmoddi4+0x2b2>
   860d2:	463c      	mov	r4, r7
   860d4:	e7d1      	b.n	8607a <__udivmoddi4+0x28a>
   860d6:	4631      	mov	r1, r6
   860d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000860dc <__aeabi_idiv0>:
   860dc:	4770      	bx	lr
   860de:	bf00      	nop
   860e0:	0d0a6925 	.word	0x0d0a6925
   860e4:	00000000 	.word	0x00000000
   860e8:	09097325 	.word	0x09097325
   860ec:	25096325 	.word	0x25096325
   860f0:	75250975 	.word	0x75250975
   860f4:	0d752509 	.word	0x0d752509
   860f8:	0000000a 	.word	0x0000000a
   860fc:	454c4449 	.word	0x454c4449
   86100:	00000000 	.word	0x00000000
   86104:	20726d54 	.word	0x20726d54
   86108:	00637653 	.word	0x00637653
   8610c:	00000001 	.word	0x00000001
   86110:	00000002 	.word	0x00000002
   86114:	00000004 	.word	0x00000004
   86118:	00000008 	.word	0x00000008
   8611c:	00000010 	.word	0x00000010
   86120:	00000020 	.word	0x00000020
   86124:	00000040 	.word	0x00000040
   86128:	00000080 	.word	0x00000080
   8612c:	00000100 	.word	0x00000100
   86130:	00000200 	.word	0x00000200
   86134:	00000400 	.word	0x00000400
   86138:	52444950 	.word	0x52444950
   8613c:	6c756765 	.word	0x6c756765
   86140:	6f697461 	.word	0x6f697461
   86144:	0000006e 	.word	0x0000006e
   86148:	6c696146 	.word	0x6c696146
   8614c:	74206465 	.word	0x74206465
   86150:	7263206f 	.word	0x7263206f
   86154:	65746165 	.word	0x65746165
   86158:	44495020 	.word	0x44495020
   8615c:	75676552 	.word	0x75676552
   86160:	6974616c 	.word	0x6974616c
   86164:	61546e6f 	.word	0x61546e6f
   86168:	0a0d6b73 	.word	0x0a0d6b73
   8616c:	00000000 	.word	0x00000000
   86170:	69726553 	.word	0x69726553
   86174:	6f436c61 	.word	0x6f436c61
   86178:	7361546d 	.word	0x7361546d
   8617c:	0000006b 	.word	0x0000006b
   86180:	6c696146 	.word	0x6c696146
   86184:	74206465 	.word	0x74206465
   86188:	7263206f 	.word	0x7263206f
   8618c:	65746165 	.word	0x65746165
   86190:	72655320 	.word	0x72655320
   86194:	436c6169 	.word	0x436c6169
   86198:	61546d6f 	.word	0x61546d6f
   8619c:	0a0d6b73 	.word	0x0a0d6b73
   861a0:	00000000 	.word	0x00000000
   861a4:	75736e49 	.word	0x75736e49
   861a8:	63696666 	.word	0x63696666
   861ac:	746e6569 	.word	0x746e6569
   861b0:	4d415220 	.word	0x4d415220
   861b4:	00000a0d 	.word	0x00000a0d
   861b8:	00000043 	.word	0x00000043

000861bc <_global_impure_ptr>:
   861bc:	20070140                                @.. 

000861c0 <zeroes.6993>:
   861c0:	30303030 30303030 30303030 30303030     0000000000000000
   861d0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   861e0:	00000000 33323130 37363534 62613938     ....0123456789ab
   861f0:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00086200 <blanks.6992>:
   86200:	20202020 20202020 20202020 20202020                     

00086210 <_init>:
   86210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86212:	bf00      	nop
   86214:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86216:	bc08      	pop	{r3}
   86218:	469e      	mov	lr, r3
   8621a:	4770      	bx	lr

0008621c <__init_array_start>:
   8621c:	00084501 	.word	0x00084501

00086220 <__frame_dummy_init_array_entry>:
   86220:	00080119                                ....

00086224 <_fini>:
   86224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86226:	bf00      	nop
   86228:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8622a:	bc08      	pop	{r3}
   8622c:	469e      	mov	lr, r3
   8622e:	4770      	bx	lr

00086230 <__fini_array_start>:
   86230:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <uxCriticalNesting>:
20070130:	aaaaaaaa                                ....

20070134 <xFreeBytesRemaining>:
20070134:	00008000                                ....

20070138 <xNextTaskUnblockTime>:
20070138:	0000ffff 00000000                       ........

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	000861b8 00000000 00000000 00000000     .a..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	00085b89                                .[..
